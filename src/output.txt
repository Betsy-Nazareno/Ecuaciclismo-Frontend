=== locationTask.ts ===
import * as TaskManager from 'expo-task-manager'
import { get, getDatabase, push, ref, set } from 'firebase/database'
import { getDistance } from 'geolib'

const TASK_NAME = 'BACKGROUND_LOCATION_TASK'

interface Props {
  userToken: string
  foto: string
  setSelfLocation: (location: any) => void
}

export const configureBgTask = ({ userToken, foto }: Props) => {
  const db = getDatabase()
  const referenceLocation = ref(db, 'users/' + userToken + '/location')
  const referenceSpeed = ref(db, 'users/' + userToken + '/speed')
  const referenceTime = ref(db, 'users/' + userToken + '/timestamp')
  const referenceDistance = ref(db, 'users/' + userToken + '/distance')

  TaskManager.defineTask(TASK_NAME, async ({ data, error }) => {
    if (error) {
      return
    }
    if (data) {
      const { locations } = (data as any) || {}
      const [location] = locations || []
      if (location) {
        const { coords, timestamp } = location
        const { longitude, latitude, speed } = coords || {}

        const snapshot = await get(referenceDistance)
        const data = snapshot.val()

        let distance = 0.01
        if (data?.distance) {
          distance = getDistance(
            { latitude, longitude },
            {
              latitude: data?.previousLatitude,
              lng: data?.previousLongitude,
            }
          )
        }
        set(referenceDistance, {
          distance: (data?.distance || 0) + distance,
          previousLatitude: latitude,
          previousLongitude: longitude,
        })
        set(referenceLocation, {
          foto,
          longitude,
          latitude,
        })
        push(referenceSpeed, speed)
        push(referenceTime, timestamp)
      }
    }
  })
}

=== Navbar.tsx ===
import { NavigationProp, useNavigation } from '@react-navigation/native'
import { useFonts } from 'expo-font'
import React from 'react'
import { Pressable, Text } from 'react-native'
import { useDispatch } from 'react-redux'
import tw from 'twrnc'
import { RootStackParamList, Screens } from '../../models/Screens.types'
import { setActiveScreen } from '../../redux/screens'

const Navbar = () => {
  const navigation =
    useNavigation<NavigationProp<RootStackParamList, Screens>>()
  const dispatch = useDispatch()
  const [fontsLoaded] = useFonts({
    Bungee: require('../../../assets/fonts/Bungee-Regular.ttf'),
  })

  if (!fontsLoaded) {
    return null
  }

  return (
    <Pressable
      style={{ paddingVertical: 16 }}
      onPress={() => {
        navigation.navigate('Inicio')
        dispatch(setActiveScreen({ activeScreen: 'Inicio' }))
      }}
    >
      <Text style={{ fontFamily: 'Bungee', marginTop: 14 }}>
        <Text style={tw`text-[#F16F31] font-bold text-xl`}>
          ECUA
          <Text style={tw`text-white`}>CICLISMO</Text>
        </Text>
      </Text>
    </Pressable>
  )
}

export default Navbar

=== AdditionalMediaIcon.tsx ===
import * as React from 'react'
import { Image } from 'react-native'

const AdditionalMediaIcon = () => {
  return (
    <Image
      source={require('../../../assets/additional_audio_icon.png')}
      style={{ width: 20, height: 20 }}
    />
  )
}

export default AdditionalMediaIcon

=== ArrowDivider.tsx ===
import * as React from 'react'
import { Image } from 'react-native'

const ArrowDivider = () => {
  return (
    <Image
      source={require('../../../assets/flecha.png')}
      style={{ width: 20, height: 20 }}
    />
  )
}

export default ArrowDivider

=== BandaEstadoRuta.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Text, View } from 'react-native'

interface BandaEstadoRutaProps {
  color: string
  estado: string
  styles?: string
}

const BandaEstadoRuta = ({
  color,
  estado,
  styles = '',
}: BandaEstadoRutaProps) => {
  return (
    <View
      style={[
        tw`absolute top-4 -right-6 ${color} px-6 ${styles}`,
        { transform: [{ rotate: '40deg' }] },
      ]}
    >
      <Text style={tw`text-white font-semibold text-xs text-center`}>
        {estado}
      </Text>
    </View>
  )
}

export default BandaEstadoRuta

=== ButtonPrimary.tsx ===
import * as React from 'react'
import {
  Text,
  View,
  TouchableHighlight,
  ImageSourcePropType,
  Image,
} from 'react-native'
import tw from 'twrnc'

interface ButtonPrimaryProps {
  label: string
  handleClick?: () => void
  style: string
  icon?: ImageSourcePropType
  iconDimension?: number
}

const ButtonPrimary = ({
  label,
  style,
  handleClick,
  icon,
  iconDimension = 25,
}: ButtonPrimaryProps) => {
  return (
    <TouchableHighlight
      activeOpacity={0.6}
      underlayColor="#E7F5FF"
      onPress={handleClick}
    >
      <View
        style={tw`py-3 px-6 rounded-md ${style} flex flex-row justify-center`}
      >
        <Text style={tw`text-center font-bold text-white text-base`}>
          {label}
        </Text>
        {icon && (
          <Image
            source={icon}
            style={{
              width: iconDimension,
              height: iconDimension,
              marginLeft: 12,
            }}
          />
        )}
      </View>
    </TouchableHighlight>
  )
}

export default ButtonPrimary

=== ButtonTab.tsx ===
import { NavigationProp, useNavigation } from '@react-navigation/native'
import React, { ReactNode } from 'react'
import { Pressable, View } from 'react-native'
import { useDispatch, useSelector } from 'react-redux'
import tw from 'twrnc'
import { RootStackParamList, Screens } from '../../models/Screens.types'
import { setActiveScreen } from '../../redux/screens'
import { RootState } from '../../redux/store'
import { BACKGROUND_COLORS } from '../../utils/constants'

interface Props {
  children: ReactNode
  screen: Screens
  param?: any
}

export const ButtonTab = ({ children, screen, param }: Props) => {
  const { activeScreen } = useSelector((state: RootState) => state.screens)
  const navigation =
    useNavigation<NavigationProp<RootStackParamList, Screens>>()
  const dispatch = useDispatch()

  const handleChangeScreen = () => {
    dispatch(setActiveScreen({ activeScreen: screen }))
    if (param) {
      navigation.navigate(screen, param)
    } else {
      navigation.navigate(screen)
    }
  }

  const isActiveScreen = () => screen === activeScreen
  return (
    <Pressable onPress={handleChangeScreen} style={tw`w-1/4`}>
      <View>
        <View style={tw`flex flex-col items-center`}>{children}</View>
        <View style={tw`mt-[4%] h-1 w-8/12 mx-auto`}>
          {isActiveScreen() && (
            <View
              style={tw`rounded-3xl ${BACKGROUND_COLORS.ORANGE} w-full h-full`}
            />
          )}
        </View>
      </View>
    </Pressable>
  )
}

=== ButtonUnderline.tsx ===
import * as React from 'react'
import { Text, Pressable } from 'react-native'
import tw from 'twrnc'

interface ButtonUnderlineProps {
  label: string
  handleClick: () => void
  style?: string
}

const ButtonUnderline = ({
  label,
  handleClick,
  style = '',
}: ButtonUnderlineProps) => {
  return (
    <Pressable onPress={handleClick}>
      <Text style={tw`underline font-semibold ${style}`}>{label}</Text>
    </Pressable>
  )
}

export default ButtonUnderline

=== CancelButton.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Pressable, Image } from 'react-native'

interface CancelButtonProps {
  handleClick?: (value: string) => void
  value?: string
  styles?: string
  size?: number
}

const CancelButton = ({
  handleClick,
  value,
  styles,
  size = 15,
}: CancelButtonProps) => {
  return (
    <Pressable
      onPress={() => handleClick?.(value || '')}
      style={tw`absolute -top-1 -right-5 w-8 ${styles || ''}`}
    >
      <Image
        source={require('../../../assets/cancel_icon.png')}
        style={{ width: size, height: size }}
      />
    </Pressable>
  )
}

export default CancelButton

=== CustomSwitch.tsx ===
import * as React from 'react'
import { Switch } from 'react-native-gesture-handler'

interface CustomSwitchProps {
  handleClick: () => void
  active: boolean
}

const CustomSwitch = ({ active, handleClick }: CustomSwitchProps) => {
  return (
    <Switch
      trackColor={{ false: '#e6e6e6', true: '#81b0ff' }}
      thumbColor="#3FA1EE"
      onValueChange={handleClick}
      value={active}
    />
  )
}

export default CustomSwitch

=== CustomText.tsx ===
import React, { useEffect, useState } from 'react'
import { Text, TextStyle } from 'react-native'
import tw from 'twrnc'
import * as Font from 'expo-font'

interface Props {
  children: React.ReactText | React.ReactText[]
  style?: string
  containerProps?: TextStyle
}

export const CustomText = ({ children, style, containerProps }: Props) => {
  const [fontsLoaded, setFontsLoaded] = useState(false)

  const _loadFontsAsync = async () => {
    await Font.loadAsync({
      Montserrat: require('../../../assets/fonts/Montserrat-Bold.ttf'),
    })
  }

  useEffect(() => {
    let isUnmounted = true
    _loadFontsAsync().then(() => {
      if (isUnmounted) setFontsLoaded(true)
    })
    return () => {
      isUnmounted = false
    }
  }, [])

  return fontsLoaded ? (
    <Text style={{ fontFamily: 'Montserrat', ...containerProps }}>
      <Text style={tw`${style || ''}`}>{children}</Text>
    </Text>
  ) : (
    <></>
  )
}

=== ErrorMessage.tsx ===
import * as React from 'react'
import { Text, View } from 'react-native'
import tw from 'twrnc'

interface ErrorMessageProps {
  message: string
}

const ErrorMessage = ({ message }: ErrorMessageProps) => {
  return (
    <View style={tw` py-2 w-10/12 mx-auto bg-opacity-50 -mt-4`}>
      <Text style={tw`text-red-500 font-bold text-xs text-center`}>
        {message}
      </Text>
    </View>
  )
}

export default ErrorMessage

=== FieldError.tsx ===
import { Text } from 'react-native'
import tw from 'twrnc'
import { TEXT_COLORS } from '../../utils/constants'
import React from 'react'

export const FieldError = (message: string) => {
  return (
    <Text style={tw`text-xs ${TEXT_COLORS.ORANGE} mt-1 px-2`}>{message}</Text>
  )
}

=== FieldTitle.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Text } from 'react-native'
import { TEXT_COLORS } from '../../utils/constants'

interface FieldTitleProps {
  text: string
}

const FieldTitle = ({ text }: FieldTitleProps) => {
  return (
    <Text style={tw`${TEXT_COLORS.DARK_BLUE} font-bold text-sm pl-2`}>
      {text}
    </Text>
  )
}

export default FieldTitle

=== FiltroFecha.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import Gap from './Gap'
import { Image, Pressable } from 'react-native'
import { CustomText } from './CustomText'
import DateTimePicker, {
  DateTimePickerEvent,
} from '@react-native-community/datetimepicker'
import { BACKGROUND_COLORS } from '../../utils/constants'
import CancelButton from './CancelButton'
interface FiltroFechaProps {
  date?: number
  setDate: (date: Date | undefined) => void
}

const FiltroFecha = ({ date, setDate }: FiltroFechaProps) => {
  const [show, setShow] = React.useState(false)

  const onChange = (event: DateTimePickerEvent, selectedDate?: Date) => {
    if (event.type !== 'set' || !selectedDate) {
      setShow(false)
      return
    }
    setShow(false)
    setDate(selectedDate)
  }

  const handlePress = () => {
    if (!date) {
      setShow(true)
    } else {
      setDate(undefined)
    }
  }

  const backgroundColor = date
    ? BACKGROUND_COLORS.SKY_BLUE
    : BACKGROUND_COLORS.ORANGE

  return (
    <>
      {show && (
        <DateTimePicker
          testID="dateTimePicker"
          value={date ? new Date(date) : new Date(Date.now())}
          is24Hour={true}
          onChange={onChange}
        />
      )}
      <Pressable
        style={tw`${backgroundColor} rounded-3xl py-1 pl-2 pr-3 flex flex-row items-center h-7`}
        onPress={handlePress}
      >
        <Gap px="2">
          <Image
            source={require('../../../assets/calendar.png')}
            style={{ width: 16, height: 16 }}
          />
        </Gap>
        <CustomText style="text-white text-xs">
          {date ? new Date(date).toLocaleDateString() : 'Fecha'}
        </CustomText>
        {date && <CancelButton />}
      </Pressable>
    </>
  )
}

export default FiltroFecha

=== Gap.tsx ===
import * as React from 'react'
import { View } from 'react-native'
import tw from 'twrnc'

interface GapProps {
  styles?: string
  px?: string
  py?: string
  children: React.ReactNode | React.ReactNode[]
}

const Gap = ({ styles, px, py, children }: GapProps) => {
  return (
    <View
      style={tw`${px ? `px-${px}` : ''} ${styles || ''} ${
        py ? `py-${py}` : ''
      }`}
    >
      {children}
    </View>
  )
}

export default Gap

=== InformacionUsuario.tsx ===
import * as React from 'react'
import { Image, Text, View } from 'react-native'
import tw from 'twrnc'
import { TEXT_COLORS } from '../../utils/constants'

interface InformacionUsuarioProps {
  firstName: string
  lastName: string
  foto?: string
}

const InformacionUsuario = ({
  firstName,
  lastName,
  foto,
}: InformacionUsuarioProps) => {
  return (
    <View style={tw`flex flex-row pb-2`}>
      <Image
        source={foto ? { uri: foto } : require('../../../assets/user.png')}
        style={{ width: 40, height: 45, borderRadius: 400 / 2 }}
        resizeMode="contain"
      />
      <View style={tw`ml-[4%] mt-[1%]`}>
        <Text
          style={tw`text-base ${TEXT_COLORS.DARK_BLUE} font-semibold capitalize`}
        >
          {`${firstName} ${lastName}`}
        </Text>
        <Text style={tw`text-[11px] ${TEXT_COLORS.DARK_GRAY} font-semibold`}>
          Administrador
        </Text>
      </View>
    </View>
  )
}

export default InformacionUsuario

=== ItemCheckList.tsx ===
import * as React from 'react'
import { Text, Image } from 'react-native'
import Gap from './Gap'

interface ItemCheckListProps {
  text: string
}

const ItemCheckList = ({ text }: ItemCheckListProps) => {
  return (
    <Gap styles="flex flex-row" py="1">
      <Image
        source={require('../../../assets/check_icon.png')}
        style={{ width: 15, height: 15, marginRight: 4 }}
      />
      <Text>{text}</Text>
    </Gap>
  )
}

export default ItemCheckList

=== ItemLi.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Text, View } from 'react-native'
import { BACKGROUND_COLORS, TEXT_COLORS } from '../../utils/constants'

interface ItemLiProps {
  text: string
}

const ItemLi = ({ text }: ItemLiProps) => {
  return (
    <View style={tw`flex flex-row flex-wrap items-center`}>
      <View
        style={tw`w-2 h-2 rounded-full mr-2 ${BACKGROUND_COLORS.DARK_BLUE}`}
      />
      <Text style={tw`${TEXT_COLORS.DARK_BLUE}`}>{text}</Text>
    </View>
  )
}

export default ItemLi

=== OpcionesMenu.tsx ===
import * as React from 'react'
import { View, Image, Pressable } from 'react-native'
import tw from 'twrnc'
import { TEXT_COLORS } from '../../utils/constants'
import Ruler from './Ruler'
import { CustomText } from './CustomText'

interface MenuProps {
  handleEdit: () => void
  handleDelete: () => void
  handlePin: () => void
  pinLabel: string
}

const OpcionesMenu = ({
  handleEdit,
  handleDelete,
  handlePin,
  pinLabel,
}: MenuProps) => {
  return (
    <View
      style={tw`absolute top-6 right-4 bg-white z-40 py-1 rounded-lg shadow-md w-44 z-40`}
    >
      <Pressable onPress={handlePin}>
        <View style={tw`flex flex-row items-center py-4 px-8`}>
          <Image
            source={require('../../../assets/pin_icon.png')}
            style={{ width: 20, height: 20, marginRight: 16 }}
          />
          <CustomText style={`${TEXT_COLORS.DARK_BLUE} font-semibold text-sm`}>
            {pinLabel}
          </CustomText>
        </View>
      </Pressable>

      <Ruler style="w-11/12 mx-auto" />

      <Pressable onPress={handleEdit}>
        <View style={tw`flex flex-row items-center py-4 px-8`}>
          <Image
            source={require('../../../assets/edit_blue_icon.png')}
            style={{ width: 17, height: 17, marginRight: 16 }}
          />
          <CustomText style={`${TEXT_COLORS.DARK_BLUE} font-semibold text-sm`}>
            Editar
          </CustomText>
        </View>
      </Pressable>

      <Ruler style="w-11/12 mx-auto" />

      <Pressable onPress={handleDelete}>
        <View style={tw`flex flex-row items-center py-4 px-8 `}>
          <Image
            source={require('../../../assets/bin_icon.png')}
            style={{ width: 17, height: 17, marginRight: 16 }}
          />
          <CustomText style={`${TEXT_COLORS.DARK_BLUE} font-semibold text-sm`}>
            Eliminar
          </CustomText>
        </View>
      </Pressable>
    </View>
  )
}

export default OpcionesMenu

=== OpcionesMenuPublicaciones.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { View, Pressable, Image } from 'react-native'
import { CustomText } from './CustomText'
import { TEXT_COLORS } from '../../utils/constants'
import Ruler from './Ruler'

interface OpcionesMenuPulicacionesProps {
  canEdit?: boolean
  setDisplay: (value: boolean) => void
  handleEdit: () => void
  handleDelete: () => void
}

const OpcionesMenuPulicaciones = ({
  canEdit = true,
  setDisplay,
  handleEdit,
  handleDelete,
}: OpcionesMenuPulicacionesProps) => {
  return (
    <View
      style={tw`absolute top-6 right-4 bg-white z-40 py-1 rounded-lg shadow-md w-44`}
    >
      {canEdit && (
        <>
          <Pressable
            onPress={handleEdit}
            onBlur={() => setDisplay(false)}
            onPressOut={() => setDisplay(false)}
            onTouchEnd={() => setDisplay(false)}
          >
            <View style={tw`flex flex-row items-center py-4 px-8`}>
              <Image
                source={require('../../../assets/edit_blue_icon.png')}
                style={{ width: 20, height: 20, marginRight: 16 }}
              />
              <CustomText
                style={`${TEXT_COLORS.DARK_BLUE} font-semibold text-sm`}
              >
                Editar
              </CustomText>
            </View>
          </Pressable>
          <Ruler style="w-11/12 mx-auto" />
        </>
      )}
      <Pressable onPress={handleDelete}>
        <View style={tw`flex flex-row items-center py-4 px-8 `}>
          <Image
            source={require('../../../assets/bin_icon.png')}
            style={{ width: 20, height: 20, marginRight: 16 }}
          />
          <CustomText style={`${TEXT_COLORS.DARK_BLUE} font-semibold text-sm`}>
            Eliminar
          </CustomText>
        </View>
      </Pressable>
    </View>
  )
}

export default OpcionesMenuPulicaciones

=== OpcionesMenuRutas.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Image, Pressable, View } from 'react-native'
import { CustomText } from './CustomText'
import { TEXT_COLORS } from '../../utils/constants'
import Ruler from './Ruler'

interface OpcionesMenuRutasProps {
  handleEdit: () => void
  handleCancelar: () => void
  handleFinalizar: () => void
  showFinalizar: boolean
}

const OpcionesMenuRutas = ({
  handleEdit,
  handleCancelar,
  handleFinalizar,
  showFinalizar,
}: OpcionesMenuRutasProps) => {
  return (
    <View
      style={tw`absolute top-6 right-4 bg-white z-40 py-1 rounded-lg shadow-md w-44`}
    >
      <Pressable onPress={handleEdit}>
        <View style={tw`flex flex-row items-center py-4 px-8`}>
          <Image
            source={require('../../../assets/edit_blue_icon.png')}
            style={{ width: 17, height: 17, marginRight: 16 }}
          />
          <CustomText style={`${TEXT_COLORS.DARK_BLUE} font-semibold text-sm`}>
            Editar
          </CustomText>
        </View>
      </Pressable>
      <Ruler style="w-11/12 mx-auto" />

      <Pressable onPress={handleCancelar}>
        <View style={tw`flex flex-row items-center py-4 px-8 `}>
          <Image
            source={require('../../../assets/cancelar_icon.png')}
            style={{ width: 17, height: 17, marginRight: 16 }}
          />
          <CustomText style={`${TEXT_COLORS.DARK_BLUE} font-semibold text-sm`}>
            Cancelar
          </CustomText>
        </View>
      </Pressable>

      {showFinalizar ? (
        <>
          <Ruler style="w-11/12 mx-auto" />

          <Pressable onPress={handleFinalizar}>
            <View style={tw`flex flex-row items-center py-4 px-8 `}>
              <Image
                source={require('../../../assets/stop.png')}
                style={{ width: 17, height: 17, marginRight: 16 }}
              />
              <CustomText
                style={`${TEXT_COLORS.DARK_BLUE} font-semibold text-sm`}
              >
                Finalizar
              </CustomText>
            </View>
          </Pressable>
        </>
      ) : null}
    </View>
  )
}

export default OpcionesMenuRutas

=== OptionSideMenu.tsx ===
import * as React from 'react'
import { Image, ImageSourcePropType, Pressable, Text, View } from 'react-native'
import { useSelector } from 'react-redux'
import tw from 'twrnc'
import { RootState } from '../../redux/store'
import { BACKGROUND_COLORS, TEXT_COLORS } from '../../utils/constants'

interface OptionSideMenuProps {
  source: ImageSourcePropType
  label: string
  name: string
  handleClick?: () => void
}

const OptionSideMenu = ({
  source,
  label,
  name,
  handleClick,
}: OptionSideMenuProps) => {
  const { activeTab } = useSelector((state: RootState) => state.drawerTabs)
  return (
    <Pressable onPress={handleClick}>
      <View style={tw`flex flex-row items-center pl-4 py-4 my-1`}>
        {activeTab === name && (
          <View
            style={tw`h-full ${BACKGROUND_COLORS.ORANGE} w-1 rounded-lg mr-2`}
          />
        )}
        <View style={tw`pr-2`}>
          <Image source={source} style={{ width: 30, height: 30 }} />
        </View>
        <View>
          <Text style={tw`text-base ${TEXT_COLORS.DARK_BLUE}`}>{label}</Text>
        </View>
      </View>
    </Pressable>
  )
}

export default OptionSideMenu

=== RatingStars.tsx ===
import * as React from 'react'
import { Rating } from 'react-native-ratings'

interface RatingStarsProps {
  stars: number
  setStars?: (value: number) => void
  readonly?: boolean
  size?: number
}

const RatingStars = ({
  stars,
  setStars,
  readonly = false,
  size = 40,
}: RatingStarsProps) => {
  return (
    <Rating
      onFinishRating={(stars: number) => setStars?.(stars)}
      style={{ paddingVertical: 10 }}
      startingValue={stars}
      readonly={readonly}
      imageSize={size}
    />
  )
}

export default RatingStars

=== Reaccion.tsx ===
import * as React from 'react'
import { Text, View, Image, ImageSourcePropType, Pressable } from 'react-native'
import tw from 'twrnc'
import { ReaccionTypes, ReaccionValues } from '../../models/Reacciones.model'
import { BACKGROUND_COLORS, TEXT_COLORS } from '../../utils/constants'

interface ReaccionProps {
  image: ImageSourcePropType
  dimension: number
  reaccionObject?: ReaccionValues
  isSelected?: boolean
  name: ReaccionTypes
  handleClick: (value: ReaccionTypes, alreadySelected: boolean) => void
}

const Reaccion = ({
  image,
  dimension,
  name,
  handleClick,
  isSelected,
  reaccionObject,
}: ReaccionProps) => {
  const [count, setCount] = React.useState<number | undefined>(0)
  const [isPressed, setIsPressed] = React.useState(false)

  React.useEffect(() => {
    setCount(reaccionObject?.usuarios?.length || undefined)
    setIsPressed(isSelected || false)
  }, [reaccionObject])

  const handleReaction = () => {
    if (!isPressed) {
      setCount((count || 0) + 1)
    } else {
      setCount((count || 1) - 1)
    }
    setIsPressed(!isPressed)
    handleClick(name, isPressed)
  }

  return (
    <Pressable onPress={handleReaction}>
      <View style={tw`mx-2 flex flex-row `}>
        <View style={tw`pr-2`}>
          <Image
            source={image}
            style={{ width: dimension, height: dimension }}
          />
          {isPressed && (
            <View
              style={tw`h-[3px] w-full mt-2 rounded-2xl ${BACKGROUND_COLORS.ORANGE}`}
            />
          )}
        </View>
        <Text style={tw`${TEXT_COLORS.DARK_GRAY} text-xs`}>{count || ''}</Text>
      </View>
    </Pressable>
  )
}

export default Reaccion

=== RoundedButtonIcon.tsx ===
import * as React from 'react'
import {
  View,
  TouchableHighlight,
  Image,
  ImageSourcePropType,
} from 'react-native'
import tw from 'twrnc'
import { BACKGROUND_COLORS } from '../../utils/constants'
interface RoundedButtonProps {
  handleClick: () => void
  src: ImageSourcePropType
  style?: string
  dimension?: number
}

const RoundedButtonIcon = ({
  handleClick,
  src,
  style = '',
  dimension = 18,
}: RoundedButtonProps) => {
  return (
    <TouchableHighlight
      activeOpacity={0.6}
      underlayColor="#E7F5FF"
      onPress={handleClick}
      style={{ borderRadius: 100 / 2 }}
    >
      <View
        style={tw`h-10 w-10 rounded-full flex items-center justify-center ${BACKGROUND_COLORS.PRIMARY_BLUE} ${style}`}
      >
        <Image source={src} style={{ width: dimension, height: dimension }} />
      </View>
    </TouchableHighlight>
  )
}

export default RoundedButtonIcon

=== RoundedDashButton.tsx ===
import * as React from 'react'
import { Text, View, Pressable } from 'react-native'
import * as DocumentPicker from 'expo-document-picker'
import tw from 'twrnc'
import {
  BACKGROUND_COLORS,
  BORDER_COLORS,
  TEXT_COLORS,
} from '../../utils/constants'
import { useFormikContext } from 'formik'
import { Consejo } from '../../models/Consejo.model'
const CANCEL_TYPE = 'cancel'

interface RoundedDashButtonProps {
  textoProp?: string
  field: string
}

const RoundedDashButton = ({ textoProp, field }: RoundedDashButtonProps) => {
  const { setFieldValue } = useFormikContext<Consejo>()
  const [text, setText] = React.useState(textoProp)

  const getFile = async () => {
    const file = await DocumentPicker.getDocumentAsync()

    if (file.type !== CANCEL_TYPE) {
      setText('Cambiar foto')
      setFieldValue(field, file)
    }
  }

  return (
    <Pressable onPress={getFile}>
      <View
        style={tw`rounded-3xl shadow-md px-4 py-2 ${BORDER_COLORS.GRAY} ${BACKGROUND_COLORS.BLUE_LIGHTER}`}
      >
        <Text style={tw`text-center ${TEXT_COLORS.DARK_BLUE}`}>{text}</Text>
      </View>
    </Pressable>
  )
}

export default RoundedDashButton

=== RowWithImage.tsx ===
import * as React from 'react'
import { Image, ImageSourcePropType, Text, View } from 'react-native'
import tw from 'twrnc'
import { TEXT_COLORS } from '../../utils/constants'

interface RowWithImageProps {
  icon: ImageSourcePropType
  text: string
  styleText?: string
}

const RowWithImage = ({ icon, text, styleText }: RowWithImageProps) => {
  return (
    <View style={tw`flex flex-row items-center `}>
      <Image source={icon} style={{ width: 20, height: 20, marginRight: 12 }} />
      <Text style={tw`${TEXT_COLORS.DARK_GRAY} ${styleText || ''}`}>
        {text}
      </Text>
    </View>
  )
}

export default RowWithImage

=== Ruler.tsx ===
import * as React from 'react'
import { View } from 'react-native'
import tw from 'twrnc'

interface Prop {
  style: string
}

const Ruler = ({ style }: Prop) => {
  return <View style={tw`h-[1px] bg-gray-400 ${style}`} />
}

export default Ruler

=== SecondaryButton.tsx ===
import * as React from 'react'
import { Text, View, TouchableHighlight } from 'react-native'
import tw from 'twrnc'
import { BACKGROUND_COLORS } from '../../utils/constants'

interface SecondaryButtonProps {
  label: string
  handleClick?: () => void
  style: string
}

const SecondaryButton = ({
  label,
  style,
  handleClick,
}: SecondaryButtonProps) => {
  return (
    <TouchableHighlight
      activeOpacity={0.6}
      underlayColor="#E7F5FF"
      onPress={handleClick}
    >
      <View style={tw`${style} ${BACKGROUND_COLORS.ORANGE} py-3 rounded-3xl`}>
        <Text style={tw`text-center font-bold text-white text-base`}>
          {label}
        </Text>
      </View>
    </TouchableHighlight>
  )
}

export default SecondaryButton

=== SelectInput.tsx ===
import * as React from 'react'
import { Picker } from '@react-native-picker/picker'
import { Etiqueta } from '../../models/Etiqueta.model'

interface SelectInputProps {
  values: Etiqueta[]
  placeholder: string
  setValuesSelected: (value: string) => void
  selectedValue?: string
}

const SelectInput = ({
  values,
  setValuesSelected,
  placeholder,
  selectedValue,
}: SelectInputProps) => {
  return (
    <Picker
      onValueChange={(itemValue) => setValuesSelected(itemValue as string)}
      mode="dropdown"
      selectedValue={selectedValue}
    >
      <Picker.Item label={placeholder} style={{ color: '#767676' }} />
      {values.map((item) => {
        const { nombre, value } = item
        return <Picker.Item label={nombre} value={value} key={value} />
      })}
    </Picker>
  )
}

export default SelectInput

=== Spinner.tsx ===
import * as React from 'react'
import { View, StyleSheet, ActivityIndicator } from 'react-native'

const Spinner = () => {
  return (
    <View style={[styles.container, styles.horizontal]}>
      <ActivityIndicator size="large" color="#F16F31" />
    </View>
  )
}

export default Spinner

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
  },
  horizontal: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    padding: 10,
  },
})

=== TextCheck.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Text, View, Pressable, Image } from 'react-native'
import { catalogs } from '../../models/Rutas'
import { BACKGROUND_COLORS } from '../../utils/constants'

interface TextCheckProps {
  option: catalogs
  handleClick: (token: string) => void
  style: string
}

const TextCheck = ({ option, style, handleClick }: TextCheckProps) => {
  const [isSelected, setIsSelected] = React.useState(false)
  return (
    <Pressable
      style={tw`${style} flex flex-row items-center`}
      onPress={() => {
        handleClick(option.token || '')
        setIsSelected(!isSelected)
      }}
    >
      <View
        style={tw`w-4 h-4 ${
          isSelected ? BACKGROUND_COLORS.PRIMARY_BLUE : 'bg-transparent'
        } border-2 border-solid border-gray-200 rounded-md mr-2 flex items-center justify-center`}
      >
        <Image
          source={require('../../../assets/check_white_icon.png')}
          style={{ width: 8, height: 8 }}
        />
      </View>
      <Text>{option.nombre}</Text>
    </Pressable>
  )
}

export default TextCheck

=== TextoExpandible.tsx ===
import * as React from 'react'
import { Text, Pressable } from 'react-native'
import tw from 'twrnc'
import { TEXT_COLORS } from '../../utils/constants'

interface TextoExpandibleProps {
  text: string
  maxLength: number
}

const TextoExpandible = ({ text, maxLength }: TextoExpandibleProps) => {
  const [hasMoreText, setHasMoreText] = React.useState(false)
  const [textRender, setTextRender] = React.useState('')

  React.useEffect(() => {
    let isMounted = true
    if (isMounted) {
      if (text && text.length > 200) {
        setHasMoreText(true)
        setTextRender(text.substring(0, maxLength) + '...')
      } else {
        setTextRender(text)
      }
    }
    return () => {
      isMounted = false
    }
  }, [text])

  const handleDisplayText = () => {
    if (text && hasMoreText) {
      setTextRender(text)
      setHasMoreText(false)
    } else if (text) {
      setTextRender(text.substring(0, maxLength) + '...')
      setHasMoreText(true)
    }
  }

  return (
    <Text style={tw`text-sm ${TEXT_COLORS.DARK_BLUE}`}>
      {textRender}
      {text.length > 200 && (
        <Pressable onPress={handleDisplayText}>
          <Text style={tw`text-sm font-bold ${TEXT_COLORS.ORANGE}`}>
            {hasMoreText ? 'Ver más' : 'Ver menos'}
          </Text>
        </Pressable>
      )}
    </Text>
  )
}

export default TextoExpandible

=== TouchableMessage.tsx ===
import * as React from 'react'
import { Text, View, Pressable } from 'react-native'
import tw from 'twrnc'

interface TouchableMessageProps {
  text: string
  style: string
  handleClick: () => void
}

const TouchableMessage = ({
  text,
  style,
  handleClick,
}: TouchableMessageProps) => {
  return (
    <Pressable onPress={handleClick}>
      <View style={tw`${style}`}>
        <Text style={tw`text-[#F16F31] text-sm text-center`}>{text}</Text>
      </View>
    </Pressable>
  )
}

export default TouchableMessage

=== UnfocusButton.tsx ===
import * as React from 'react'
import { Text, View, TouchableHighlight } from 'react-native'
import tw from 'twrnc'
import { TEXT_COLORS } from '../../utils/constants'

interface UnfocusButtonProps {
  label: string
  handleClick?: () => void
  style: string
}

const UnfocusButton = ({ label, style, handleClick }: UnfocusButtonProps) => {
  return (
    <TouchableHighlight
      activeOpacity={0.6}
      underlayColor="#E7F5FF"
      onPress={handleClick}
    >
      <View style={tw`${style} bg-white py-3 rounded-3xl`}>
        <Text
          style={tw`text-center font-bold ${TEXT_COLORS.DARK_BLUE} text-base`}
        >
          {label}
        </Text>
      </View>
    </TouchableHighlight>
  )
}

export default UnfocusButton

=== VerticalDivider.tsx ===
import * as React from 'react'
import { View } from 'react-native'
import tw from 'twrnc'
import { BACKGROUND_COLORS } from '../../utils/constants'

interface VerticalDividerProps {
  style?: string
}
const VerticalDivider = ({ style = '' }: VerticalDividerProps) => {
  return (
    <View
      style={tw`absolute left-7 w-[1px] h-full ${BACKGROUND_COLORS.GRAY} ${style}`}
    />
  )
}

export default VerticalDivider

=== ViewMoreRounded.tsx ===
import * as React from 'react'
import { View } from 'react-native'
import { TEXT_COLORS } from '../../utils/constants'
import { CustomText } from './CustomText'

interface ViewMoreRoundedProps {
  label: string
  dimension?: number
}

const ViewMoreRounded = ({ label, dimension = 40 }: ViewMoreRoundedProps) => {
  const textSize = dimension < 40 ? 'text-xs' : 'text-base'
  return (
    <View
      style={{
        width: dimension,
        height: dimension,
        borderRadius: 100 / 2,
        marginLeft: -10,
        backgroundColor: '#e6e6e6',
      }}
    >
      <CustomText
        style={`${TEXT_COLORS.DARK_BLUE} font-bold ${textSize}`}
        containerProps={{
          marginTop: 5,
          textAlign: 'center',
        }}
      >
        {label}
      </CustomText>
    </View>
  )
}

export default ViewMoreRounded

=== LinkedBadges.tsx ===
import * as React from 'react'
import { ScrollView } from 'react-native-gesture-handler'
import { Etiqueta } from '../../models/Etiqueta.model'
import tw from 'twrnc'
import Badge from './Badge'
import Gap from '../atomos/Gap'
import { BACKGROUND_COLORS } from '../../utils/constants'
import RoundedBadge from './RoundedBadge'
import TransparentBadge from './TransparentBadge'

interface LinkedBadgesProps {
  etiquetas: Etiqueta[]
  tipo?: 'rounded' | 'standard' | 'transparent'
  children?: React.ReactNode | React.ReactNode[]
}

const LinkedBadges = ({
  etiquetas,
  tipo = 'standard',
  children,
}: LinkedBadgesProps) => {
  return (
    <ScrollView
      horizontal
      showsHorizontalScrollIndicator={false}
      style={tw`mx-4 flex flex-row overflow-hidden`}
    >
      {children}
      {etiquetas.map((etiqueta, index) => {
        return (
          <Gap key={index} px="1">
            {tipo === 'standard' ? (
              <Badge
                name={etiqueta.value}
                label={etiqueta.nombre}
                backgroundColor={BACKGROUND_COLORS.SKY_BLUE}
              />
            ) : tipo === 'rounded' ? (
              <RoundedBadge label={etiqueta.nombre} styles="bg-white" />
            ) : tipo === 'transparent' ? (
              <TransparentBadge label={etiqueta.nombre} />
            ) : (
              <></>
            )}
          </Gap>
        )
      })}
    </ScrollView>
  )
}

export default LinkedBadges

=== AudioPlay.tsx ===
import * as React from 'react'
import { View, Image, Pressable } from 'react-native'
import { Audio } from 'expo-av'
import tw from 'twrnc'

interface AudioPlayProps {
  source: any
}

const AudioPlay = ({ source }: AudioPlayProps) => {
  const [sound, setSound] = React.useState<Audio.Sound>()
  const [isPlaying, setIsPlaying] = React.useState(false)

  async function playSound() {
    const uri = source.uri || source.link
    const { sound } = await Audio.Sound.createAsync({ uri })
    setSound(sound)
    await sound.playAsync()
    setIsPlaying(true)
  }

  const pauseSound = async () => {
    await sound?.pauseAsync()
    setIsPlaying(false)
  }

  const handleSound = async () => {
    isPlaying ? pauseSound() : playSound()
  }

  const icon = isPlaying
    ? require('../../../assets/pause_icon.png')
    : require('../../../assets/play_icon.png')

  return (
    <View style={tw`flex flex-col items-center justify-center`}>
      <View
        style={[
          tw`flex flex-row items-center justify-center mb-1`,
          { width: 80, height: 80 },
        ]}
      >
        <Pressable onPress={handleSound}>
          <Image
            source={icon}
            style={{
              width: 60,
              height: 60,
              borderRadius: 10 / 2,
            }}
          />
        </Pressable>
      </View>
    </View>
  )
}

export default AudioPlay

=== AudioRecord.tsx ===
import * as React from 'react'
import {
  View,
  StyleSheet,
  Vibration,
  Image,
  Pressable,
  StyleProp,
  TextStyle,
} from 'react-native'
import { Audio } from 'expo-av'
import tw from 'twrnc'
import { BACKGROUND_COLORS, TEXT_COLORS } from '../../utils/constants'
import { CustomText } from '../atomos/CustomText'

interface AudioRecordProps {
  field: string
  setField: (audio: Audio.Recording) => void
}

const AudioRecord = ({ setField }: AudioRecordProps) => {
  const [recording, setRecording] = React.useState<Audio.Recording>()

  async function startRecording() {
    Vibration.vibrate(100)
    try {
      await Audio.requestPermissionsAsync()
      await Audio.setAudioModeAsync({
        allowsRecordingIOS: true,
        playsInSilentModeIOS: true,
      })
      const { recording } = await Audio.Recording.createAsync(
        Audio.RECORDING_OPTIONS_PRESET_HIGH_QUALITY
      )
      setRecording(recording)
    } catch (err) {
      console.error('Failed to start recording', err)
    }
  }

  async function stopRecording() {
    Vibration.vibrate(100)
    setRecording(undefined)
    await recording?.stopAndUnloadAsync()
    recording && setField(recording)
  }

  return (
    <View style={recording ? styles.containerFocus : styles.containerUnfocus}>
      <View style={tw`relative py-2 `}>
        <View style={tw`flex flex-row justify-center`}>
          {recording && (
            <View
              style={tw`mr-2 mt-[1%] rounded-full h-2 w-2 ${BACKGROUND_COLORS.ORANGE}`}
            />
          )}
          <CustomText
            style={`${TEXT_COLORS.DARK_GRAY} text-xs`}
            containerProps={{ textAlign: 'center' }}
          >
            {recording ? 'Grabando...' : 'Pulsa para grabar'}
          </CustomText>
        </View>
        <Pressable
          style={tw`absolute right-0 ${recording ? '-top-3' : '-top-1'}`}
          onLongPress={startRecording}
          onPressOut={stopRecording}
        >
          <Image
            source={require('../../../assets/button_audio_icon.png')}
            style={{ width: recording ? 60 : 40, height: recording ? 60 : 40 }}
          />
        </Pressable>
      </View>
    </View>
  )
}

export default AudioRecord

const borderContainer: StyleProp<TextStyle> = {
  borderWidth: 1,
  borderColor: '#DFDFF0',
  borderStyle: 'solid',
  borderRadius: 200,
}

const styles = StyleSheet.create({
  containerFocus: {
    ...borderContainer,
    borderColor: '#2D84C4',
    backgroundColor: '#F2FAFF',
  },
  containerUnfocus: {
    ...borderContainer,
    borderColor: '#DFDFDF',
  },
})

=== Badge.tsx ===
import * as React from 'react'
import { Image, ImageSourcePropType, Pressable } from 'react-native'
import tw from 'twrnc'
import { CustomText } from '../atomos/CustomText'
import Gap from '../atomos/Gap'

interface BadgeProps {
  label: string
  name: string
  backgroundColor: string
  stylesProp?: string
  icon?: ImageSourcePropType | undefined
  handleClick?: (name: string) => void
}

const Badge = ({
  label,
  name,
  icon,
  stylesProp,
  backgroundColor,
  handleClick,
}: BadgeProps) => {
  return (
    <Pressable
      onPress={() => handleClick?.(name)}
      key={name}
      style={tw`${backgroundColor} rounded-3xl py-1 pl-2 pr-3 flex flex-row items-center h-7 ${
        stylesProp || ''
      }`}
    >
      {icon && (
        <Gap px="2">
          <Image source={icon} style={{ width: 16, height: 16 }} />
        </Gap>
      )}
      <CustomText style="text-white text-xs">{label}</CustomText>
    </Pressable>
  )
}

export default Badge

=== BarraReacciones.tsx ===
import * as React from 'react'
import { View } from 'react-native'
import { useSelector } from 'react-redux'
import tw from 'twrnc'
import {
  agregarReacciones,
  eliminarReaccion,
} from '../../lib/services/reacciones.services'
import { Consejo } from '../../models/Consejo.model'
import { Publicacion } from '../../models/Publicaciones.model'
import {
  ReaccionesInterface,
  ReaccionTypes,
} from '../../models/Reacciones.model'
import { RootState } from '../../redux/store'
import Reaccion from '../atomos/Reaccion'

export interface ReaccionesProps {
  item?: Consejo | Publicacion
  type: 'Consejo' | 'Publicacion'
}

const initValues = {
  encanta: { usuarios: [], reaccion_usuario: false },
  like: { usuarios: [], reaccion_usuario: false },
  apoyo: { usuarios: [], reaccion_usuario: false },
  fuerza: { usuarios: [], reaccion_usuario: false },
  ciclista: { usuarios: [], reaccion_usuario: false },
}

const Reacciones = ({ item, type }: ReaccionesProps) => {
  const [pulsedReactions, setPulsedReactions] =
    React.useState<ReaccionesInterface>(initValues)
  const { authToken } = useSelector((state: RootState) => state.user)

  React.useEffect(() => {
    setPulsedReactions(item?.reacciones || {})
  }, [item])

  const handleClick = async (name: ReaccionTypes, alreadySelected: boolean) => {
    if (alreadySelected && authToken) {
      await eliminarReaccion(name, item?.token || '', authToken, type)
    } else if (authToken) {
      await agregarReacciones(name, item?.token || '', authToken, type)
    }
  }

  return (
    <View>
      <View style={tw`flex flex-row`}>
        <Reaccion
          image={require('../../../assets/like_reaccion_icon.png')}
          dimension={18}
          name="like"
          handleClick={handleClick}
          reaccionObject={pulsedReactions?.like}
          isSelected={pulsedReactions.like?.reaccion_usuario}
        />

        <Reaccion
          image={require('../../../assets/fuerza_reaccion_icon.png')}
          dimension={18}
          name="fuerza"
          handleClick={handleClick}
          reaccionObject={pulsedReactions?.fuerza}
          isSelected={pulsedReactions.fuerza?.reaccion_usuario}
        />

        <Reaccion
          image={require('../../../assets/encanta_reaccion_icon.png')}
          dimension={20}
          name="encanta"
          handleClick={handleClick}
          reaccionObject={pulsedReactions?.encanta}
          isSelected={pulsedReactions.encanta?.reaccion_usuario}
        />

        <Reaccion
          image={require('../../../assets/ciclista_reaccion_icon.png')}
          dimension={18}
          name="ciclista"
          handleClick={handleClick}
          reaccionObject={pulsedReactions?.ciclista}
          isSelected={pulsedReactions.ciclista?.reaccion_usuario}
        />

        <Reaccion
          image={require('../../../assets/apoyo_reaccion_icon.png')}
          dimension={18}
          name="apoyo"
          handleClick={handleClick}
          reaccionObject={pulsedReactions?.apoyo}
          isSelected={pulsedReactions.apoyo?.reaccion_usuario}
        />
      </View>
    </View>
  )
}

export default Reacciones

=== ContenidoConsejo.tsx ===
import * as React from 'react'
import { View, ImageSourcePropType, Image } from 'react-native'
import tw from 'twrnc'
import { CONSEJO_MAX_LENGTH, WIDTH_DIMENSIONS } from '../../utils/constants'
import TextoExpandible from '../atomos/TextoExpandible'

interface ContenidoConsejoProps {
  image?: ImageSourcePropType
  text?: string
}

const ContenidoConsejo = ({ image, text }: ContenidoConsejoProps) => {
  return (
    <View>
      <View style={tw`mx-auto`}>
        {image && (
          <Image
            source={image}
            style={{ width: WIDTH_DIMENSIONS * 0.9, height: 200 }}
          />
        )}
      </View>
      {text && (
        <View style={tw`px-[3%] py-2`}>
          <TextoExpandible text={text} maxLength={CONSEJO_MAX_LENGTH} />
        </View>
      )}
    </View>
  )
}

export default ContenidoConsejo

=== DetalleUsuario.tsx ===
import * as React from 'react'
import { Image, Text, View } from 'react-native'
import tw from 'twrnc'
import { TEXT_COLORS } from '../../utils/constants'

interface DetalleUsuarioProps {
  hasDate?: boolean
  fecha?: string
  nombre: string
  foto?: string
}

const DetalleUsuario = ({
  hasDate = true,
  nombre,
  fecha,
  foto,
}: DetalleUsuarioProps) => {
  return (
    <View style={tw`flex flex-row items-center`}>
      <View style={tw`mr-4`}>
        <Image
          source={foto ? { uri: foto } : require('../../../assets/user.png')}
          style={{ width: 40, height: 45, borderRadius: 400 / 2 }}
          resizeMode="contain"
        />
      </View>

      <View>
        <Text
          style={tw`text-base font-semibold capitalize ${TEXT_COLORS.DARK_BLUE}`}
        >
          {nombre}
        </Text>
        {hasDate && (
          <Text style={tw`text-xs capitalize ${TEXT_COLORS.DARK_GRAY}`}>
            {fecha}
          </Text>
        )}
      </View>
    </View>
  )
}

export default DetalleUsuario

=== DetalleUsuarioColaboracion.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Image, Pressable, Text, View } from 'react-native'
import DetalleUsuario from './DetalleUsuario'

interface DetalleUsuarioColaboracionProps {
  user: any
}

const DetalleUsuarioColaboracion = ({
  user,
}: DetalleUsuarioColaboracionProps) => {
  const [display, setDisplay] = React.useState(false)
  return (
    <View style={tw`pt-2 pr-4`}>
      <View style={tw`flex flex-row justify-between items-center`}>
        <DetalleUsuario
          nombre={`${user.first_name} ${user.last_name}`}
          hasDate={false}
          foto={user.foto}
        />
        {user.colaboraciones?.length > 0 ? (
          <Pressable onPress={() => setDisplay(!display)}>
            <Image
              source={require('../../../assets/chevron-abajo.png')}
              style={{
                width: 20,
                height: 20,
                ...(display
                  ? { transform: [{ rotateY: '190deg' }, { scaleY: -1 }] }
                  : {}),
              }}
            />
          </Pressable>
        ) : null}
      </View>
      {display && (
        <View style={tw`ml-16`}>
          {user.colaboraciones?.map((colaboracion: string, index: number) => (
            <View style={tw`flex flex-row items-center py-1`} key={index}>
              <Image
                source={require('../../../assets/check_filled_icon.png')}
                style={{ width: 15, height: 15, marginRight: 8 }}
              />
              <Text>{colaboracion}</Text>
            </View>
          ))}
        </View>
      )}
    </View>
  )
}

export default DetalleUsuarioColaboracion

=== FeedbackRuta.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Text, View } from 'react-native'
import { BACKGROUND_COLORS, TEXT_COLORS } from '../../utils/constants'
import RatingStars from '../atomos/RatingStars'
import Input from './Input'
import Spinner from '../atomos/Spinner'
import ButtonPrimary from '../atomos/ButtonPrimary'

interface FeedbackRutaProps {
  stars: number
  setStars: (value: number) => void
  comentario: string
  isReadOnly: boolean
  setComentario: (value: string) => void
  isLoading: boolean
  sendFeedback: () => void
}

const FeedbackRuta = ({
  stars,
  setStars,
  comentario,
  setComentario,
  isLoading,
  isReadOnly,
  sendFeedback,
}: FeedbackRutaProps) => {
  console.log(isReadOnly)
  return (
    <View style={tw`mt-4 flex flex-col items-center`}>
      <Text
        style={tw`${TEXT_COLORS.DARK_BLUE} text-xl text-center font-semibold`}
      >
        ¿Qué te pareció esta ruta?
      </Text>

      <RatingStars stars={stars} setStars={setStars} readonly={isReadOnly} />
      <Input
        multiline
        numberOfLines={4}
        textAlignVertical="top"
        textAlignHorizontal="center"
        type="none"
        value={comentario}
        setValue={(text) => setComentario(text)}
        stylesInput={'bg-white'}
        placeholder="¡Dejanos un comentario!"
        stylesProp="w-full"
        editable={!isReadOnly}
      />
      <View style={tw`my-2`}>
        {!isReadOnly ? (
          isLoading ? (
            <Spinner />
          ) : (
            <ButtonPrimary
              label="¡Enviar comentario!"
              style={`${BACKGROUND_COLORS.DARK_BLUE} py-2 px-12 rounded-3xl`}
              handleClick={sendFeedback}
            />
          )
        ) : null}
      </View>
    </View>
  )
}

export default FeedbackRuta

=== FieldFechaHora.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Text, View, Pressable, Image } from 'react-native'
import RoundedWhiteBaseTemplate from '../organismos/RoundedWhiteBaseTemplate'
import { TEXT_COLORS } from '../../utils/constants'
import DateTimePicker, {
  DateTimePickerEvent,
} from '@react-native-community/datetimepicker'

interface FieldFechaHoraProps {
  fecha?: Date
  setFecha: (fecha: Date) => void
  placeholder?: string
}

const FieldFechaHora = ({
  fecha,
  setFecha,
  placeholder,
}: FieldFechaHoraProps) => {
  const [show, setShow] = React.useState(false)
  const [date, setDate] = React.useState<Date>()
  const [mode, setMode] = React.useState<'date' | 'time'>('date')

  const onChange = (event: DateTimePickerEvent, selectedDate?: Date) => {
    if (event.type === 'set' && mode === 'date') {
      setDate(selectedDate)
      setMode('time')
    } else if (event.type === 'set' && mode === 'time') {
      setShow(false)
      if (date && selectedDate) {
        selectedDate.setDate(date.getDate())
        selectedDate.setMonth(date.getMonth())
        selectedDate.setFullYear(date.getFullYear())
        setFecha(selectedDate)
        setMode('date')
      }
    } else if (event.type !== 'set' || !selectedDate) {
      setShow(false)
      return
    }
  }

  const handlePress = () => {
    setShow(true)
  }

  return (
    <>
      {show && (
        <DateTimePicker
          testID="dateTimePicker"
          mode={mode}
          value={fecha ? new Date(fecha) : new Date(Date.now())}
          is24Hour={true}
          onChange={onChange}
        />
      )}
      <RoundedWhiteBaseTemplate shadow={false}>
        <Pressable onPress={handlePress}>
          <View style={tw`flex flex-row justify-between`}>
            {fecha ? (
              <Text>
                {fecha.toLocaleDateString()} {fecha.toLocaleTimeString()}
              </Text>
            ) : (
              <Text style={tw`${TEXT_COLORS.GRAY_PLACEHOLDER} text-sm`}>
                {placeholder || 'Establece una fecha para este evento...'}
              </Text>
            )}
            <Image
              source={require('../../../assets/calendar_blue_icon.png')}
              style={{ width: 20, height: 20 }}
            />
          </View>
        </Pressable>
      </RoundedWhiteBaseTemplate>
    </>
  )
}

export default FieldFechaHora

=== FieldFormulario.tsx ===
import * as React from 'react'
import { View, StyleSheet } from 'react-native'
import tw from 'twrnc'

interface FieldFormularioProps {
  children: React.ReactNode
}

const FieldFormulario = ({ children }: FieldFormularioProps) => {
  return (
    <View
      style={[tw`bg-white py-4 px-2 mx-[1px] mt-3`, styles.borderContainer]}
    >
      {children}
    </View>
  )
}

export default FieldFormulario

const styles = StyleSheet.create({
  borderContainer: {
    borderWidth: 1,
    borderColor: '#DFDFF0',
    borderStyle: 'solid',
    borderRadius: 10,
  },
})

=== GalleryButton.tsx ===
import { ErrorMessage, useFormikContext } from 'formik'
import * as React from 'react'
import {
  Text,
  View,
  ImageSourcePropType,
  Image,
  TouchableHighlight,
} from 'react-native'
import * as DocumentPicker from 'expo-document-picker'
import tw from 'twrnc'
import { DOCUMENT_RESULT_TYPES, TEXT_COLORS } from '../../utils/constants'
import { FieldError } from '../atomos/FieldError'

interface GalleryButtonProps {
  field: string
  icono?: ImageSourcePropType
  imagen?: ImageSourcePropType
}

const GalleryButton = ({ icono, field, imagen }: GalleryButtonProps) => {
  const { setFieldValue } = useFormikContext<any>()

  const getFile = async () => {
    const file = await DocumentPicker.getDocumentAsync()
    if (file.type !== DOCUMENT_RESULT_TYPES.CANCEL) {
      setFieldValue(field, file)
    }
  }

  return (
    <TouchableHighlight
      activeOpacity={0.6}
      underlayColor="#E7F5FF"
      onPress={getFile}
    >
      {imagen ? (
        <View style={tw`relative mx-auto`}>
          <Image
            source={imagen}
            style={{
              width: 300,
              height: 150,
              borderRadius: 10 / 2,
            }}
          />

          <View
            style={tw`absolute bg-black bg-opacity-30 rounded-t-xl left-2 bottom-0 py-2 w-9/12`}
          >
            <Text style={tw`text-white font-bold text-center`}>
              Cambiar imágen
            </Text>
          </View>
        </View>
      ) : (
        <View>
          <View style={tw`mx-auto py-2`}>
            {icono && (
              <Image source={icono} style={{ width: 100, height: 100 }} />
            )}
          </View>
          <Text style={tw`text-center ${TEXT_COLORS.DARK_GRAY}`}>
            Selecciona una imagen de tu galería
          </Text>
          {field && (
            <View style={tw`mx-auto`}>
              <ErrorMessage name={field} render={FieldError} />
            </View>
          )}
        </View>
      )}
    </TouchableHighlight>
  )
}

export default GalleryButton

=== HeaderRoundedContainer.tsx ===
import * as React from 'react'
import { View, StyleSheet } from 'react-native'
import tw from 'twrnc'
interface HeaderRoundedContainerProps {
  children: React.ReactNode | React.ReactNode[]
}

const HeaderRoundedContainer = ({ children }: HeaderRoundedContainerProps) => {
  return (
    <View
      style={[tw`bg-white rounded-b-3xl pt-4 pb-1`, styles.borderContainer]}
    >
      {children}
    </View>
  )
}

export default HeaderRoundedContainer

const styles = StyleSheet.create({
  borderContainer: {
    borderWidth: 1,
    borderColor: '#DFDFF0',
    borderStyle: 'solid',
  },
})

=== HeaderScreen.tsx ===
import * as React from 'react'
import { View, ImageSourcePropType, StyleSheet, Image } from 'react-native'
import tw from 'twrnc'
import { TEXT_COLORS } from '../../utils/constants'
import { CustomText } from '../atomos/CustomText'

interface HeaderScreenProps {
  title: string
  message?: string
  srcImage?: ImageSourcePropType
}

const HeaderScreen = ({ title, message, srcImage }: HeaderScreenProps) => {
  return (
    <View
      style={[tw`bg-white rounded-b-3xl mx-[1px] py-4`, styles.borderContainer]}
    >
      <View style={tw`flex flex-row justify-center items-center `}>
        {srcImage && (
          <View style={tw`pr-4`}>
            <Image source={srcImage} style={{ width: 50, height: 50 }} />
          </View>
        )}
        <CustomText style={`text-2xl font-extrabold ${TEXT_COLORS.DARK_BLUE}`}>
          {title}
        </CustomText>
      </View>
      <View style={tw`mt-2`}>
        <CustomText
          containerProps={{ textAlign: 'center' }}
          style={`text-center text-xs font-medium ${TEXT_COLORS.DARK_GRAY}`}
        >
          {message || ''}
        </CustomText>
      </View>
    </View>
  )
}

export default HeaderScreen

const styles = StyleSheet.create({
  borderContainer: {
    borderWidth: 1,
    borderColor: '#DFDFF0',
    borderStyle: 'solid',
  },
})

=== Hito.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Image, ImageSourcePropType, Text, View } from 'react-native'
import { TEXT_COLORS } from '../../utils/constants'

interface HitoProps {
  label: string
  image: ImageSourcePropType
}

const Hito = ({ label, image }: HitoProps) => {
  return (
    <View style={tw`flex flex-row items-center py-2`}>
      <Image
        source={image}
        style={{
          width: 20,
          height: 20,
          marginRight: 24,
        }}
      />
      <Text style={tw`${TEXT_COLORS.DARK_BLUE} text-base `}>{label}</Text>
    </View>
  )
}

export default Hito

=== ImageScaleColor.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { View, Image, ImageSourcePropType } from 'react-native'

interface ImageScaleColorProps {
  scale: 'gray' | 'red' | 'none'
  image: ImageSourcePropType
}

const ImageScaleColor = ({ scale, image }: ImageScaleColorProps) => {
  const getTintColor = () => {
    switch (scale) {
      case 'gray':
        return 'gray'
      case 'red':
        return '#FFD9D9'
      default:
        return '#fff'
    }
  }
  return (
    <View style={tw`relative`}>
      <Image
        source={image}
        style={{
          width: 100,
          height: 100,
          borderRadius: 20 / 2,
          ...(scale !== 'none' ? { tintColor: getTintColor() } : {}),
        }}
      />
      <Image
        source={image}
        style={{
          width: 100,
          height: 100,
          borderRadius: 20 / 2,
          opacity: 0.4,
          position: 'absolute',
          top: 0,
        }}
      />
    </View>
  )
}

export default ImageScaleColor

=== Input.tsx ===
import { ErrorMessage } from 'formik'
import * as React from 'react'
import {
  Text,
  View,
  StyleSheet,
  TextInput,
  StyleProp,
  TextStyle,
} from 'react-native'
import tw from 'twrnc'
import { TextInputType } from '../../models/TextInput.model'
import { TEXT_COLORS } from '../../utils/constants'
import { FieldError } from '../atomos/FieldError'

interface InputProps {
  text?: string
  name?: string
  type: TextInputType
  multiline?: boolean
  numberOfLines?: number
  placeholder?: string
  stylesProp?: string
  stylesInput?: string
  textAlignVertical?: 'auto' | 'top' | 'bottom' | 'center' | undefined
  textAlignHorizontal?: 'center' | 'left' | 'right' | undefined
  value?: string | number
  secureTextEntry?: boolean
  editable?: boolean
  setValue?: (value: string) => void
}

const Input = ({
  text,
  type,
  placeholder,
  stylesProp,
  name,
  multiline = false,
  numberOfLines = 1,
  textAlignVertical = 'center',
  textAlignHorizontal = 'left',
  stylesInput,
  value,
  secureTextEntry = false,
  editable = true,
  setValue,
}: InputProps) => {
  const [isFocus, setIsFocus] = React.useState(false)

  return (
    <View style={tw`${stylesProp || ''}`}>
      {text && (
        <Text style={tw`${TEXT_COLORS.DARK_BLUE} font-bold text-sm pl-2`}>
          {text}
        </Text>
      )}
      <View style={tw`mt-1`}>
        <TextInput
          style={[
            isFocus ? styles.containerFocus : styles.containerUnfocus,
            tw`${stylesInput || ''}`,
          ]}
          textAlignVertical={textAlignVertical}
          textAlign={textAlignHorizontal}
          textContentType={type}
          placeholder={placeholder}
          onFocus={() => setIsFocus(true)}
          onBlur={() => setIsFocus(!isFocus)}
          onChangeText={(value) => setValue?.(value)}
          multiline={multiline}
          numberOfLines={numberOfLines}
          value={value ? `${value}` : ''}
          secureTextEntry={secureTextEntry}
          editable={editable}
        />
      </View>
      {name && <ErrorMessage name={name} render={FieldError} />}
    </View>
  )
}

export default Input

const container: StyleProp<TextStyle> = {
  borderWidth: 1,
  borderStyle: 'solid',
  borderRadius: 10,
  paddingHorizontal: 10,
  paddingVertical: 10,
  fontSize: 16,
  marginTop: 2,
}
const styles = StyleSheet.create({
  containerFocus: {
    ...container,
    borderColor: '#2D84C4',
  },
  containerUnfocus: {
    ...container,
    borderColor: '#DFDFDF',
  },
})

=== MapViewSelectUbication.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { View } from 'react-native'
import MapView, { Marker } from 'react-native-maps'
import {
  uri_meta_icon,
  uri_rastreo_icon,
  WIDTH_DIMENSIONS,
} from '../../utils/constants'
// import MapViewDirections from 'react-native-maps-directions'
import { RutaCoordinadas } from '../../models/Rutas'

interface MapViewSelectUbicationProps {
  field?: string
  value: RutaCoordinadas
  select?: boolean
  height?: number
  width?: number
  setField?: (field: string, ubicacion: RutaCoordinadas) => void
}

const initialRegion = {
  latitude: -2.1453021140388437,
  latitudeDelta: 0.2568955895381215,
  longitude: -79.93498552590609,
  longitudeDelta: 0.13138934969902039,
}

const MapViewSelectUbication = ({
  value,
  setField,
  field,
  height = 500,
  width = WIDTH_DIMENSIONS * 0.9,
  select = false,
}: MapViewSelectUbicationProps) => {
  return (
    <View style={tw`mt-4`}>
      <MapView style={{ width, height }} initialRegion={initialRegion}>
        {/* <MapViewDirections
          origin={value?.coordinateX}
          destination={value?.coordinateY}
          apikey="AIzaSyDMi7l9iptdGvFXZ4FgkBlmFquHvzZxpmU"
          strokeWidth={4}
          strokeColor="#0C3248"
        /> */}
        <Marker
          draggable={select}
          coordinate={value?.coordinateX}
          onDragEnd={(e) =>
            setField?.(field || '', {
              ...value,
              coordinateX: e.nativeEvent.coordinate,
            })
          }
          image={{ uri: uri_rastreo_icon }}
        />
        <Marker
          draggable={select}
          coordinate={value?.coordinateY}
          onDragEnd={(e) =>
            setField?.(field || '', {
              ...value,
              coordinateY: e.nativeEvent.coordinate,
            })
          }
          image={{ uri: uri_meta_icon }}
        />
      </MapView>
    </View>
  )
}

export default MapViewSelectUbication

=== MenuConsejoDia.tsx ===
import * as React from 'react'
import { View, Pressable, Image } from 'react-native'
import { Consejo } from '../../models/Consejo.model'
import ConsejosOpcionesMenu from '../atomos/OpcionesMenu'
import AdminValidator from '../templates/AdminValidator'
import tw from 'twrnc'
import { useDispatch, useSelector } from 'react-redux'
import { RootState } from '../../redux/store'
import { NavigationProp, useNavigation } from '@react-navigation/native'
import { RootStackParamList, Screens } from '../../models/Screens.types'
import { setHasModified } from '../../redux/consejo'
import {
  despinnearConsejo,
  eliminarConsejo,
  pinnearConsejo,
} from '../../lib/services/consejos.services'

interface MenuConsejoDiaProps {
  consejo: Consejo
}

const MenuConsejoDia = ({ consejo }: MenuConsejoDiaProps) => {
  const [displayMenu, setDisplayMenu] = React.useState(false)
  const { authToken } = useSelector((state: RootState) => state.user)
  const { hasModified } = useSelector((state: RootState) => state.consejo)
  const dispatch = useDispatch()
  const navigation =
    useNavigation<NavigationProp<RootStackParamList, Screens>>()

  const changeScreen = () => {
    navigation.navigate('ConsejoFormulario', { consejo })
    setDisplayMenu(false)
  }

  const deleteConsejo = async () => {
    dispatch(setHasModified({ hasModified: !hasModified }))
    if (consejo.token && authToken) {
      await eliminarConsejo(authToken, consejo.token)
    }
    setDisplayMenu(false)
  }

  const handlePin = async () => {
    const { token } = consejo
    if (authToken && token) {
      if (consejo.fijado) {
        await despinnearConsejo(token, authToken)
      } else {
        await pinnearConsejo(token, authToken)
      }
    }
    dispatch(setHasModified({ hasModified: !hasModified }))
  }

  return (
    <AdminValidator>
      <Pressable onPress={() => setDisplayMenu(!displayMenu)}>
        <View style={tw`mt-2 w-6 -mr-2 z-40`}>
          <Image
            source={require('../../../assets/menu_icon.png')}
            style={{ height: 20, width: 12 }}
          />
        </View>
      </Pressable>
      {displayMenu && (
        <ConsejosOpcionesMenu
          handleEdit={changeScreen}
          handleDelete={deleteConsejo}
          handlePin={handlePin}
          pinLabel={consejo.fijado ? 'Desfijar' : 'Fijar'}
        />
      )}
    </AdminValidator>
  )
}

export default MenuConsejoDia

=== MenuPublicaciones.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { View, Image, Pressable } from 'react-native'
import { NavigationProp, useNavigation } from '@react-navigation/native'
import { RootStackParamList, Screens } from '../../models/Screens.types'
import { useDispatch, useSelector } from 'react-redux'
import { RootState } from '../../redux/store'
import { setPublicacionHasModified } from '../../redux/publicacion'
import { eliminarPublicacion } from '../../lib/services/publicaciones.services'
import { Publicacion } from '../../models/Publicaciones.model'
import ConfirmationModal from '../organismos/ConfirmationModal'
import OpcionesMenuPulicaciones from '../atomos/OpcionesMenuPublicaciones'

interface MenuPublicacionesProps {
  userToken: string
  publicacion: Publicacion
}

const MenuPublicaciones = ({ publicacion }: MenuPublicacionesProps) => {
  const [displayMenu, setDisplayMenu] = React.useState(false)
  const [canEdit, setCanEdit] = React.useState(false)
  const [showModal, setShowModal] = React.useState(false)
  const [confirmationDelete, setConfirmationDelete] = React.useState(false)
  const { authToken } = useSelector((state: RootState) => state.user)
  const { publicacionHasModified } = useSelector(
    (state: RootState) => state.publicacion
  )
  const dispatch = useDispatch()
  const navigation =
    useNavigation<NavigationProp<RootStackParamList, Screens>>()

  React.useEffect(() => {
    setCanEdit(publicacion.token_usuario === authToken)
  }, [publicacion])

  React.useEffect(() => {
    ;(async () => {
      if (confirmationDelete) {
        dispatch(
          setPublicacionHasModified({
            publicacionHasModified: !publicacionHasModified,
          })
        )
        if (publicacion.token && authToken) {
          await eliminarPublicacion(authToken, publicacion.token)
        }
        setDisplayMenu(false)
        navigation.navigate('Publicaciones')
      }
    })()
  }, [confirmationDelete])

  const handleEdit = () => {
    navigation.navigate('PublicacionFormulario', { data: publicacion }) //Enviar publicacion
    setDisplayMenu(false)
  }

  const handleDelete = async () => {
    setShowModal(true)
  }

  return (
    <>
      <ConfirmationModal
        setVisible={setShowModal}
        visible={showModal}
        title={'Eliminar Publicación'}
        body="¿Estás seguro que deseas eliminar esta publicación?"
        setConfirmation={setConfirmationDelete}
      />
      <View style={tw`z-40`}>
        <Pressable onPress={() => setDisplayMenu(!displayMenu)}>
          <Image
            source={require('../../../assets/menu_icon.png')}
            style={{ width: 20, height: 20 }}
          />
        </Pressable>
        {displayMenu && (
          <OpcionesMenuPulicaciones
            setDisplay={setDisplayMenu}
            canEdit={canEdit}
            handleEdit={handleEdit}
            handleDelete={handleDelete}
          />
        )}
      </View>
    </>
  )
}

export default MenuPublicaciones

=== MenuRutas.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Image, Pressable, View } from 'react-native'
import { Ruta } from '../../models/Rutas'
import AdminValidator from '../templates/AdminValidator'
import { useDispatch, useSelector } from 'react-redux'
import { RootState } from '../../redux/store'
import OpcionesMenuRutas from '../atomos/OpcionesMenuRutas'
import { NavigationProp, useNavigation } from '@react-navigation/native'
import { RootStackParamList, Screens } from '../../models/Screens.types'
import { setRutaHasModified } from '../../redux/ruta'
import {
  cancelarRutas,
  finalizarRutaAdmin,
} from '../../lib/services/rutas.services'
import RutaCancelarModal from '../organismos/RutaCancelarModal'
import { getEstadoRuta } from '../../utils/parseRouteState'

interface MenuRutasProps {
  ruta: Ruta
  onRefresh: () => void
}

const MenuRutas = ({ ruta, onRefresh }: MenuRutasProps) => {
  const [motivo, setMotivo] = React.useState('')
  const [displayMenu, setDisplayMenu] = React.useState(false)
  const [showModal, setShowModal] = React.useState(false)
  const { authToken } = useSelector((state: RootState) => state.user)
  const { rutaHasModified } = useSelector((state: RootState) => state.ruta)
  const estado = getEstadoRuta(ruta?.estado)
  const dispatch = useDispatch()
  const navigation =
    useNavigation<NavigationProp<RootStackParamList, Screens>>()

  const changeScreen = () => {
    navigation.navigate('RutasFormulario', { ruta })
    setDisplayMenu(false)
  }

  const cancelarRuta = async () => {
    dispatch(setRutaHasModified({ rutaHasModified: !rutaHasModified }))
    if (ruta.token && authToken) {
      await cancelarRutas(authToken, ruta.token, motivo)
    }
    setDisplayMenu(false)
  }

  const finalizarRuta = async () => {
    if (authToken && ruta.token) {
      await finalizarRutaAdmin(ruta.token, authToken)
    }
    setDisplayMenu(false)
    onRefresh()
  }

  return (
    <AdminValidator>
      {showModal ? (
        <RutaCancelarModal
          visible={showModal}
          setVisible={setShowModal}
          motivo={motivo}
          setMotivo={setMotivo}
          handleConfirmation={cancelarRuta}
        />
      ) : null}
      <Pressable onPress={() => setDisplayMenu(!displayMenu)}>
        <View style={tw`mt-2 w-6 -mr-2`}>
          <Image
            source={require('../../../assets/menu_icon.png')}
            style={{ height: 20, width: 12 }}
          />
        </View>
      </Pressable>
      {displayMenu && (
        <OpcionesMenuRutas
          handleEdit={changeScreen}
          handleCancelar={() => setShowModal(true)}
          handleFinalizar={finalizarRuta}
          showFinalizar={estado === 'En Curso'}
        />
      )}
    </AdminValidator>
  )
}

export default MenuRutas

=== NavigationBar.tsx ===
import React from 'react'
import { Image, Text, View } from 'react-native'
import { useSelector } from 'react-redux'
import tw from 'twrnc'
import { RootState } from '../../redux/store'
import { TEXT_COLORS } from '../../utils/constants'
import { ButtonTab } from '../atomos/ButtonTab'

const NavigationBar = () => {
  const { user } = useSelector((state: RootState) => state.user)
  return (
    <View
      style={[
        tw`w-full border-solid border-gray-200 bg-white`,
        { borderWidth: 1 },
      ]}
    >
      <View style={tw`flex flex-row justify-between p-[2%]`}>
        <ButtonTab screen="Inicio">
          <Image
            source={require('../../../assets/home_active_icon.png')}
            style={{ width: 25, height: 25 }}
          />
          <Text style={tw`${TEXT_COLORS.DARK_BLUE} text-xs font-bold`}>
            Inicio
          </Text>
        </ButtonTab>

        <ButtonTab screen="Publicaciones">
          <Image
            source={require('../../../assets/publicaciones_icon.png')}
            style={{ width: 28, height: 28 }}
          />
          <Text style={tw`${TEXT_COLORS.DARK_BLUE} text-xs font-bold`}>
            Publicaciones
          </Text>
        </ButtonTab>

        <ButtonTab screen="Rutas">
          <Image
            source={require('../../../assets/ubicacion_icon.png')}
            style={{ width: 30, height: 25 }}
          />
          <Text style={tw`${TEXT_COLORS.DARK_BLUE} text-xs font-bold`}>
            Rutas
          </Text>
        </ButtonTab>

        <ButtonTab screen="Perfil" param={{ userToken: user?.id_usuario }}>
          <Image
            source={require('../../../assets/ciclista_icon.png')}
            style={{ width: 25, height: 25 }}
          />

          <Text style={tw`${TEXT_COLORS.DARK_BLUE} text-xs font-bold`}>
            Perfil
          </Text>
        </ButtonTab>
      </View>
    </View>
  )
}

export default NavigationBar

=== NoteVoice.tsx ===
import { Audio, AVPlaybackStatus } from 'expo-av'
import * as React from 'react'
import tw from 'twrnc'
import { View, Pressable, Image } from 'react-native'
import * as Progress from 'react-native-progress'

interface NoteVoiceProps {
  record?: Audio.Recording
  uriRecord?: string
  width: number
}

const NoteVoice = ({ record, uriRecord, width }: NoteVoiceProps) => {
  const [sound, setSound] = React.useState<Audio.Sound>()
  const [isPlaying, setIsPlaying] = React.useState(false)
  const [progress, setProgress] = React.useState(0)

  const handlePlay = async () => {
    const uri = record ? record.getURI() : uriRecord
    const { sound } = await Audio.Sound.createAsync(
      { uri: uri as string },
      { shouldPlay: true },
      (status: AVPlaybackStatus) => {
        if (status.isLoaded) {
          setProgress(
            (status.positionMillis || 0) / (status.durationMillis || 1)
          )
          if (status.didJustFinish) {
            setProgress(1)
            setIsPlaying(false)
          }
        }
      }
    )
    setSound(sound)
    await sound.playAsync()
    setIsPlaying(true)
  }
  const handlePause = async () => {
    await sound?.pauseAsync()

    setIsPlaying(false)
  }

  const controlButton = isPlaying
    ? require('../../../assets/pausa_record_icon.png')
    : require('../../../assets/play_record_icon.png')
  return (
    <View style={tw`relative my-4`}>
      <Pressable
        onPress={isPlaying ? handlePause : handlePlay}
        style={tw`absolute -top-3 z-40`}
      >
        <Image
          source={controlButton}
          style={{
            width: 30,
            height: 30,
            backgroundColor: '#fff',
            borderRadius: 100 / 2,
          }}
        />
      </Pressable>
      <Progress.Bar
        progress={progress}
        width={width}
        color={'#F16F31'}
        unfilledColor={'#e6e6e6'}
        borderColor="#fff"
      />
    </View>
  )
}

export default NoteVoice

=== OpcionPerfil.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Text, Pressable, Image, ImageSourcePropType } from 'react-native'
import { TEXT_COLORS } from '../../utils/constants'

interface OpcionPerfilProps {
  icon: ImageSourcePropType
  transform?: boolean
  text: string
  handlePress: () => void
}

const OpcionPerfil = ({
  icon,
  text,
  handlePress,
  transform = false,
}: OpcionPerfilProps) => {
  return (
    <Pressable
      style={tw`my-1 py-2 flex flex-row justify-between`}
      onPress={handlePress}
    >
      <Text style={tw`${TEXT_COLORS.PRIMARY_BLUE} text-lg`}>{text}</Text>

      <Image
        source={icon}
        style={{
          width: 20,
          height: 20,
          ...(transform ? { transform: [{ rotate: '270deg' }] } : {}),
          marginRight: 10,
        }}
      />
    </Pressable>
  )
}

export default OpcionPerfil

=== ParticipantesFotoMiniatura.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { View, Image } from 'react-native'
import ViewMoreRounded from '../atomos/ViewMoreRounded'
import { User } from '../../models/User'

interface ParticipantesFotoMiniaturaProps {
  dimensionImages?: number
  ciclistas?: Partial<User>[]
}

const ParticipantesFotoMiniatura = ({
  dimensionImages = 40,
  ciclistas,
}: ParticipantesFotoMiniaturaProps) => {
  const [usersDisplay, setUsersDisplay] = React.useState<Partial<User>[]>([])

  React.useEffect(() => {
    if (ciclistas && ciclistas.length > 10) {
      setUsersDisplay(ciclistas.splice(0, 10))
    } else {
      setUsersDisplay(ciclistas || [])
    }
  }, [])

  return (
    <View style={tw`flex flex-row`}>
      {usersDisplay?.map((ciclista, index) => {
        const foto = ciclista.foto
          ? { uri: ciclista.foto }
          : require('../../../assets/user.png')
        return (
          <Image
            key={index}
            source={foto}
            style={{
              width: dimensionImages,
              height: dimensionImages,
              borderRadius: 100 / 2,
              marginLeft: -10,
            }}
            resizeMode="contain"
          />
        )
      })}

      {ciclistas && ciclistas?.length > 10 ? (
        <ViewMoreRounded label="+10" dimension={dimensionImages} />
      ) : null}
    </View>
  )
}

export default ParticipantesFotoMiniatura

=== PreviewPdf.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { View, Image } from 'react-native'

const PreviewPdf = () => {
  return (
    <View>
      <Image
        source={require('../../../assets/pdf_icon.png')}
        style={{ width: 86, height: 86, marginBottom: 1 }}
      />
      <View style={tw`w-20 pl-4`}></View>
    </View>
  )
}

export default PreviewPdf

=== RoundedBadge.tsx ===
import * as React from 'react'
import { Text, View } from 'react-native'
import tw from 'twrnc'
import { BORDER_COLORS, TEXT_COLORS } from '../../utils/constants'
interface RoundedBadgeProps {
  label: string
  styles?: string
}

const RoundedBadge = ({ label, styles = '' }: RoundedBadgeProps) => {
  return (
    <View
      style={tw`rounded-3xl py-1 pl-2 pr-3 flex flex-row items-center h-7 border-2 border-solid ${BORDER_COLORS.DARK_BLUE} ${styles}`}
    >
      <Text style={tw`${TEXT_COLORS.DARK_BLUE} text-xs font-semibold`}>
        {label}
      </Text>
    </View>
  )
}

export default RoundedBadge

=== RoundedGallery.tsx ===
import { ErrorMessage } from 'formik'
import * as React from 'react'
import {
  View,
  ImageSourcePropType,
  Image,
  TouchableHighlight,
} from 'react-native'
import * as DocumentPicker from 'expo-document-picker'
import tw from 'twrnc'
import { FOLDERS_STORAGE } from '../../utils/constants'
import { FieldError } from '../atomos/FieldError'
import { guardarArchivo } from '../../lib/googleCloudStorage'
import Spinner from '../atomos/Spinner'

interface RoundedGalleryProps {
  field: string
  icono?: ImageSourcePropType
  foto?: string
  handleChange: (path: string) => void
}

const RoundedGallery = ({
  icono,
  field,
  foto,
  handleChange,
}: RoundedGalleryProps) => {
  const [isLoading, setIsLoading] = React.useState(false)

  const getFile = async () => {
    setIsLoading(true)
    const file = await DocumentPicker.getDocumentAsync()
    if (file.type !== 'cancel') {
      const path = await guardarArchivo(
        FOLDERS_STORAGE.USUARIOS,
        file.name,
        file.uri
      )
      handleChange(path)
    }
    setIsLoading(false)
  }

  return (
    <TouchableHighlight
      activeOpacity={0.6}
      underlayColor="#E7F5FF"
      onPress={getFile}
      style={tw`w-40 h-40 rounded-full mx-auto ${
        isLoading ? 'bg-black bg-opacity-20' : ''
      }`}
    >
      <View style={tw`relative`}>
        {foto ? (
          <View style={tw`relative mx-auto`}>
            <Image
              source={{ uri: foto || '' }}
              style={{
                width: 150,
                height: 150,
                borderRadius: 150 / 2,
              }}
            />
          </View>
        ) : (
          <View>
            <View style={tw`mx-auto py-2`}>
              {icono && (
                <Image
                  source={require('../../../assets/user.png')}
                  style={{ width: 150, height: 150, borderRadius: 150 / 2 }}
                />
              )}
            </View>
            {field && (
              <View style={tw`mx-auto`}>
                <ErrorMessage name={field} render={FieldError} />
              </View>
            )}
          </View>
        )}
        {isLoading ? (
          <View style={tw`absolute top-20 left-20`}>
            <Spinner />
          </View>
        ) : null}
      </View>
    </TouchableHighlight>
  )
}

export default RoundedGallery

=== RoundedGalleryButton.tsx ===
import * as React from 'react'
import { View, Image, TouchableHighlight } from 'react-native'
import * as DocumentPicker from 'expo-document-picker'
import tw from 'twrnc'
import { BACKGROUND_COLORS, DOCUMENT_RESULT_TYPES } from '../../utils/constants'

interface RoundedGalleryButtonProps {
  handleImage: (file: DocumentPicker.DocumentResult) => void
}

const RoundedGalleryButton = ({ handleImage }: RoundedGalleryButtonProps) => {
  const getFile = async () => {
    const file = await DocumentPicker.getDocumentAsync({ type: ['image/*'] })
    if (file?.type !== DOCUMENT_RESULT_TYPES?.CANCEL) {
      handleImage(file)
    }
  }

  return (
    <TouchableHighlight
      activeOpacity={0.6}
      underlayColor="#E7F5FF"
      onPress={getFile}
      style={{ borderRadius: 100 / 2 }}
    >
      <View
        style={tw`h-14 w-14 rounded-full flex items-center justify-center ${BACKGROUND_COLORS.PRIMARY_BLUE}`}
      >
        <Image
          source={require('../../../assets/add-photo.png')}
          style={{ width: 30, height: 30 }}
        />
      </View>
    </TouchableHighlight>
  )
}

export default RoundedGalleryButton

=== RutaRecorrida.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import {
  Image,
  ImageSourcePropType,
  Text,
  TouchableHighlight,
  View,
} from 'react-native'
import { NavigationProp, useNavigation } from '@react-navigation/native'
import { RootStackParamList, Screens } from '../../models/Screens.types'

interface RutaRecorridaProps {
  style?: string
  icon: ImageSourcePropType
  token: string
  nombre: string
  userToken: string
}

const RutaRecorrida = ({
  icon,
  style = '',
  token,
  userToken,
  nombre,
}: RutaRecorridaProps) => {
  const navigation =
    useNavigation<NavigationProp<RootStackParamList, Screens>>()
  return (
    <TouchableHighlight
      style={tw`relative ${style}`}
      onPress={() =>
        navigation.navigate('FinalRuta', {
          tokenRuta: token,
          tokenUsuario: userToken,
        })
      }
    >
      <>
        <Image
          source={icon}
          style={{ width: '100%', height: '100%' }}
          resizeMode="cover"
        />
        <View
          style={tw`absolute bottom-0 bg-black w-full bg-opacity-50 py-1 pl-2`}
        >
          <Text style={tw`text-white font-bold text-xs`} numberOfLines={1}>
            {nombre}
          </Text>
        </View>
      </>
    </TouchableHighlight>
  )
}

export default RutaRecorrida

=== SearchBar.tsx ===
import * as React from 'react'
import { View, Image, Pressable } from 'react-native'
import tw from 'twrnc'
import Input from './Input'
interface SearchBarProps {
  text: string
  setText: (text: string) => void
}

const SearchBar = ({ text, setText }: SearchBarProps) => {
  return (
    <View style={tw`pt-2`}>
      <View style={tw`relative`}>
        <Input
          type="none"
          placeholder="Buscar..."
          stylesInput="bg-white"
          value={text}
          setValue={setText}
        />
        <Pressable style={tw`absolute top-5 right-4`}>
          <View>
            <Image
              source={require('../../../assets/search_icon.png')}
              style={{ width: 20, height: 20 }}
            />
          </View>
        </Pressable>
      </View>
    </View>
  )
}

export default SearchBar

=== SectionTitle.tsx ===
import * as React from 'react'
import { ImageSourcePropType, View } from 'react-native'
import tw from 'twrnc'
import { BACKGROUND_COLORS, TEXT_COLORS } from '../../utils/constants'
import AdminValidator from '../templates/AdminValidator'
import RoundedButtonIcon from '../atomos/RoundedButtonIcon'
import { CustomText } from '../atomos/CustomText'

interface SectionTitleProps {
  text: string
  isRestricted?: boolean
  styleText?: string
  background?: boolean
  hasUpdates?: boolean
  hasButton?: boolean
  buttonIcon?: ImageSourcePropType
  iconDimension?: number
  handleClickButton?: () => void
}

const SectionTitle = ({
  text,
  hasUpdates,
  hasButton,
  buttonIcon,
  styleText = '',
  background = true,
  iconDimension = 18,
  isRestricted = true,
  handleClickButton,
}: SectionTitleProps) => {
  return (
    <View
      style={tw`relative pt-4 ${
        background ? BACKGROUND_COLORS.BLUE_LIGHTER : ''
      }`}
    >
      <View style={tw`flex flex-row w-11/12`}>
        {background && <View style={tw`h-full w-[2px] bg-blue-500 mr-2`} />}
        <CustomText
          style={`text-2xl font-bold ${TEXT_COLORS.DARK_BLUE} ${styleText}`}
        >
          {text}
        </CustomText>
        {hasUpdates && (
          <View
            style={tw`ml-2 mt-[2%] rounded-full h-2 w-2 ${BACKGROUND_COLORS.ORANGE}`}
          />
        )}
      </View>
      {hasButton && buttonIcon && (
        <>
          {isRestricted ? (
            <AdminValidator stylesProp="absolute top-2 right-2 z-40">
              <RoundedButtonIcon
                handleClick={() => handleClickButton?.()}
                src={buttonIcon}
                dimension={iconDimension}
              />
            </AdminValidator>
          ) : (
            <View style={tw`absolute top-2 right-2 z-40`}>
              <RoundedButtonIcon
                handleClick={() => handleClickButton?.()}
                src={buttonIcon}
                dimension={iconDimension}
              />
            </View>
          )}
        </>
      )}
    </View>
  )
}

export default SectionTitle

=== SelectCreatableBatches.tsx ===
import { ErrorMessage } from 'formik'
import * as React from 'react'
import { View } from 'react-native'
import tw from 'twrnc'
import { Etiqueta } from '../../models/Etiqueta.model'
import { BACKGROUND_COLORS } from '../../utils/constants'
import CancelButton from '../atomos/CancelButton'
import { FieldError } from '../atomos/FieldError'
import Gap from '../atomos/Gap'
import SelectInput from '../atomos/SelectInput'
import Badge from './Badge'

interface SelectCreatableBatchesProps {
  values: Etiqueta[]
  selectedValues: string[]
  placeholder: string
  deleteValue: (value: string) => void
  setValuesSelected: (value: string) => void
  field: string
}

const SelectCreatableBatches = ({
  field,
  values,
  selectedValues,
  placeholder,
  setValuesSelected,
  deleteValue,
}: SelectCreatableBatchesProps) => {
  const renderBadge = (value: string) => {
    const badge = values.find((etiqueta) => etiqueta.value === value)
    const { value: valor, nombre } = badge || {}
    if (!valor) return null
    return (
      <Gap px="1" py="1" key={valor}>
        <View style={tw`relative`}>
          <Badge
            name={valor || ''}
            label={nombre || ''}
            backgroundColor={BACKGROUND_COLORS.ORANGE}
          />
          <CancelButton handleClick={deleteValue} value={valor || ''} />
        </View>
      </Gap>
    )
  }
  return (
    <>
      <View style={tw`flex flex-row flex-wrap my-2`}>
        {selectedValues.map((value) => renderBadge(value))}
      </View>
      <View
        style={{
          borderWidth: 1,
          borderColor: '#e6e6e6',
          borderStyle: 'solid',
          borderRadius: 10,
        }}
      >
        <SelectInput
          values={values}
          setValuesSelected={setValuesSelected}
          placeholder={placeholder}
        />
      </View>
      <ErrorMessage name={field} render={FieldError} />
    </>
  )
}

export default SelectCreatableBatches

=== SelectCreatableList.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { View } from 'react-native'
import SelectInput from '../atomos/SelectInput'
import { ErrorMessage } from 'formik'
import { FieldError } from '../atomos/FieldError'
import CancelButton from '../atomos/CancelButton'
import ItemCheckList from '../atomos/ItemCheckList'

interface SelectCreatableListProps {
  field: string
  placeholder: string
  values: { value: string; nombre: string }[]
  selectedValues?: string[]
  deleteValue: (value: string) => void
  setValuesSelected: (value: string) => void
}

const SelectCreatableList = ({
  field,
  values,
  selectedValues,
  setValuesSelected,
  deleteValue,
  placeholder,
}: SelectCreatableListProps) => {
  const renderItem = (value: string) => {
    const item = values.find((requisito) => requisito.value === value)
    const { value: valor, nombre } = item || {}
    if (!valor) return null
    return (
      <View key={valor}>
        <ItemCheckList text={nombre || ''} />
        <CancelButton handleClick={deleteValue} value={valor || ''} />
      </View>
    )
  }
  return (
    <View>
      <View
        style={{
          borderWidth: 1,
          borderColor: '#e6e6e6',
          borderStyle: 'solid',
          borderRadius: 10,
        }}
      >
        <SelectInput
          values={values}
          setValuesSelected={setValuesSelected}
          placeholder={placeholder}
        />
      </View>
      <ErrorMessage name={field} render={FieldError} />
      <View style={tw`mt-2 mx-3`}>
        {selectedValues?.map((value) => renderItem(value))}
      </View>
    </View>
  )
}

export default SelectCreatableList

=== SmallFieldFecha.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Text, View, Pressable, Image } from 'react-native'
import DateTimePicker, {
  DateTimePickerEvent,
} from '@react-native-community/datetimepicker'

interface SmallFieldFechaProps {
  fecha?: Date
  setFecha: (fecha: Date) => void
}

const SmallFieldFecha = ({ fecha, setFecha }: SmallFieldFechaProps) => {
  const [show, setShow] = React.useState(false)
  const [date, setDate] = React.useState<Date>()
  const [mode, setMode] = React.useState<'date' | 'time'>('date')

  const onChange = (event: DateTimePickerEvent, selectedDate?: Date) => {
    if (event.type === 'set' && mode === 'date') {
      setDate(selectedDate)
      setMode('time')
    } else if (event.type === 'set' && mode === 'time') {
      setShow(false)
      if (date && selectedDate) {
        selectedDate.setDate(date.getDate())
        selectedDate.setMonth(date.getMonth())
        selectedDate.setFullYear(date.getFullYear())
        setFecha(selectedDate)
        setMode('date')
      }
    } else if (event.type !== 'set' || !selectedDate) {
      setShow(false)
      return
    }
  }

  const handlePress = () => {
    setShow(true)
  }

  return (
    <>
      {show && (
        <DateTimePicker
          testID="dateTimePicker"
          mode={mode}
          value={fecha ? new Date(fecha) : new Date(Date.now())}
          is24Hour={true}
          onChange={onChange}
        />
      )}

      <Pressable onPress={handlePress}>
        <View style={tw`flex flex-row justify-between`}>
          {fecha ? (
            <Text>
              {fecha.toLocaleDateString()} {fecha.toLocaleTimeString()}
            </Text>
          ) : (
            <Image
              source={require('../../../assets/calendar_blue_icon.png')}
              style={{ width: 20, height: 20 }}
            />
          )}
        </View>
      </Pressable>
    </>
  )
}

export default SmallFieldFecha

=== TitleWithDivider.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { View } from 'react-native'
import { BACKGROUND_COLORS, TEXT_COLORS } from '../../utils/constants'
import { CustomText } from '../atomos/CustomText'

interface TitleWithDividerProps {
  label: string
}

const TitleWithDivider = ({ label }: TitleWithDividerProps) => {
  return (
    <View style={tw`flex flex-row items-center overflow-hidden`}>
      <CustomText style={`${TEXT_COLORS.DARK_BLUE} text-lg`}>
        {label}
      </CustomText>
      <View style={tw`${BACKGROUND_COLORS.GRAY} ml-2 h-[1px] w-full`} />
    </View>
  )
}

export default TitleWithDivider

=== TitleWithIcon.tsx ===
import * as React from 'react'
import { View } from 'react-native'
import SectionTitle from './SectionTitle'
import tw from 'twrnc'
import RoundedButtonIcon from '../atomos/RoundedButtonIcon'

interface TitleWithIconProps {
  text: string
  handleClick: () => void
}

const TitleWithIcon = ({ text, handleClick }: TitleWithIconProps) => {
  return (
    <View style={tw`relative`}>
      <SectionTitle text={text} hasUpdates />
      <View style={tw`absolute -top-[24%] right-[4%]`}>
        <RoundedButtonIcon
          handleClick={handleClick}
          src={require('../../../assets/edit.png')}
        />
      </View>
    </View>
  )
}

export default TitleWithIcon

=== TransparentBadge.tsx ===
import * as React from 'react'
import { Text, View } from 'react-native'
import tw from 'twrnc'
interface TransparentBadgeProps {
  label: string
  styles?: string
}

const TransparentBadge = ({ label, styles = '' }: TransparentBadgeProps) => {
  return (
    <View
      style={tw`rounded-3xl py-1 pl-2 pr-3 flex flex-row items-center h-7 border-2 border-solid border-gray-100 border-opacity-20 bg-opacity-20 bg-black ${styles}`}
    >
      <Text style={tw`text-gray-100 opacity-80 text-xs font-semibold`}>
        {label}
      </Text>
    </View>
  )
}

export default TransparentBadge

=== UserInformation.tsx ===
import * as React from 'react'
import { View, Image } from 'react-native'
import { useSelector } from 'react-redux'
import tw from 'twrnc'
import { RootState } from '../../redux/store'
import { TEXT_COLORS } from '../../utils/constants'
import { CustomText } from '../atomos/CustomText'

const UserInformation = () => {
  const { user } = useSelector((state: RootState) => state.user)
  return (
    <View style={tw`flex flex-row`}>
      <View style={tw`mr-4`}>
        <Image
          source={
            user?.foto
              ? { uri: user?.foto }
              : require('../../../assets/user.png')
          }
          style={{ width: 40, height: 45, borderRadius: 400 / 2 }}
          resizeMode="contain"
        />
      </View>
      <View>
        <CustomText
          style={`font-bold text-white text-lg capitalize`}
        >{`${user?.first_name} ${user?.last_name}`}</CustomText>

        <CustomText style={`font-bold ${TEXT_COLORS.ORANGE} text-sm`}>
          {user?.admin ? 'Administrador' : 'Ciclista'}
        </CustomText>
      </View>
    </View>
  )
}

export default UserInformation

=== WithoutResults.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { View, Image } from 'react-native'
import { TEXT_COLORS } from '../../utils/constants'
import { CustomText } from '../atomos/CustomText'

interface WithoutResultsProps {
  styles: string
  dimension?: number
}

const WithoutResults = ({ styles, dimension = 250 }: WithoutResultsProps) => {
  return (
    <View style={tw`flex flex-col items-center justify-center ${styles}`}>
      <Image
        source={require('../../../assets/explorer.png')}
        style={{ width: dimension, height: dimension, opacity: 0.5 }}
      />
      <View style={tw`w-8/12 mt-4`}>
        <CustomText
          style={`${TEXT_COLORS.GRAY_PLACEHOLDER}`}
          containerProps={{ textAlign: 'center' }}
        >
          ¡Vaya! parece que no encontramos nada aquí
        </CustomText>
      </View>
    </View>
  )
}

export default WithoutResults

=== BarraFiltros.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { ScrollView } from 'react-native-gesture-handler'
import { useDispatch, useSelector } from 'react-redux'
import { Filtro } from '../../models/Publicaciones.model'
import { setDate, setEtiquetas } from '../../redux/publicacionBusqueda'
import { RootState } from '../../redux/store'
import { BACKGROUND_COLORS } from '../../utils/constants'
import CancelButton from '../atomos/CancelButton'
import FiltroFecha from '../atomos/FiltroFecha'
import Gap from '../atomos/Gap'
import Badge from '../moleculas/Badge'

interface BarraFiltrosProps {
  filtros: Filtro[]
  icons?: boolean
}

const BarraFiltros = ({ filtros, icons = true }: BarraFiltrosProps) => {
  const { buildFiltros } = useSelector((state: RootState) => state.busqueda)
  const dispatch = useDispatch()

  const isSelected = (value: string) => {
    return buildFiltros.etiquetas?.includes(value)
  }

  const getBackgroundColor = (value: string) => {
    return isSelected(value)
      ? BACKGROUND_COLORS.SKY_BLUE
      : BACKGROUND_COLORS.ORANGE
  }

  const hanleDateSelection = (date: Date | undefined) => {
    dispatch(setDate({ fecha: date?.getTime() }))
  }

  const handleEtiquetasSelections = (name: string) => {
    dispatch(setEtiquetas({ name }))
  }

  return (
    <ScrollView
      horizontal
      style={tw`my-2 py-4 mx-4 flex flex-row overflow-hidden`}
    >
      <Gap px="1">
        <FiltroFecha
          setDate={hanleDateSelection}
          date={buildFiltros.fecha as number}
        />
      </Gap>

      {filtros.map((filtro) => {
        const { icon, value, nombre } = filtro
        const backgoundColor = getBackgroundColor(value)
        return (
          <Gap key={filtro.value} px="1">
            <Badge
              label={nombre}
              name={value}
              icon={icons ? icon : undefined}
              backgroundColor={backgoundColor}
              handleClick={handleEtiquetasSelections}
            />
            {isSelected(value) && <CancelButton />}
          </Gap>
        )
      })}
    </ScrollView>
  )
}

export default BarraFiltros

=== BarraFiltrosRutas.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { ScrollView, Text } from 'react-native'
import Gap from '../atomos/Gap'
import FiltroFecha from '../atomos/FiltroFecha'
import AdminValidator from '../templates/AdminValidator'
import Badge from '../moleculas/Badge'
import { BACKGROUND_COLORS } from '../../utils/constants'
import CancelButton from '../atomos/CancelButton'
import { useDispatch, useSelector } from 'react-redux'
import { RootState } from '../../redux/store'
import { setDate, setEtiquetas } from '../../redux/rutasBusqueda'
import { setRutasFeed } from '../../redux/ruta'

const BarraFiltrosRutas = () => {
  const dispatch = useDispatch()
  const { rutasPropuestas, allRutas, rutasFeed } = useSelector(
    (state: RootState) => state.ruta
  )

  const { buildFiltros } = useSelector(
    (state: RootState) => state.busquedaRutas
  )

  const isSelected = (value: string) => {
    return buildFiltros.etiqueta === value
  }

  const getBackgroundColor = (value: string) => {
    return isSelected(value)
      ? BACKGROUND_COLORS.SKY_BLUE
      : BACKGROUND_COLORS.ORANGE
  }

  const handleRutasPropuestas = () => {
    if (!isSelected('propuestas')) {
      dispatch(setRutasFeed({ rutasFeed: rutasPropuestas }))
    } else {
      dispatch(setRutasFeed({ rutasFeed: allRutas }))
    }
    dispatch(setEtiquetas({ name: 'propuestas' }))
  }

  const handleRutasInscritas = () => {
    if (!isSelected('inscritas')) {
      dispatch(
        setRutasFeed({ rutasFeed: allRutas?.filter((ruta) => ruta.inscrito) })
      )
    } else {
      dispatch(setRutasFeed({ rutasFeed: allRutas }))
    }
    dispatch(setEtiquetas({ name: 'inscritas' }))
  }

  const handleRutasDisponibles = () => {
    if (!isSelected('disponibles')) {
      dispatch(
        setRutasFeed({
          rutasFeed: allRutas?.filter(
            (ruta) => ruta.estado?.estado_no_iniciada
          ),
        })
      )
    } else {
      dispatch(setRutasFeed({ rutasFeed: allRutas }))
    }
    dispatch(setEtiquetas({ name: 'disponibles' }))
  }

  const handleRutasFinalizadas = () => {
    if (!isSelected('finalizadas')) {
      dispatch(
        setRutasFeed({
          rutasFeed: allRutas?.filter((ruta) => ruta.estado?.estado_finalizado),
        })
      )
    } else {
      dispatch(setRutasFeed({ rutasFeed: allRutas }))
    }
    dispatch(setEtiquetas({ name: 'finalizadas' }))
  }

  const handleRutaSinCupo = () => {
    if (!isSelected('sin_cupo')) {
      dispatch(
        setRutasFeed({
          rutasFeed: allRutas?.filter((ruta) => ruta.estado?.estado_sin_cupos),
        })
      )
    } else {
      dispatch(setRutasFeed({ rutasFeed: allRutas }))
    }
    dispatch(setEtiquetas({ name: 'sin_cupo' }))
  }

  const hanleDateSelection = (date: Date | undefined) => {
    if (!date) {
      dispatch(setDate({ fecha: undefined }))
      dispatch(setRutasFeed({ rutasFeed: allRutas }))
      return
    }
    dispatch(setDate({ fecha: date?.getTime() }))
    const fecha = new Date(date)
    fecha.setHours(0, 0, 0, 0)
    const filteredRutas = rutasFeed?.filter((ruta) => {
      const [fechac] = (ruta.fecha_inicio as any)?.split('T')
      const fechaCreacion = new Date(fechac)
      fechaCreacion.setUTCHours(5)
      return fecha.getTime() === fechaCreacion.getTime()
    })
    dispatch(setRutasFeed({ rutasFeed: filteredRutas }))
  }

  return (
    <ScrollView
      horizontal
      style={tw`my-2 py-4 mx-4 flex flex-row overflow-hidden`}
    >
      <Gap px="1" py="1">
        <FiltroFecha setDate={hanleDateSelection} date={buildFiltros.fecha} />
      </Gap>
      <AdminValidator>
        <Gap px="1" py="1" styles="relative">
          <Badge
            label={'Propuestas'}
            name={'propuestas'}
            backgroundColor={getBackgroundColor('propuestas')}
            handleClick={handleRutasPropuestas}
          />
          {rutasPropuestas?.length ? (
            <Text
              style={tw`absolute top-0 right-0 bg-red-800 rounded-full text-white font-bold px-1 text-xs`}
            >
              {rutasPropuestas?.length}
            </Text>
          ) : null}
        </Gap>
      </AdminValidator>
      <Gap px="1" py="1">
        <Badge
          label={'Inscritas'}
          name={'inscritas'}
          backgroundColor={getBackgroundColor('inscritas')}
          handleClick={handleRutasInscritas}
        />
        {isSelected('inscritas') && <CancelButton />}
      </Gap>

      <Gap px="1" py="1">
        <Badge
          label={'Disponibles'}
          name={'disponibles'}
          backgroundColor={getBackgroundColor('disponibles')}
          handleClick={handleRutasDisponibles}
        />
        {isSelected('disponibles') && <CancelButton />}
      </Gap>

      <Gap px="1" py="1">
        <Badge
          label={'Finalizadas'}
          name={'finalizadas'}
          backgroundColor={getBackgroundColor('finalizadas')}
          handleClick={handleRutasFinalizadas}
        />
        {isSelected('finalizadas') && <CancelButton />}
      </Gap>

      <Gap px="1" py="1">
        <Badge
          label={'Sin Cupo'}
          name={'sin_cupo'}
          backgroundColor={getBackgroundColor('sin_cupo')}
          handleClick={handleRutaSinCupo}
        />
        {isSelected('sin_cupo') && <CancelButton />}
      </Gap>
      {/* {filtros.map((filtro) => {
        const { value, nombre } = filtro
        const backgoundColor = getBackgroundColor(value)
        return (
          <Gap key={filtro.value} px="1" py="1">
            <Badge
              label={nombre}
              name={value}
              backgroundColor={backgoundColor}
              handleClick={handleEtiquetasSelections}
            />
            {isSelected(value) && <CancelButton />}
          </Gap>
        )
      })} */}
    </ScrollView>
  )
}

export default BarraFiltrosRutas

=== ConfirmationModal.tsx ===
import * as React from 'react'
import { Text, View, Modal, Pressable } from 'react-native'
import tw from 'twrnc'
import {
  BACKGROUND_COLORS,
  BORDER_COLORS,
  TEXT_COLORS,
} from '../../utils/constants'
import ButtonPrimary from '../atomos/ButtonPrimary'
import Ruler from '../atomos/Ruler'
import UnfocusButton from '../atomos/UnfocusButton'

interface ConfirmationModalProps {
  visible: boolean
  setVisible: (visible: boolean) => void
  setConfirmation: (value: boolean) => void
  title: string
  body: string
}

const ConfirmationModal = ({
  visible,
  title,
  body,
  setVisible,
  setConfirmation,
}: ConfirmationModalProps) => {
  return (
    <Modal
      visible={visible}
      transparent={true}
      onRequestClose={() => {
        setVisible(!visible)
      }}
    >
      <View
        style={tw`flex items-center justify-center h-full bg-black bg-opacity-20`}
      >
        <View style={tw`p-4 bg-white rounded-2xl w-11/12`}>
          <View style={tw`flex flex-row justify-between pb-2 pl-2`}>
            <Text
              style={tw`text-lg text-center font-bold w-11/12 ${TEXT_COLORS.PRIMARY_BLUE}`}
            >
              {title}
            </Text>
            <Pressable
              onPress={() => setVisible(!visible)}
              style={tw`-mt-2 pr-3`}
            >
              <Text style={tw`${TEXT_COLORS.DARK_BLUE} font-bold text-2xl`}>
                x
              </Text>
            </Pressable>
          </View>
          <Ruler style={BORDER_COLORS.GRAY} />
          <View style={tw`py-6`}>
            <Text style={tw`text-sm mx-auto w-11/12 ${TEXT_COLORS.DARK_BLUE}`}>
              {body}
            </Text>
          </View>
          <Ruler style={BORDER_COLORS.GRAY} />
          <View style={tw`flex flex-row items-center justify-center pt-4`}>
            <UnfocusButton
              label="Cancelar"
              style="w-full mr-12"
              handleClick={() => {
                setConfirmation(false)
                setVisible(!visible)
              }}
            />
            <ButtonPrimary
              label="Eliminar"
              style={`w-full ${BACKGROUND_COLORS.SKY_BLUE} rounded-lg`}
              handleClick={() => {
                setConfirmation(true)
                setVisible(!visible)
              }}
            />
          </View>
        </View>
      </View>
    </Modal>
  )
}

export default ConfirmationModal

=== CreatableAudioRecord.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { View } from 'react-native'
import AudioRecord from '../moleculas/AudioRecord'
import { Audio } from 'expo-av'
import NoteVoice from '../moleculas/NoteVoice'
import CancelButton from '../atomos/CancelButton'
import { WIDTH_DIMENSIONS } from '../../utils/constants'

interface CreatableAudioRecordProps {
  field: string
  values: any
  setField: (audio: Audio.Recording) => void
  deleteValue: (uri: string) => void
}

const CreatableAudioRecord = ({
  field,
  values,
  setField,
  deleteValue,
}: CreatableAudioRecordProps) => {
  return (
    <View style={tw`mt-2`}>
      {values.map((record: any) => {
        return (
          <View style={tw`relative`} key={record._uri || record.link}>
            <NoteVoice record={record} width={WIDTH_DIMENSIONS * 0.8} />
            <CancelButton
              value={record._uri || record.link}
              handleClick={deleteValue}
              styles="top-3 right-1"
              size={19}
            />
          </View>
        )
      })}
      <View style={tw`mt-2`}>
        <AudioRecord field={field} setField={setField} />
      </View>
    </View>
  )
}

export default CreatableAudioRecord

=== EmptyDetalleRuta.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { View } from 'react-native'
import HeaderRoundedContainer from '../moleculas/HeaderRoundedContainer'
import { BACKGROUND_COLORS } from '../../utils/constants'
import RoundedWhiteBaseTemplate from './RoundedWhiteBaseTemplate'

const EmptyDetalleRuta = () => {
  return (
    <View style={tw`mx-2`}>
      <HeaderRoundedContainer>
        <View
          style={tw`w-10/12 h-4 rounded-lg ${BACKGROUND_COLORS.GRAY} mx-auto`}
        />
        <View style={tw`flex flex-row my-4 pl-8 pb-8`}>
          <View
            style={tw`w-2/12 h-4 rounded-lg mr-2 ${BACKGROUND_COLORS.GRAY}`}
          />
          <View
            style={tw`w-2/12 h-4 rounded-lg mr-2 ${BACKGROUND_COLORS.GRAY}`}
          />
          <View
            style={tw`w-2/12 h-4 rounded-lg mr-2 ${BACKGROUND_COLORS.GRAY}`}
          />
        </View>
      </HeaderRoundedContainer>

      <RoundedWhiteBaseTemplate shadow={false}>
        <View style={tw`w-full h-[30rem] rounded-lg mr-2 mt-6`}>
          <View
            style={tw`w-full h-24 rounded-lg mr-2 ${BACKGROUND_COLORS.GRAY_PLACEHOLDER}`}
          />

          <View
            style={tw`w-10/12 mt-4 h-4 rounded-lg ${BACKGROUND_COLORS.GRAY} mx-auto`}
          />
          <View
            style={tw`w-4/12 mt-4 h-4 rounded-lg ${BACKGROUND_COLORS.GRAY} mx-auto`}
          />
          <View
            style={tw`w-10/12 mt-4 h-4 rounded-lg ${BACKGROUND_COLORS.GRAY} mx-auto`}
          />
          <View
            style={tw`w-4/12 mt-4 h-4 rounded-lg ${BACKGROUND_COLORS.GRAY} `}
          />
          <View
            style={tw`w-4/12 mt-4 h-4 rounded-lg ${BACKGROUND_COLORS.GRAY} `}
          />
          <View
            style={tw`w-9/12 mt-4 h-4 rounded-lg ${BACKGROUND_COLORS.GRAY} `}
          />

          <View
            style={tw`w-full h-24 rounded-lg mr-2 mt-8 ${BACKGROUND_COLORS.GRAY_PLACEHOLDER}`}
          />
        </View>
      </RoundedWhiteBaseTemplate>
    </View>
  )
}

export default EmptyDetalleRuta

=== EmptyNovedad.tsx ===
import * as React from 'react'
import { View } from 'react-native'
import tw from 'twrnc'
import { BACKGROUND_COLORS, BORDER_COLORS } from '../../utils/constants'

const EmptyNovedad = () => {
  return (
    <View
      style={tw`bg-white py-3 border-r-8 ${BORDER_COLORS.ORANGE} border-solid z-40`}
    >
      <View style={tw`flex flex-row pl-2`}>
        <View style={tw`pl-4`}>
          <View style={tw`w-16 h-16 rounded-lg ${BACKGROUND_COLORS.GRAY} `} />
        </View>
        <View style={tw`pl-6`}>
          <View style={tw`w-64 h-3 rounded-xl ${BACKGROUND_COLORS.GRAY}`} />
          <View
            style={tw`my-2 w-52 h-3 rounded-xl ${BACKGROUND_COLORS.GRAY}`}
          />
          <View style={tw`w-36 h-3 rounded-xl ${BACKGROUND_COLORS.GRAY}`} />
        </View>
      </View>
    </View>
  )
}

export default EmptyNovedad

=== EmptyPublicacionDetalle.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { View } from 'react-native'
import RoundedWhiteBaseTemplate from './RoundedWhiteBaseTemplate'
import { BACKGROUND_COLORS } from '../../utils/constants'

const EmptyPublicacionDetalle = () => {
  return (
    <View style={tw`p-2`}>
      <RoundedWhiteBaseTemplate shadow={false}>
        <View
          style={tw`pl-12 w-11/12 mx-auto h-4 rounded-xl ${BACKGROUND_COLORS.GRAY}`}
        />
        <View style={tw`flex flex-row mt-4`}>
          <View style={tw`w-14 h-14 rounded-full ${BACKGROUND_COLORS.GRAY}`} />
          <View style={tw`w-full`}>
            <View
              style={tw`ml-8 w-8/12 h-4 rounded-xl ${BACKGROUND_COLORS.GRAY}`}
            />
            <View
              style={tw`ml-8 mt-2 w-4/12 h-4 rounded-xl ${BACKGROUND_COLORS.GRAY}`}
            />
          </View>
        </View>

        <View
          style={tw`w-full mt-4 h-64 rounded-lg ${BACKGROUND_COLORS.GRAY}`}
        />
        <View
          style={tw`mt-4 w-full h-4 rounded-xl ${BACKGROUND_COLORS.GRAY}`}
        />
      </RoundedWhiteBaseTemplate>

      <RoundedWhiteBaseTemplate shadow={false}>
        <View style={tw`flex flex-row mt-4`}>
          <View style={tw`w-14 h-14 rounded-full ${BACKGROUND_COLORS.GRAY}`} />
          <View style={tw`w-full`}>
            <View
              style={tw`ml-8 w-8/12 h-4 rounded-xl ${BACKGROUND_COLORS.GRAY}`}
            />
            <View
              style={tw`ml-8 mt-2 w-4/12 h-4 rounded-xl ${BACKGROUND_COLORS.GRAY}`}
            />
          </View>
        </View>
      </RoundedWhiteBaseTemplate>
    </View>
  )
}

export default EmptyPublicacionDetalle

=== EmptyTarjetaConsejo.tsx ===
import * as React from 'react'
import { View, StyleSheet, Image } from 'react-native'
import tw from 'twrnc'
import { BACKGROUND_COLORS, WIDTH_DIMENSIONS } from '../../utils/constants'
import Ruler from '../atomos/Ruler'

const EmptyTarjetaConsejo = () => {
  return (
    <View style={styles.borderContainer}>
      <View style={tw`bg-white py-2 px-4 rounded-xl`}>
        <View style={tw`flex flex-row relative`}>
          <View style={tw`pr-8 pb-4`}>
            <Image
              source={require('../../../assets/user.png')}
              style={{ width: 40, height: 45, borderRadius: 400 / 2 }}
            />
          </View>
          <View>
            <View
              style={tw`pl-12 w-64 h-3 rounded-xl ${BACKGROUND_COLORS.GRAY}`}
            />
            <View
              style={tw`my-4 pl-12 w-24 h-3 rounded-xl ${BACKGROUND_COLORS.GRAY}`}
            />
          </View>
        </View>

        <Ruler style="w-full bg-gray-200 mb-2" />
        <View style={tw`mx-auto`}>
          <View
            style={[
              tw` rounded-lg ${BACKGROUND_COLORS.GRAY} mb-4`,
              { width: WIDTH_DIMENSIONS * 0.9, height: 200 },
            ]}
          />
        </View>
        <View
          style={[
            tw`w-36 h-3 rounded-xl ${BACKGROUND_COLORS.GRAY}`,
            { width: WIDTH_DIMENSIONS * 0.9, height: 14 },
          ]}
        />
      </View>
    </View>
  )
}

export default EmptyTarjetaConsejo

const styles = StyleSheet.create({
  borderContainer: {
    borderWidth: 1,
    borderColor: '#DFDFF0',
    borderStyle: 'solid',
    borderRadius: 15,
    marginVertical: 3,
  },
})

=== EmptyTarjetaPublicacion.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { View } from 'react-native'
import RoundedWhiteBaseTemplate from './RoundedWhiteBaseTemplate'
import { BACKGROUND_COLORS } from '../../utils/constants'

const EmptyTarjetaPublicacion = () => {
  return (
    <RoundedWhiteBaseTemplate shadow={false}>
      <View style={tw`pl-12 w-64 h-3 rounded-xl ${BACKGROUND_COLORS.GRAY}`} />
      <View style={tw`flex flex-row mt-4`}>
        <View
          style={tw`pl-12 w-24 h-24 rounded-xl ${BACKGROUND_COLORS.GRAY}`}
        />
        <View style={tw`ml-6`}>
          <View style={tw`flex flex-row`}>
            <View style={tw`w-16 h-4 rounded-xl ${BACKGROUND_COLORS.GRAY}`} />
            <View
              style={tw`ml-2 w-16 h-4 rounded-xl ${BACKGROUND_COLORS.GRAY}`}
            />
            <View
              style={tw`ml-2 w-16 h-4 rounded-xl ${BACKGROUND_COLORS.GRAY}`}
            />
          </View>
          <View
            style={tw`mt-4 w-52 h-3 rounded-xl ${BACKGROUND_COLORS.GRAY}`}
          />
          <View
            style={tw`mt-4 w-52 h-3 rounded-xl ${BACKGROUND_COLORS.GRAY}`}
          />
        </View>
      </View>
    </RoundedWhiteBaseTemplate>
  )
}

export default EmptyTarjetaPublicacion

=== GalleryMultiImages.tsx ===
import React from 'react'
import { Image, ImageSourcePropType, View } from 'react-native'
import * as DocumentPicker from 'expo-document-picker'
import { TEXT_COLORS } from '../../utils/constants'
import { TouchableHighlight } from 'react-native-gesture-handler'
import tw from 'twrnc'
import { ErrorMessage } from 'formik'
import { FieldError } from '../atomos/FieldError'
import PreviewDocuments from './PreviewDocuments'
import FieldFormulario from '../moleculas/FieldFormulario'
import { CustomText } from '../atomos/CustomText'

interface GalleryMultiImagesProps {
  field: string
  values: DocumentPicker.DocumentResult[]
  allowedFiles: string[]
  icon: ImageSourcePropType
  placeholder: string
  setFieldValue: (field: string, files: DocumentPicker.DocumentResult[]) => void
}
const GalleryMultiImages = ({
  field,
  values,
  allowedFiles,
  icon,
  placeholder,
  setFieldValue,
}: GalleryMultiImagesProps) => {
  const deleteFile = (uri: string) => {
    setFieldValue(field, [
      ...(values || []).filter((file: any) => {
        const uriFile = file.uri || file.link
        return uriFile !== uri
      }),
    ])
  }

  const getFile = async () => {
    const file = await DocumentPicker.getDocumentAsync({
      type: allowedFiles,
    })
    if (file.type !== 'cancel') {
      setFieldValue(field, [...(values || []), file])
    }
  }

  return (
    <>
      <PreviewDocuments values={values} handleDelete={deleteFile} />
      <FieldFormulario>
        <TouchableHighlight
          activeOpacity={0.6}
          underlayColor="#E7F5FF"
          onPress={getFile}
        >
          <View style={tw`flex flex-row items-center`}>
            <View style={tw`mx-auto py-2 w-3/12`}>
              <Image
                source={icon}
                style={{ width: 80, height: 80, opacity: 0.5 }}
              />
            </View>
            <View style={tw`mx-auto py-2 w-8/12`}>
              <CustomText
                style={`${TEXT_COLORS.DARK_GRAY} text-xs`}
                containerProps={{ textAlign: 'center' }}
              >
                {placeholder}
              </CustomText>
            </View>
          </View>
        </TouchableHighlight>
        {field && (
          <View style={tw`mx-auto`}>
            <ErrorMessage name={field} render={FieldError} />
          </View>
        )}
      </FieldFormulario>
    </>
  )
}
export default GalleryMultiImages

=== ParticipantesRutaModal.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Text, View, Modal, Pressable } from 'react-native'
import { CustomText } from '../atomos/CustomText'
import { TEXT_COLORS } from '../../utils/constants'
import Ruler from '../atomos/Ruler'
import { ScrollView } from 'react-native-gesture-handler'
import DetalleUsuarioColaboracion from '../moleculas/DetalleUsuarioColaboracion'

interface ParticipantesRutaModalProps {
  visible: boolean
  setVisible: (visible: boolean) => void
  participantes: any
}

const ParticipantesRutaModal = ({
  visible,
  setVisible,
  participantes,
}: ParticipantesRutaModalProps) => {
  return (
    <Modal
      visible={visible}
      transparent={true}
      animationType="fade"
      onRequestClose={() => {
        setVisible(!visible)
      }}
    >
      <View
        style={tw`flex items-center justify-center h-full bg-black bg-opacity-20`}
      >
        <View style={tw`bg-white rounded-lg p-4 w-11/12`}>
          <View style={tw`pb-2 pl-2`}>
            <CustomText style={`${TEXT_COLORS.DARK_BLUE} text-2xl`}>
              Participantes
            </CustomText>

            <Pressable
              onPress={() => setVisible(!visible)}
              style={tw`absolute -top-1 right-2`}
            >
              <View style={tw`rounded-full w-12 h-12  flex items-end`}>
                <Text style={tw`${TEXT_COLORS.DARK_GRAY} font-bold text-xl`}>
                  x
                </Text>
              </View>
            </Pressable>
          </View>

          <Ruler style="w-11/12 mx-auto" />
          <View style={tw`h-52`}>
            <ScrollView>
              {participantes.map((user: any, index: number) => (
                <DetalleUsuarioColaboracion user={user} key={index} />
              ))}
            </ScrollView>
          </View>
        </View>
      </View>
    </Modal>
  )
}

export default ParticipantesRutaModal

=== PreviewDocuments.tsx ===
import tw from 'twrnc'
import * as React from 'react'
import { View, Image } from 'react-native'
import { MIME_TYPES } from '../../utils/constants'
import { ResizeMode } from 'expo-av'
import Gap from '../atomos/Gap'
import VideoPlayer from 'expo-video-player'
import CancelButton from '../atomos/CancelButton'
import PreviewPdf from '../moleculas/PreviewPdf'

interface PreviewDocumentsProps {
  values: any
  handleDelete: (uri: string) => void
}

const PreviewDocuments = ({ values, handleDelete }: PreviewDocumentsProps) => {
  const handleClick = (name: string) => {
    const multimedia = [...values]
    const fileClicked =
      multimedia.find((file) => {
        const fileUri = file.uri || file.link
        return fileUri === name
      }) || []
    const uriDelete = fileClicked.uri || fileClicked.link
    handleDelete(uriDelete)
  }

  const renderPreview = (file: any) => {
    const typeFile = file.mimeType?.split('/')[0] || file.tipo
    const uri = file.uri || file.link
    switch (typeFile) {
      case MIME_TYPES.IMAGEN:
      case MIME_TYPES.IMAGE:
        return (
          <Image
            key={uri}
            source={{ uri }}
            style={{ width: 100, height: 100 }}
          />
        )
      case MIME_TYPES.VIDEO:
        return (
          <VideoPlayer
            key={uri}
            style={{ width: 100, height: 100 }}
            slider={{ visible: false }}
            videoProps={{
              source: { uri },
              resizeMode: 'cover' as ResizeMode,
              isLooping: true,
            }}
          />
        )
      case MIME_TYPES.PDF:
        return <PreviewPdf key={uri} />
      default:
        return null
    }
  }

  return (
    <View style={tw`flex flex-row flex-wrap`}>
      {values.map((file: any) => {
        if (file.tipo === 'audio') {
          return null
        }
        const uri = file.uri || file.link
        return (
          <Gap px="2" py="2" styles="relative" key={uri}>
            {renderPreview(file)}
            <CancelButton
              styles="-right-3"
              size={20}
              handleClick={handleClick}
              value={uri}
            />
          </Gap>
        )
      })}
    </View>
  )
}

export default PreviewDocuments

=== RoundedWhiteBaseTemplate.tsx ===
import * as React from 'react'
import { View, StyleSheet } from 'react-native'
import tw from 'twrnc'

interface RoundedWhiteBaseTemplateProps {
  children: React.ReactNode | React.ReactNode[]
  shadow?: boolean
}

const RoundedWhiteBaseTemplate = ({
  children,
  shadow = true,
}: RoundedWhiteBaseTemplateProps) => {
  return (
    <View style={styles.borderContainer}>
      <View
        style={tw`bg-white py-2 px-4 rounded-xl ${shadow ? 'shadow-xl' : ''}`}
      >
        {children}
      </View>
    </View>
  )
}

export default RoundedWhiteBaseTemplate

const styles = StyleSheet.create({
  borderContainer: {
    borderWidth: 1,
    borderColor: '#DFDFF0',
    borderStyle: 'solid',
    borderRadius: 14,
    marginVertical: 3,
  },
})

=== RutaCancelarModal.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Modal, Pressable, Text, View } from 'react-native'
import { BACKGROUND_COLORS, TEXT_COLORS } from '../../utils/constants'
import { CustomText } from '../atomos/CustomText'
import Ruler from '../atomos/Ruler'
import ButtonPrimary from '../atomos/ButtonPrimary'
import Input from '../moleculas/Input'

interface RutaCancelarModalProps {
  visible: boolean
  setVisible: (visible: boolean) => void
  motivo: string
  setMotivo: (text: string) => void
  handleConfirmation: () => void
}

const RutaCancelarModal = ({
  visible,
  setVisible,
  motivo,
  setMotivo,
  handleConfirmation,
}: RutaCancelarModalProps) => {
  const handleSubmit = async () => {
    handleConfirmation()
    setVisible(false)
  }
  return (
    <Modal
      visible={visible}
      transparent={true}
      animationType="fade"
      onRequestClose={() => {
        setVisible(!visible)
      }}
    >
      <View
        style={tw`flex justify-center items-center h-full bg-black bg-opacity-20`}
      >
        <View style={tw`bg-white rounded-lg p-4 w-11/12`}>
          <View style={tw`pb-2 pl-2`}>
            <CustomText
              style={`${TEXT_COLORS.DARK_BLUE} text-2xl`}
              containerProps={{ textAlign: 'center' }}
            >
              Motivo
            </CustomText>

            <Pressable
              onPress={() => setVisible(!visible)}
              style={tw`absolute -top-1 right-2`}
            >
              <View style={tw`rounded-full w-12 h-12  flex items-end`}>
                <Text style={tw`${TEXT_COLORS.DARK_GRAY} font-bold text-xl`}>
                  x
                </Text>
              </View>
            </Pressable>
          </View>

          <Ruler style="w-11/12 mx-auto" />

          <View style={tw`p-2 pb-4`}>
            <Text style={tw`text-black opacity-50 text-center`}>
              ¿Por qué se está cancelando esta ruta?
            </Text>
          </View>

          <View style={tw`mb-6`}>
            <Input
              multiline
              numberOfLines={4}
              textAlignVertical="center"
              type="none"
              stylesInput="bg-white"
              value={motivo}
              setValue={setMotivo}
            />
          </View>

          <ButtonPrimary
            label="Confirmar"
            style={`${BACKGROUND_COLORS.PRIMARY_BLUE} bg-opacity-80 py-2 rounded-3xl w-9/12 mx-auto`}
            handleClick={handleSubmit}
          />
        </View>
      </View>
    </Modal>
  )
}

export default RutaCancelarModal

=== RutaColaboracionesModal.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Modal, Pressable, Text, View } from 'react-native'
import { BACKGROUND_COLORS, TEXT_COLORS } from '../../utils/constants'
import { CustomText } from '../atomos/CustomText'
import Ruler from '../atomos/Ruler'
import { catalogs } from '../../models/Rutas'
import TextCheck from '../atomos/TextCheck'
import ButtonPrimary from '../atomos/ButtonPrimary'

interface RutaColaboracionesModalProps {
  visible: boolean
  setVisible: (visible: boolean) => void
  colaboraciones: catalogs[]
  handleAdd: (value: string) => void
  inscribirUser: () => void
}

const RutaColaboracionesModal = ({
  visible,
  setVisible,
  colaboraciones,
  handleAdd,
  inscribirUser,
}: RutaColaboracionesModalProps) => {
  return (
    <Modal
      visible={visible}
      transparent={true}
      animationType="fade"
      onRequestClose={() => {
        setVisible(!visible)
      }}
    >
      <View
        style={tw`flex justify-center items-center h-full bg-black bg-opacity-20`}
      >
        <View style={tw`bg-white rounded-lg p-4 w-11/12`}>
          <View style={tw`pb-2 pl-2`}>
            <CustomText
              style={`${TEXT_COLORS.DARK_BLUE} text-2xl`}
              containerProps={{ textAlign: 'center' }}
            >
              Colaboraciones
            </CustomText>

            <Pressable
              onPress={() => setVisible(!visible)}
              style={tw`absolute -top-1 right-2`}
            >
              <View style={tw`rounded-full w-12 h-12  flex items-end`}>
                <Text style={tw`${TEXT_COLORS.DARK_GRAY} font-bold text-xl`}>
                  x
                </Text>
              </View>
            </Pressable>
          </View>

          <Ruler style="w-11/12 mx-auto" />

          <View style={tw`p-2 pb-4`}>
            <Text style={tw`text-black opacity-50`}>
              Seleccione elementos del listado con los que esté dispuesto a
              colaborar
            </Text>
          </View>
          <View style={tw`flex flex-row flex-wrap px-2 mb-2`}>
            {colaboraciones.map((colaboracion, index) => (
              <TextCheck
                key={index}
                option={colaboracion}
                handleClick={handleAdd}
                style="w-6/12 py-2"
              />
            ))}
          </View>

          <ButtonPrimary
            label="Continuar"
            style={`${BACKGROUND_COLORS.PRIMARY_BLUE} bg-opacity-80 py-2 rounded-3xl`}
            handleClick={() => {
              inscribirUser()
              setVisible(false)
            }}
          />
        </View>
      </View>
    </Modal>
  )
}

export default RutaColaboracionesModal

=== RutaFinalRastreoModal.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Text, View, Modal, Pressable } from 'react-native'
import { CustomText } from '../atomos/CustomText'
import { BACKGROUND_COLORS, TEXT_COLORS } from '../../utils/constants'
import Ruler from '../atomos/Ruler'
import ButtonPrimary from '../atomos/ButtonPrimary'
import { NavigationProp, useNavigation } from '@react-navigation/native'
import { RootStackParamList, Screens } from '../../models/Screens.types'
import { useSelector } from 'react-redux'
import { RootState } from '../../redux/store'

interface RutaFinalRastreoModalProps {
  visible: boolean
  token: string
  setVisible: (visible: boolean) => void
}

const RutaFinalRastreoModal = ({
  visible,
  token,
  setVisible,
}: RutaFinalRastreoModalProps) => {
  const { user } = useSelector((state: RootState) => state.user)
  const navigation =
    useNavigation<NavigationProp<RootStackParamList, Screens>>()
  return (
    <Modal
      visible={visible}
      transparent={true}
      animationType="fade"
      onRequestClose={() => {
        setVisible(!visible)
      }}
    >
      <View
        style={tw`flex justify-center items-center h-full bg-black bg-opacity-20`}
      >
        <View style={tw`bg-white rounded-lg p-4 w-11/12`}>
          <View style={tw`pb-2 pl-2`}>
            <CustomText
              style={`${TEXT_COLORS.DARK_BLUE} text-2xl`}
              containerProps={{ textAlign: 'center' }}
            >
              Final del Recorrido
            </CustomText>

            <Pressable
              onPress={() => setVisible(!visible)}
              style={tw`absolute -top-1 right-2`}
            >
              <View style={tw`rounded-full w-12 h-12  flex items-end`}>
                <Text style={tw`${TEXT_COLORS.DARK_GRAY} font-bold text-xl`}>
                  x
                </Text>
              </View>
            </Pressable>
          </View>

          <Ruler style="w-11/12 mx-auto" />

          <View style={tw`p-2 pb-4`}>
            <Text style={tw`text-black opacity-50 text-center`}>
              ¡Haz llegado al final de esta ruta, Veamos tus hitos en la
              carrera!
            </Text>
          </View>
          <View style={tw`flex flex-row flex-wrap px-2 mb-2`}></View>

          <ButtonPrimary
            label="Continuar"
            style={`${BACKGROUND_COLORS.PRIMARY_BLUE} bg-opacity-80 py-2 rounded-3xl`}
            handleClick={() => {
              navigation.navigate('FinalRuta', {
                tokenRuta: token,
                tokenUsuario: user?.id_usuario || '',
              })
              setVisible(false)
            }}
          />
        </View>
      </View>
    </Modal>
  )
}

export default RutaFinalRastreoModal

=== RutaModal.tsx ===
import { NavigationProp, useNavigation } from '@react-navigation/native'
import * as React from 'react'
import { Text, Modal, View, Pressable, Image } from 'react-native'
import { useSelector } from 'react-redux'
import tw from 'twrnc'
import { RootStackParamList, Screens } from '../../models/Screens.types'
import { RootState } from '../../redux/store'
import { TEXT_COLORS } from '../../utils/constants'
import { CustomText } from '../atomos/CustomText'
import Ruler from '../atomos/Ruler'
import SecondaryButton from '../atomos/SecondaryButton'

interface RutaModalProps {
  visible: boolean
  setVisible: (visible: boolean) => void
  participantes: any
  nombre: string
  horasEstimadas: number
  tokenRuta?: string
  handleAbandonar: () => void
}

const RutaModal = ({
  visible,
  setVisible,
  participantes,
  nombre,
  horasEstimadas,
  tokenRuta,
  handleAbandonar,
}: RutaModalProps) => {
  const { user } = useSelector((state: RootState) => state.user)
  const navigation =
    useNavigation<NavigationProp<RootStackParamList, Screens>>()

  return (
    <Modal
      visible={visible}
      transparent={true}
      animationType="fade"
      onRequestClose={() => {
        setVisible(!visible)
      }}
    >
      <View style={tw`flex h-full bg-black bg-opacity-20 relative`}>
        <View style={tw`absolute top-20 left-2 bg-white rounded-lg p-4 w-9/12`}>
          <View style={tw`pb-2 pl-2`}>
            <CustomText
              style={`${TEXT_COLORS.DARK_BLUE} text-2xl`}
              containerProps={{ textAlign: 'center' }}
            >
              {nombre}
            </CustomText>

            <Pressable
              onPress={() => setVisible(!visible)}
              style={tw`absolute -top-1 right-2`}
            >
              <View style={tw`rounded-full w-12 h-12  flex items-end`}>
                <Text style={tw`${TEXT_COLORS.DARK_GRAY} font-bold text-xl`}>
                  x
                </Text>
              </View>
            </Pressable>
          </View>

          <Ruler style="w-11/12 mx-auto" />

          <View style={tw`flex flex-row items-center my-4 pl-8`}>
            <Image
              source={require('../../../assets/reloj_icon.png')}
              style={{ width: 15, height: 15, marginRight: 16 }}
            />
            <Text style={tw`${TEXT_COLORS.DARK_BLUE} text-base`}>
              {horasEstimadas} horas estimadas
            </Text>
          </View>

          <View style={tw`flex flex-row items-center mb-4 pl-8`}>
            <Image
              source={require('../../../assets/ciclista_en_ruta.png')}
              style={{ width: 20, height: 20, marginRight: 6 }}
            />
            <Text style={tw`${TEXT_COLORS.DARK_BLUE} text-base`}>
              {participantes?.length || 0} Ciclistas en ruta
            </Text>
          </View>

          <Ruler style="w-11/12 mx-auto mb-4" />

          <SecondaryButton
            label="Abandonar Ruta"
            style="w-9/12 mx-auto"
            handleClick={() => {
              handleAbandonar()
              navigation.navigate('RutaIncompleta', {
                tokenRuta: tokenRuta || '',
                tokenUsuario: user?.id_usuario || '',
              })
            }}
          />
        </View>
      </View>
    </Modal>
  )
}

export default RutaModal

=== SafeHomeModal.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Image, Modal, Pressable, Text, View } from 'react-native'
import { CustomText } from '../atomos/CustomText'
import { TEXT_COLORS, WIDTH_DIMENSIONS } from '../../utils/constants'
import { confirmarSafeInHome } from '../../lib/services/user.services'
import { useSelector } from 'react-redux'
import { RootState } from '../../redux/store'
import { capitalize } from '../../utils/capitalizeText'

interface SafeHomeModalProps {
  visible: boolean
  datosRuta: any
  setVisible: (visible: boolean) => void
}

const SafeHomeModal = ({
  visible,
  setVisible,
  datosRuta,
}: SafeHomeModalProps) => {
  const { authToken, user } = useSelector((state: RootState) => state.user)

  const handleConfirmation = async (answer: boolean) => {
    if (authToken) {
      await confirmarSafeInHome(authToken, datosRuta.token_ruta, answer)
      setVisible(!visible)
    }
  }

  return (
    <Modal
      visible={visible}
      animationType="slide"
      onRequestClose={() => {
        setVisible(!visible)
      }}
    >
      <View style={tw` h-full`}>
        <View style={tw`pt-12 pb-4 w-11/12 mx-auto`}>
          <Pressable
            onPress={() => setVisible(!visible)}
            style={tw`absolute -top-1 right-2`}
          >
            <View style={tw`rounded-full w-12 h-12  flex items-end`}>
              <Text
                style={tw`${TEXT_COLORS.GRAY_PLACEHOLDER} font-bold text-4xl`}
              >
                x
              </Text>
            </View>
          </Pressable>
          <View style={tw``}>
            <CustomText
              style={`${TEXT_COLORS.ORANGE} text-3xl`}
              containerProps={{ textAlign: 'center' }}
            >
              ¡Hola, {capitalize(user?.first_name || '')}!
            </CustomText>
            <CustomText
              style={`${TEXT_COLORS.DARK_BLUE} text-3xl`}
              containerProps={{ textAlign: 'center', padding: 12 }}
            >
              ¿Haz llegado a casa?
            </CustomText>
          </View>
          <View style={tw`mx-auto py-8`}>
            <View style={tw`bg-white rounded-full px-8 shadow-sm`}>
              <Image
                source={require('../../../assets/house.png')}
                style={{ width: WIDTH_DIMENSIONS * 0.5 }}
                resizeMode="contain"
              />
            </View>
          </View>
          <View style={tw`w-10/12 mx-auto `}>
            <Text style={tw`${TEXT_COLORS.DARK_BLUE} text-xl`}>
              ¡Los miembros de la comunidad están esperando tu confirmación
              después de la ruta{' '}
              <Text style={tw`font-semibold`}>{datosRuta?.nombre}</Text>!
            </Text>
          </View>
          <View style={tw`flex flex-row w-10/12 mx-auto pt-12`}>
            <Pressable
              style={tw`flex flex-row items-center px-8`}
              onPress={() => handleConfirmation(true)}
            >
              <Image
                source={require('../../../assets/correct.png')}
                style={{ width: 40, height: 40, marginRight: 8 }}
                resizeMode="contain"
              />
              <Text style={tw`${TEXT_COLORS.DARK_BLUE} text-xl`}>Sí</Text>
            </Pressable>

            <Pressable
              style={tw`flex flex-row items-center px-8`}
              onPress={() => handleConfirmation(false)}
            >
              <Image
                source={require('../../../assets/failed.png')}
                style={{ width: 40, height: 40, marginRight: 8 }}
                resizeMode="contain"
              />
              <Text style={tw`${TEXT_COLORS.DARK_BLUE} text-xl`}>No</Text>
            </Pressable>
          </View>
        </View>
      </View>
    </Modal>
  )
}

export default SafeHomeModal

=== SafeView.tsx ===
import * as React from 'react'
import { useSelector } from 'react-redux'
import { getRutasSinConfirmar } from '../../lib/services/user.services'
import { RootState } from '../../redux/store'
import SafeHomeModal from './SafeHomeModal'

const SafeView = () => {
  const [showSafeHome, setShowSafeHome] = React.useState(false)
  const [ruta, setruta] = React.useState({})
  const { authToken } = useSelector((state: RootState) => state.user)

  React.useEffect(() => {
    ;(async () => {
      if (authToken) {
        const rutaPendiente = await getRutasSinConfirmar(authToken)
        if (rutaPendiente) {
          setruta(rutaPendiente)
          setTimeout(() => {
            setShowSafeHome(true)
          }, 2000)
        }
      }
    })()
  }, [])

  return (
    <SafeHomeModal
      visible={showSafeHome}
      setVisible={setShowSafeHome}
      datosRuta={ruta}
    />
  )
}

export default SafeView

=== AdminValidator.tsx ===
import * as React from 'react'
import { View } from 'react-native'
import { useSelector } from 'react-redux'
import { RootState } from '../../redux/store'
import tw from 'twrnc'
interface AdminValidatorProps {
  children: React.ReactNode | React.ReactNode[]
  stylesProp?: string
}

const AdminValidator = ({ children, stylesProp }: AdminValidatorProps) => {
  const { user } = useSelector((state: RootState) => state.user)

  return user?.admin ? (
    <View style={tw`${stylesProp || ''}`}>{children}</View>
  ) : null
}

export default AdminValidator

=== BaseAutenticacion.tsx ===
import { StatusBar } from 'expo-status-bar'
import * as React from 'react'
import { ScrollView } from 'react-native'
import tw from 'twrnc'

interface Props {
  children: React.ReactNode
}

const BaseAutenticacion = ({ children }: Props) => {
  return (
    <ScrollView style={tw`px-6`}>
      <StatusBar backgroundColor={'#fff'} />
      {children}
    </ScrollView>
  )
}

export default BaseAutenticacion

=== BasePaginas.tsx ===
import React, { ReactNode } from 'react'
import tw from 'twrnc'
import {
  Animated,
  RefreshControl,
  ScrollView,
  StatusBar,
  View,
} from 'react-native'
import NavigationBar from '../moleculas/NavigationBar'
import { BACKGROUND_COLORS } from '../../utils/constants'

interface Props {
  children: ReactNode | ReactNode[]
  stickyIndexes?: number[]
  handleRefresh?: () => void
  backgroundColor?: string
}

const wait = (timeout: number) => {
  return new Promise((resolve) => setTimeout(resolve, timeout))
}

const BasePaginas = ({
  children,
  stickyIndexes,
  backgroundColor,
  handleRefresh,
}: Props) => {
  const [refreshing, setRefreshing] = React.useState(false)

  const onRefresh = () => {
    setRefreshing(true)
    handleRefresh?.()
    wait(1000).then(() => setRefreshing(false))
  }

  const AnimatedNavbar = new Animated.Value(0)
  const NAVBAR_MAX_HEIGHT = 65
  const NAVBAR_MIN_HEIGHT = 0

  const animateNavbarHeight = AnimatedNavbar.interpolate({
    inputRange: [0, NAVBAR_MAX_HEIGHT - NAVBAR_MIN_HEIGHT],
    outputRange: [NAVBAR_MAX_HEIGHT, NAVBAR_MIN_HEIGHT],
    extrapolate: 'clamp',
  })

  return (
    <View
      style={tw`relative h-full ${
        backgroundColor || BACKGROUND_COLORS.BLUE_LIGHTER
      }`}
    >
      <StatusBar backgroundColor={'#2D84C4'} />
      <ScrollView
        scrollEventThrottle={16}
        onScroll={Animated.event(
          [{ nativeEvent: { contentOffset: { y: AnimatedNavbar } } }],
          { useNativeDriver: false }
        )}
        showsVerticalScrollIndicator={false}
        stickyHeaderIndices={stickyIndexes || []}
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
        }
      >
        {children}
      </ScrollView>
      <Animated.View
        style={[{ height: animateNavbarHeight, backgroundColor: '#FA0000' }]}
      >
        <NavigationBar />
      </Animated.View>
    </View>
  )
}

export default BasePaginas

=== BasePaginasDrawer.tsx ===
import React, { ReactNode } from 'react'
import tw from 'twrnc'
import { ScrollView, StatusBar, View } from 'react-native'
import { BACKGROUND_COLORS } from '../../utils/constants'

interface Props {
  children: ReactNode | ReactNode[]
  backgroundColor?: string
}

const BaseDrawerPaginas = ({ children, backgroundColor }: Props) => {
  return (
    <View
      style={tw`relative h-full ${
        backgroundColor || BACKGROUND_COLORS.BLUE_LIGHTER
      }`}
    >
      <StatusBar backgroundColor={'#2D84C4'} />
      <ScrollView showsVerticalScrollIndicator={false}>{children}</ScrollView>
    </View>
  )
}

export default BaseDrawerPaginas

=== BasePaginasSecundarias.tsx ===
import React, { ReactNode } from 'react'
import tw from 'twrnc'
import { ScrollView, StatusBar, View } from 'react-native'
import { BACKGROUND_COLORS } from '../../utils/constants'

interface Props {
  children: ReactNode | ReactNode[]
}

const BasePaginasSecundarias = ({ children }: Props) => {
  return (
    <View style={tw`relative h-full ${BACKGROUND_COLORS.BLUE_LIGHTER}`}>
      <StatusBar backgroundColor={'#2D84C4'} />
      <ScrollView showsVerticalScrollIndicator={false}>{children}</ScrollView>
    </View>
  )
}

export default BasePaginasSecundarias

=== ComunidadAndRoles.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { RefreshControl, ScrollView, View } from 'react-native'
import SectionTitle from '../../moleculas/SectionTitle'
import { useSelector } from 'react-redux'
import { RootState } from '../../../redux/store'
import TarjetaUsuario from './TarjetaUsuario'
import { getComunidad } from '../../../lib/services/user.services'

export interface DatosBasicosUser {
  admin: boolean
  first_name: string
  last_name: string
  foto?: string
  token_usuario: string
}

const wait = (timeout: number) => {
  return new Promise((resolve) => setTimeout(resolve, timeout))
}

const ComunidadAndRoles = () => {
  const { authToken } = useSelector((state: RootState) => state.user)
  const [comunidad, setComunidad] = React.useState<DatosBasicosUser[]>()
  const [refreshing, setRefreshing] = React.useState(false)

  const onRefresh = async () => {
    setRefreshing(true)
    await getData()
    wait(2000).then(() => setRefreshing(false))
  }

  const getData = async () => {
    if (authToken) {
      setComunidad(await getComunidad(authToken))
    }
    setRefreshing(false)
  }

  React.useEffect(() => {
    ;(async () => {
      await getData()
    })()
  }, [])

  return (
    <ScrollView
      style={tw`px-2 py-4`}
      refreshControl={
        <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
      }
      showsVerticalScrollIndicator={false}
    >
      <SectionTitle text="Comunidad" />
      <View style={tw`my-4`}>
        {comunidad?.map((ciclista) => (
          <TarjetaUsuario key={ciclista.token_usuario} usuario={ciclista} />
        ))}
      </View>
    </ScrollView>
  )
}

export default ComunidadAndRoles

=== TarjetaUsuario.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Image, Pressable, Switch, Text, View } from 'react-native'
import { CustomText } from '../../atomos/CustomText'
import { TEXT_COLORS } from '../../../utils/constants'
import Gap from '../../atomos/Gap'
import { capitalize } from '../../../utils/capitalizeText'
import AdminValidator from '../AdminValidator'
import { cambiarPermiso } from '../../../lib/services/user.services'
import { DatosBasicosUser } from './ComunidadAndRoles'
import { useSelector } from 'react-redux'
import { RootState } from '../../../redux/store'
import { NavigationProp, useNavigation } from '@react-navigation/native'
import { RootStackParamList, Screens } from '../../../models/Screens.types'

interface TarjetaUsuarioProps {
  usuario: DatosBasicosUser
}

const TarjetaUsuario = ({ usuario }: TarjetaUsuarioProps) => {
  const [admin, setAdmin] = React.useState(!!usuario.admin)
  const { authToken, user } = useSelector((state: RootState) => state.user)
  const navigation =
    useNavigation<NavigationProp<RootStackParamList, Screens>>()

  const changeRole = async (value: boolean) => {
    if (authToken) {
      await cambiarPermiso(usuario.token_usuario, value, authToken)
      setAdmin(value)
    }
  }

  const handlePress = () => {
    if (!user?.admin) return
    navigation.navigate('Perfil', { userToken: usuario.token_usuario })
  }
  return (
    <Pressable
      style={tw`bg-white rounded-xl w-full my-1 py-2 flex flex-row justify-between`}
      onPress={handlePress}
    >
      <View style={tw`flex flex-row items-center`}>
        <Image
          source={
            usuario.foto
              ? { uri: usuario.foto }
              : require('../../../../assets/user.png')
          }
          style={{
            width: 60,
            height: 60,
            borderRadius: 400 / 2,
          }}
          resizeMode="contain"
        />
        <Gap px="4">
          <CustomText style={`${TEXT_COLORS.DARK_BLUE}`}>
            {capitalize(usuario.first_name)} {capitalize(usuario.last_name)}
          </CustomText>
        </Gap>
      </View>
      <AdminValidator>
        {admin ? (
          <Text style={tw`text-xs text-black text-opacity-40`}>Admin</Text>
        ) : null}
        <Switch
          trackColor={{ false: '#e6e6e6', true: '#81b0ff' }}
          thumbColor="#3FA1EE"
          onValueChange={changeRole}
          value={admin}
        />
      </AdminValidator>
    </Pressable>
  )
}

export default TarjetaUsuario

=== ConsejoDetalleTemplate.tsx ===
import { NavigationProp, useNavigation } from '@react-navigation/native'
import * as React from 'react'
import { Text, View, Image, ImageSourcePropType } from 'react-native'
import { useDispatch, useSelector } from 'react-redux'
import tw from 'twrnc'
import { republicarConsejo } from '../../../lib/services/consejos.services'
import { Consejo } from '../../../models/Consejo.model'
import { RootStackParamList, Screens } from '../../../models/Screens.types'
import { setHasModified } from '../../../redux/consejo'
import { RootState } from '../../../redux/store'
import {
  BACKGROUND_COLORS,
  TEXT_COLORS,
  WIDTH_DIMENSIONS,
} from '../../../utils/constants'
import ButtonPrimary from '../../atomos/ButtonPrimary'
import InformacionUsuario from '../../atomos/InformacionUsuario'
import Spinner from '../../atomos/Spinner'
import AdminValidator from '../AdminValidator'
import ContenedorPaginasDetalle from '../ContenedorPaginasDetalle'

interface ConsejoDetalleProps {
  consejo: Consejo
}

const ConsejoDetalleTemplate = ({ consejo }: ConsejoDetalleProps) => {
  const { authToken } = useSelector((state: RootState) => state.user)
  const { hasModified } = useSelector((state: RootState) => state.consejo)
  const [isLoading, setIsLoading] = React.useState(false)
  const navigation =
    useNavigation<NavigationProp<RootStackParamList, Screens>>()
  const dispatch = useDispatch()

  const handleRepublicar = async () => {
    setIsLoading(true)
    if (authToken && consejo.token) {
      await republicarConsejo(authToken, consejo.token)
    }
    setIsLoading(false)
    dispatch(setHasModified({ hasModified: !hasModified }))
    navigation.navigate('Inicio')
  }
  return (
    <View style={tw`px-2 pb-4`}>
      <ContenedorPaginasDetalle
        borderRight
        colorBorder="#6a7cd4"
        borderWidth={12}
      >
        <View style={tw`relative`}>
          <InformacionUsuario
            firstName={consejo?.first_name || ''}
            lastName={consejo?.last_name || ''}
            foto={consejo?.foto}
          />
        </View>

        <View style={tw`mx-auto`}>
          {consejo.imagen ? (
            <Image
              source={{ uri: consejo.imagen } as ImageSourcePropType}
              style={{
                width: WIDTH_DIMENSIONS * 0.8,
                height: 200,
                borderRadius: 20 / 2,
              }}
            />
          ) : null}
        </View>

        <View style={tw`pt-4 pb-4 px-2`}>
          <Text style={tw`${TEXT_COLORS.DARK_BLUE} text-sm`}>
            {consejo.informacion}
          </Text>
        </View>

        <AdminValidator>
          {isLoading ? (
            <Spinner />
          ) : (
            <View>
              <ButtonPrimary
                label="Republicar"
                handleClick={handleRepublicar}
                style={`${BACKGROUND_COLORS.SKY_BLUE} mt-6 mb-3 w-5/12 mx-auto py-2 rounded-2xl`}
              />
            </View>
          )}
        </AdminValidator>
      </ContenedorPaginasDetalle>
    </View>
  )
}

export default ConsejoDetalleTemplate

=== DatosContacto.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Text, View, Image } from 'react-native'
import { CustomText } from '../../atomos/CustomText'
import { TEXT_COLORS } from '../../../utils/constants'

const DatosContacto = () => {
  return (
    <View style={tw`bg-white px-2 pt-8`}>
      <View style={tw`mx-auto`}>
        <Image source={require('../../../../assets/ecuaciclismo_logo.png')} />
      </View>
      <CustomText
        containerProps={{ textAlign: 'center', marginBottom: 16 }}
        style={`text-lg ${TEXT_COLORS.DARK_BLUE}`}
      >
        Sobre Nosotros
      </CustomText>
      <Text style={tw`text-base ${TEXT_COLORS.DARK_BLUE} px-8 text-center`}>
        Nuestro fin es promover el uso de la bicicleta; como un medio de
        transporte que no contamina el medio ambiente, ayuda a la salud de las
        personas y fomenta el cicloturismo o turismo de aventura.
      </Text>
      <View style={tw`mt-16`}>
        <Text style={tw`text-base ${TEXT_COLORS.DARK_BLUE} px-8 text-center`}>
          Si tienes dudas o sugerencias para mejorar esta app, por favor,
          contactanos al
        </Text>
        <Text
          style={tw`text-base ${TEXT_COLORS.DARK_BLUE} px-8 text-center pt-4`}
        >
          Teléfono: +59309952251
        </Text>
        <Text style={tw`text-base ${TEXT_COLORS.DARK_BLUE} px-8 text-center`}>
          Email: ecuador.sanchez@gmail.com
        </Text>
      </View>
    </View>
  )
}

export default DatosContacto

=== ContenedorPaginasDetalle.tsx ===
import * as React from 'react'
import { View, StyleSheet } from 'react-native'
import tw from 'twrnc'

interface ContenedorPaginasDetalleProps {
  borderRight?: boolean
  children: React.ReactNode | React.ReactNode[]
  colorBorder: string
  borderWidth: number
  styleProps?: string
}

const ContenedorPaginasDetalle = ({
  borderRight,
  children,
  colorBorder,
  borderWidth,
  styleProps,
}: ContenedorPaginasDetalleProps) => {
  return (
    <View
      style={[
        tw`bg-white mt-4 py-2 px-3 ${styleProps || ''}`,
        borderRight
          ? {
              ...styles.borderSide,
              borderRightColor: colorBorder,
              borderRightWidth: borderWidth,
            }
          : styles.container,
      ]}
    >
      {children}
    </View>
  )
}

export default ContenedorPaginasDetalle

const styles = StyleSheet.create({
  container: {
    borderWidth: 1,
    borderColor: '#DFDFF0',
    borderStyle: 'solid',
    borderRadius: 14,
  },
  borderSide: {
    borderBottomColor: '#DFDFF0',
    borderBottomWidth: 1,
    borderLeftColor: '#DFDFF0',
    borderLeftWidth: 1,
    borderTopColor: '#DFDFF0',
    borderTopWidth: 1,
    borderRadius: 14,
  },
})

=== NovedadIndividual.tsx ===
import * as React from 'react'
import { Text, View, Image, ImageSourcePropType, Pressable } from 'react-native'
import ContenedorPaginasDetalle from '../ContenedorPaginasDetalle'
import tw from 'twrnc'
import { TEXT_COLORS, WIDTH_DIMENSIONS } from '../../../utils/constants'
import Ruler from '../../atomos/Ruler'
import { NovedadInterface } from '../../../models/Novedad.model'
import { useDispatch, useSelector } from 'react-redux'
import { setNovedadHasModified } from '../../../redux/novedad'
import { RootState } from '../../../redux/store'
import { eliminarNovedad } from '../../../lib/services/novedades.services'
import { NavigationProp, useNavigation } from '@react-navigation/native'
import {
  RootDrawerParamList,
  ScreensDrawer,
} from '../../../models/Screens.types'
import AdminValidator from '../AdminValidator'
import Spinner from '../../atomos/Spinner'
import { CustomText } from '../../atomos/CustomText'

interface NovedadIndividualProps {
  data: NovedadInterface
}

const NovedadIndividual = ({ data }: NovedadIndividualProps) => {
  const { nombre, celular, direccion } = data || {}
  const { authToken } = useSelector((state: RootState) => state.user)
  const [isLoading, setIsLoading] = React.useState(false)
  const { novedadHasModified } = useSelector(
    (state: RootState) => state.novedad
  )
  const navigation =
    useNavigation<NavigationProp<RootDrawerParamList, ScreensDrawer>>()
  const dispatch = useDispatch()

  const handleDelete = async () => {
    setIsLoading(true)
    dispatch(setNovedadHasModified({ novedadHasModified: !novedadHasModified }))
    data.token &&
      (await eliminarNovedad(authToken as string, data.token as string))
    navigation.navigate('Novedades')
    setIsLoading(false)
  }

  return (
    <View style={tw`mx-2 relative mb-8`}>
      <ContenedorPaginasDetalle
        borderRight
        colorBorder="#F16F31"
        borderWidth={12}
        styleProps="py-2"
      >
        <View style={tw`pb-12`}>
          <AdminValidator>
            <Pressable onPress={handleDelete}>
              <View style={tw`self-end`}>
                <Image
                  source={require('../../../../assets/bin_icon.png')}
                  style={{ width: 24, height: 24, marginRight: 8 }}
                />
              </View>
            </Pressable>
          </AdminValidator>
          <CustomText
            style={`text-2xl font-bold ${TEXT_COLORS.DARK_BLUE}`}
            containerProps={{ textAlign: 'center' }}
          >
            {data.titulo || ''}
          </CustomText>

          <View style={tw`mx-auto pt-6 pb-4`}>
            <View style={tw`mx-auto`}>
              <Image
                source={{ uri: data.imagen } as ImageSourcePropType}
                style={{
                  width: WIDTH_DIMENSIONS * 0.8,
                  height: 250,
                  borderRadius: 20 / 2,
                }}
              />
            </View>
          </View>
          <View style={tw`w-10/12 mx-auto pt-4 pb-4`}>
            <Text style={tw`text-base`}>{data.descripcion || ''}</Text>
          </View>

          {(nombre || celular || direccion) && (
            <>
              <Ruler style="w-11/12 mx-auto bg-gray-200 mb-4" />

              <View style={tw`w-10/12 mx-auto`}>
                <Text style={tw`text-lg font-bold ${TEXT_COLORS.PRIMARY_BLUE}`}>
                  Datos de contacto
                </Text>

                {nombre && (
                  <View style={tw`pt-2`}>
                    <Text style={tw`text-sm`}>Nombre: {nombre}</Text>
                  </View>
                )}

                {celular && (
                  <View style={tw`pt-2`}>
                    <Text style={tw`text-sm`}>
                      Celular: {data.celular || ''}
                    </Text>
                  </View>
                )}

                {direccion && (
                  <View style={tw`pt-2`}>
                    <Text style={tw`text-sm`}>
                      Dirección: {data.direccion || ''}
                    </Text>
                  </View>
                )}
              </View>
            </>
          )}

          {isLoading && <Spinner />}

          <View style={tw`absolute bottom-0 left-6`}>
            <Text style={tw`text-xs ${TEXT_COLORS.DARK_GRAY}`}>
              Novedad auspiciada por la comunidad{' '}
              <Text style={tw`font-bold`}>Ecuaciclismo</Text>
            </Text>
          </View>
        </View>
      </ContenedorPaginasDetalle>
    </View>
  )
}

export default NovedadIndividual

=== BotonAgregarComentario.tsx ===
import * as React from 'react'
import { View, Pressable } from 'react-native'
import RoundedWhiteBaseTemplate from '../../organismos/RoundedWhiteBaseTemplate'
import tw from 'twrnc'
import RoundedButtonIcon from '../../atomos/RoundedButtonIcon'
import { CustomText } from '../../atomos/CustomText'
import Gap from '../../atomos/Gap'
import { TEXT_COLORS } from '../../../utils/constants'

interface BotonAgregarComentarioProps {
  handleClick: () => void
}

const BotonAgregarComentario = ({
  handleClick,
}: BotonAgregarComentarioProps) => {
  return (
    <Pressable onPress={handleClick}>
      <RoundedWhiteBaseTemplate shadow={false}>
        <View style={tw`relative`}>
          <View style={tw`py-1 flex flex-row items-center mx-auto`}>
            <RoundedButtonIcon
              style="h-8 w-8"
              src={require('../../../../assets/plus.png')}
              handleClick={() => {
                return
              }}
            />
            <Gap px="5">
              <CustomText style={TEXT_COLORS.DARK_BLUE}>
                Agregar comentario
              </CustomText>
            </Gap>
          </View>
        </View>
      </RoundedWhiteBaseTemplate>
    </Pressable>
  )
}

export default BotonAgregarComentario

=== InputAgregarComentario.tsx ===
import * as React from 'react'
import { View } from 'react-native'
import RoundedWhiteBaseTemplate from '../../organismos/RoundedWhiteBaseTemplate'
import VerticalDivider from '../../atomos/VerticalDivider'
import DetalleUsuario from '../../moleculas/DetalleUsuario'
import Input from '../../moleculas/Input'
import RoundedButtonIcon from '../../atomos/RoundedButtonIcon'
import tw from 'twrnc'
import FieldFormulario from '../../moleculas/FieldFormulario'
import { agregarComentarioPublicacion } from '../../../lib/services/publicaciones.services'
import { usePermissionsNotifications } from '../../../hooks/usePermissionsNotifications'
import { useSelector } from 'react-redux'
import { RootState } from '../../../redux/store'
import { capitalize } from '../../../utils/capitalizeText'

interface InputAgregarComentarioProps {
  nombreUsuario: string
  tokenUsuario: string
  tokenPublicacion: string
  fotoUsuario?: string
  tokenNotificacion?: string
  tituloPublicacion?: string
  onSend: () => void
}

const InputAgregarComentario = ({
  nombreUsuario,
  tokenUsuario,
  tokenPublicacion,
  fotoUsuario,
  tokenNotificacion,
  tituloPublicacion,
  onSend,
}: InputAgregarComentarioProps) => {
  const { user } = useSelector((state: RootState) => state.user)
  const [comentario, setComentario] = React.useState('')
  const { sendPushNotification } = usePermissionsNotifications()

  const sendNotificacionComentario = async () => {
    if (!tokenUsuario || !tokenNotificacion) return
    await sendPushNotification({
      tokens: [tokenNotificacion],
      title: 'Nuevos comentarios',
      body: `${capitalize(user?.first_name)} ${capitalize(
        user?.last_name
      )} ha comentado tu publicación: ${tituloPublicacion}`,
    })
  }

  const sendComentario = async () => {
    if (tokenUsuario && tokenPublicacion && comentario) {
      await agregarComentarioPublicacion(
        tokenUsuario,
        tokenPublicacion,
        comentario
      )
      await sendNotificacionComentario()
      onSend()
    }
  }

  return (
    <RoundedWhiteBaseTemplate shadow={false}>
      <View style={tw`relative px-2`}>
        <View style={tw`pt-3 z-40`}>
          <DetalleUsuario
            hasDate={false}
            nombre={nombreUsuario}
            foto={fotoUsuario}
          />
        </View>
        <View style={tw`bg-white z-40 mt-4`}>
          <FieldFormulario>
            <View style={tw`flex flex-row items-center`}>
              <View style={tw`w-[88%]`}>
                <Input
                  type="none"
                  multiline
                  numberOfLines={3}
                  textAlignVertical="top"
                  value={comentario}
                  setValue={(value) => setComentario(value)}
                  stylesInput="border-0"
                  placeholder="Recuerda seguir las normas de la comunidad..."
                />
              </View>
              <View style={tw`w-[5%]`}>
                <RoundedButtonIcon
                  style="h-8 w-8"
                  src={require('../../../../assets/enviar_icon.png')}
                  handleClick={sendComentario}
                />
              </View>
            </View>
          </FieldFormulario>
        </View>
        <VerticalDivider />
      </View>
    </RoundedWhiteBaseTemplate>
  )
}

export default InputAgregarComentario

=== Publicacion.tsx ===
import * as React from 'react'
import { Text, View, Image, Pressable } from 'react-native'
import RoundedWhiteBaseTemplate from '../../organismos/RoundedWhiteBaseTemplate'
import {
  MIME_TYPES,
  TEXT_COLORS,
  WIDTH_DIMENSIONS,
} from '../../../utils/constants'
import DetallePublicador from '../../moleculas/DetalleUsuario'
import VerticalDivider from '../../atomos/VerticalDivider'
import Reacciones from '../../moleculas/BarraReacciones'
import BotonAgregarComentario from './BotonAgregarComentario'
import InputAgregarComentario from './InputAgregarComentario'
import TarjetaComentarioPublicacion from './TarjetaComentarioPublicacion'
import tw from 'twrnc'
import MenuPublicaciones from '../../moleculas/MenuPublicaciones'
import {
  MultimediaResult,
  Publicacion,
} from '../../../models/Publicaciones.model'
import { getPublicacionById } from '../../../lib/services/publicaciones.services'
import { RootState } from '../../../redux/store'
import { useSelector } from 'react-redux'
import Carousel from 'react-native-carousel-loop/lib'
import VideoPlayer from 'expo-video-player'
import { ResizeMode } from 'expo-av'
import NoteVoice from '../../moleculas/NoteVoice'
import * as FileSystem from 'expo-file-system'
import Gap from '../../atomos/Gap'
import EmptyPublicacionDetalle from '../../organismos/EmptyPublicacionDetalle'
import PermissionWrapper from '../PermissionWrapper'
import { CustomText } from '../../atomos/CustomText'

interface PublicacionProps {
  token: string
}
const PublicacionDetalle = ({ token }: PublicacionProps) => {
  const { authToken, user } = useSelector((state: RootState) => state.user)
  const [isAddingComent, setIsAddingComent] = React.useState(false)
  const [publicacion, setPublicacion] = React.useState<Publicacion>()
  const [isRending, setIsRending] = React.useState(true)

  React.useEffect(() => {
    ;(async () => {
      if (authToken && token) {
        setPublicacion(await getPublicacionById(authToken, token))
      }
      setIsRending(false)
    })()
  }, [isAddingComent, token])

  const onClickDownload = async (link: string) => {
    const downloadResumable = FileSystem.createDownloadResumable(
      link,
      FileSystem.documentDirectory + 'file.pdf'
    )
    try {
      const { uri } = (await downloadResumable.downloadAsync()) || {}
      if (!uri) return
    } catch (e) {
      console.error(e)
    }
  }

  const diplayImagesAndVideos = (multimediaResult: MultimediaResult[]) => {
    const items = multimediaResult.map((file, index) => {
      switch (file.tipo) {
        case MIME_TYPES.IMAGE:
          return (
            <Image
              key={index}
              source={{ uri: file.link }}
              style={{
                width: WIDTH_DIMENSIONS * 0.85,
                height: 250,
                backgroundColor: '#fff',
              }}
              resizeMode="contain"
            />
          )
        case MIME_TYPES.VIDEO:
          return (
            <VideoPlayer
              key={index}
              style={{
                width: WIDTH_DIMENSIONS * 0.85,
                height: 250,
                videoBackgroundColor: '#fff',
              }}
              slider={{ visible: false }}
              videoProps={{
                source: { uri: file.link },
                resizeMode: 'contain' as ResizeMode,
                isLooping: true,
              }}
            />
          )
        default:
          return null
      }
    })
    const finalItems = items.filter((item) => item)
    if (finalItems.length > 0) {
      return finalItems
    }
    return (
      <View style={tw`mx-auto`}>
        <Image
          source={require('../../../../assets/publicacion_default_icon.png')}
          style={{ width: 200, height: 200 }}
        />
      </View>
    )
  }

  const displayNoteVoices = (multimediaResult: MultimediaResult[]) => {
    const items = multimediaResult.map((file, index) => {
      if (file.tipo === MIME_TYPES.AUDIO) {
        return (
          <RoundedWhiteBaseTemplate shadow={false} key={index}>
            <NoteVoice uriRecord={file.link} width={WIDTH_DIMENSIONS * 0.75} />
          </RoundedWhiteBaseTemplate>
        )
      }
    })
    return items.filter((item) => item)
  }

  const displayDocuments = (multimediaResult: MultimediaResult[]) => {
    const items = multimediaResult.map((file, index) => {
      if (file.tipo === MIME_TYPES.PDF) {
        return (
          <Pressable
            key={index}
            onPress={() => onClickDownload(file.link)}
            style={tw`flex flex-row items-center`}
          >
            <Image
              source={require('../../../../assets/pdf_icon.png')}
              style={{ width: 30, height: 30 }}
            />
            <Gap px="2">
              <Text style={tw`underline ${TEXT_COLORS.ORANGE}`}>file.pdf</Text>
            </Gap>
          </Pressable>
        )
      }
    })
    return items.filter((item) => item)
  }

  return isRending ? (
    <EmptyPublicacionDetalle />
  ) : (
    <View style={tw`p-2`}>
      <RoundedWhiteBaseTemplate shadow={false}>
        <View style={tw`relative`}>
          <PermissionWrapper
            tokenUserOwnerPublication={publicacion?.token_usuario}
          >
            <View style={tw`absolute right-0`}>
              <MenuPublicaciones
                userToken={authToken || ''}
                publicacion={publicacion as Publicacion}
              />
            </View>
          </PermissionWrapper>
        </View>

        <View style={tw`pt-3 px-2 relative z-10`}>
          <View style={tw`z-40`}>
            <DetallePublicador
              nombre={`${publicacion?.first_name} ${publicacion?.last_name}`}
              fecha={publicacion?.ultimo_cambio}
              foto={publicacion?.foto}
            />
          </View>

          <View style={tw`mt-6`}>
            <Carousel
              swipe
              isLooped
              bullets
              style={{
                width: WIDTH_DIMENSIONS * 0.85,
                height: 250,
              }}
            >
              {diplayImagesAndVideos(publicacion?.multimediaResult || [])}
            </Carousel>

            <View style={tw`pt-4`}>
              <CustomText
                style={`text-base font-bold ${TEXT_COLORS.DARK_BLUE}`}
              >
                {publicacion?.titulo || ''}
              </CustomText>
              <Gap py="2">
                <Text>{publicacion?.descripcion}</Text>
              </Gap>
            </View>

            <View style={tw`mt-4`}>
              {displayNoteVoices(publicacion?.multimediaResult || [])}
            </View>
            <View style={tw`mt-4`}>
              {displayDocuments(publicacion?.multimediaResult || [])}
            </View>

            <View style={tw`mx-auto my-2`}>
              <Reacciones item={publicacion} type="Publicacion" />
            </View>
          </View>
        </View>
      </RoundedWhiteBaseTemplate>

      <View>
        <VerticalDivider style="top-0 left-12 w-[2px]" />
        {publicacion?.comentarios?.map((comentario, index) => (
          <TarjetaComentarioPublicacion comentario={comentario} key={index} />
        ))}

        {!isAddingComent && (
          <View style={tw``}>
            <BotonAgregarComentario
              handleClick={() => setIsAddingComent(true)}
            />
          </View>
        )}

        {isAddingComent && (
          <View style={tw`pt-2`}>
            <InputAgregarComentario
              onSend={() => setIsAddingComent(!isAddingComent)}
              nombreUsuario={`${user?.first_name} ${user?.last_name}`}
              tokenUsuario={authToken || ''}
              tokenPublicacion={publicacion?.token || ''}
              tokenNotificacion={publicacion?.token_notificacion}
              fotoUsuario={user?.foto}
              tituloPublicacion={publicacion?.titulo}
            />
          </View>
        )}
      </View>
    </View>
  )
}

export default PublicacionDetalle

=== TarjetaComentarioPublicacion.tsx ===
import * as React from 'react'
import { Text, View, Image } from 'react-native'
import RoundedWhiteBaseTemplate from '../../organismos/RoundedWhiteBaseTemplate'
import tw from 'twrnc'
import { TEXT_COLORS } from '../../../utils/constants'
import { Comentario } from '../../../models/Publicaciones.model'

interface TarjetaComentarioPublicacionProps {
  comentario: Comentario
}

const TarjetaComentarioPublicacion = ({
  comentario,
}: TarjetaComentarioPublicacionProps) => {
  return (
    <RoundedWhiteBaseTemplate shadow={false}>
      <View style={tw`flex flex-row items-center`}>
        <View style={tw`relative px-2 w-2/12 `}>
          <View style={tw`z-40 py-2`}>
            <Image
              source={
                comentario.foto
                  ? { uri: comentario.foto }
                  : require('../../../../assets/user.png')
              }
              style={{ width: 40, height: 45, borderRadius: 400 / 2 }}
              resizeMode="contain"
            />
          </View>
        </View>

        <View style={tw`relative px-2 pr-12 `}>
          <Text
            style={tw`text-sm font-semibold capitalize ${TEXT_COLORS.DARK_BLUE}`}
          >
            {comentario.first_name} {comentario.last_name}
          </Text>

          <Text style={tw`text-sm`}>{comentario.comentario}</Text>
        </View>
      </View>
    </RoundedWhiteBaseTemplate>
  )
}

export default TarjetaComentarioPublicacion

=== RutaComentarios.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Text, View } from 'react-native'
import { capitalize } from '../../../utils/capitalizeText'
import TitleWithDivider from '../../moleculas/TitleWithDivider'
import RoundedWhiteBaseTemplate from '../../organismos/RoundedWhiteBaseTemplate'
import { TEXT_COLORS } from '../../../utils/constants'
import RatingStars from '../../atomos/RatingStars'

interface RutaComentariosProps {
  participantes: any[]
}

const RutaComentarios = ({ participantes }: RutaComentariosProps) => {
  return (
    <RoundedWhiteBaseTemplate shadow={false}>
      <TitleWithDivider label="Comentarios" />
      {participantes && participantes.length > 0 ? (
        participantes.map((participante, index) => {
          if (!participante.comentario) return null
          return (
            <View key={index} style={tw`mb-3`}>
              <View style={tw`flex flex-row items-center`}>
                <Text style={tw`font-semibold ${TEXT_COLORS.DARK_BLUE} pr-4`}>
                  {capitalize(participante.first_name)}{' '}
                  {capitalize(participante.last_name)}
                </Text>
                <RatingStars
                  readonly={true}
                  stars={participante.estrellas || 0}
                  size={15}
                />
              </View>
              <Text style={tw`italic text-black text-opacity-60`}>
                {`"`}
                {participante.comentario}
                {`"`}
              </Text>
            </View>
          )
        })
      ) : (
        <Text
          style={tw`${TEXT_COLORS.GRAY_PLACEHOLDER} italic font-semibold text-base text-center`}
        >
          Aún no hay comentarios para esta ruta
        </Text>
      )}
    </RoundedWhiteBaseTemplate>
  )
}

export default RutaComentarios

=== RutaDescripcion.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Text } from 'react-native'
import TitleWithDivider from '../../moleculas/TitleWithDivider'
import RoundedWhiteBaseTemplate from '../../organismos/RoundedWhiteBaseTemplate'
import { TEXT_COLORS } from '../../../utils/constants'

interface RutaDescripcionProps {
  descripcion: string
}

const RutaDescripcion = ({ descripcion }: RutaDescripcionProps) => {
  return (
    <RoundedWhiteBaseTemplate shadow={false}>
      <TitleWithDivider label="Descripción del evento" />

      <Text style={tw`my-2 ${TEXT_COLORS.DARK_BLUE}`}>{descripcion}</Text>
    </RoundedWhiteBaseTemplate>
  )
}

export default RutaDescripcion

=== RutaDetalleHeader.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Text, View } from 'react-native'
import HeaderRoundedContainer from '../../moleculas/HeaderRoundedContainer'
import SectionTitle from '../../moleculas/SectionTitle'
import { NavigationProp, useNavigation } from '@react-navigation/native'
import { RootStackParamList, Screens } from '../../../models/Screens.types'
import LinkedBadges from '../../moleculas/LinkedBadges'
import { BACKGROUND_COLORS } from '../../../utils/constants'
import Badge from '../../moleculas/Badge'
import Gap from '../../atomos/Gap'
import { EstadoRuta, Ruta } from '../../../models/Rutas'

export const ESTADO_RUTA = {
  CURSO: 'En Curso',
  FINALIZADAS: 'Finalizada',
  DISPONIBLES: 'Disponible',
  NOCUPOS: 'Sin Cupos',
  INSCRITAS: 'inscritas',
  CANCELADA: 'Cancelada',
}
interface RutaDetalleHeaderProps {
  ruta: Ruta
  estado: EstadoRuta
}
const RutaDetalleHeader = ({ ruta, estado }: RutaDetalleHeaderProps) => {
  const navigation =
    useNavigation<NavigationProp<RootStackParamList, Screens>>()

  const getColorBadge = (estado: string) => {
    switch (estado) {
      case ESTADO_RUTA.CURSO:
        return BACKGROUND_COLORS.GREEN_PRIMARY
      case ESTADO_RUTA.DISPONIBLES:
        return BACKGROUND_COLORS.PRIMARY_BLUE
      case ESTADO_RUTA.CANCELADA:
      case ESTADO_RUTA.FINALIZADAS:
        return `bg-black bg-opacity-80`
      case ESTADO_RUTA.INSCRITAS:
        return BACKGROUND_COLORS.GREEN_PRIMARY
      case ESTADO_RUTA.NOCUPOS:
        return BACKGROUND_COLORS.RED
      default:
        return BACKGROUND_COLORS.PRIMARY_BLUE
    }
  }
  const {
    nombre,
    tipoRutaValues: tiposRuta,
    aprobado = false,
    motivo_cancelacion: motivoCancelacion,
  } = ruta
  return (
    <HeaderRoundedContainer>
      <View style={tw`mx-4 mr-8`}>
        <SectionTitle
          text={nombre}
          styleText="text-3xl"
          background={false}
          hasButton={
            aprobado && estado === ESTADO_RUTA.CURSO && ruta?.inscrito
              ? true
              : false
          }
          isRestricted={false}
          buttonIcon={require('../../../../assets/rastreo_icon.png')}
          iconDimension={22}
          handleClickButton={() =>
            navigation.navigate('InicioRastreo', { ruta })
          }
        />
      </View>
      <View style={tw`py-5`}>
        <LinkedBadges etiquetas={tiposRuta as any} tipo="rounded">
          {aprobado ? (
            <Gap px="1">
              <Badge
                name={'estado'}
                label={estado}
                backgroundColor={getColorBadge(estado)}
              />
            </Gap>
          ) : (
            <Gap px="1">
              <Badge
                name={'en_revision'}
                label={'Por aprobar'}
                backgroundColor={BACKGROUND_COLORS.ORANGE}
              />
            </Gap>
          )}
        </LinkedBadges>

        {motivoCancelacion ? (
          <View
            style={tw`mx-6 mt-4 bg-gray-100 rounded-xl px-8 py-4 border-2 border-dashed border-[#c6c6c6]`}
          >
            <Text>{motivoCancelacion}</Text>
          </View>
        ) : null}
      </View>
    </HeaderRoundedContainer>
  )
}

export default RutaDetalleHeader

=== RutaFotos.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { View, Image } from 'react-native'
import RoundedWhiteBaseTemplate from '../../organismos/RoundedWhiteBaseTemplate'
import { WIDTH_DIMENSIONS } from '../../../utils/constants'
import TitleWithDivider from '../../moleculas/TitleWithDivider'
import Carousel from 'react-native-carousel-loop/lib'

const RutaFotos = ({ fotos }: any) => {
  return (
    <RoundedWhiteBaseTemplate shadow={false}>
      <TitleWithDivider label="Galería" />
      <View style={tw`my-4`}>
        <Carousel
          swipe
          bullets
          style={{
            width: WIDTH_DIMENSIONS * 0.86,
            height: 250,
            borderRadius: 20 / 2,
          }}
        >
          {fotos?.map((foto: any, index: number) => (
            <Image
              key={index}
              source={{ uri: foto.link }}
              style={{ width: WIDTH_DIMENSIONS * 0.86, height: 250 }}
            />
          ))}
        </Carousel>
      </View>
    </RoundedWhiteBaseTemplate>
  )
}

export default RutaFotos

=== RutaIndividual.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Text, View } from 'react-native'
import RutaDetalleHeader, { ESTADO_RUTA } from './RutaDetalleHeader'
import RutaFotos from './RutaFotos'
import RutaMapView from './RutaMapView'
import RutaInformacion from './RutaInformacion'
import RutasRequisitos from './RutaRequisitos'
import ButtonPrimary from '../../atomos/ButtonPrimary'
import { BACKGROUND_COLORS } from '../../../utils/constants'
import RutasParticipantes from './RutasParticipantes'
import { useDispatch, useSelector } from 'react-redux'
import { RootState } from '../../../redux/store'
import { EstadoRuta, Ruta } from '../../../models/Rutas'
import {
  aprobarRuta,
  cancelarInscripcionUsuario,
  eliminarRuta,
  getRutaById,
  inscribirUsuarioEnRuta,
} from '../../../lib/services/rutas.services'
import { getEstadoRuta } from '../../../utils/parseRouteState'
import Spinner from '../../atomos/Spinner'
import { NavigationProp, useNavigation } from '@react-navigation/native'
import { RootStackParamList, Screens } from '../../../models/Screens.types'
import { setRutaHasModified } from '../../../redux/ruta'
import RutaColaboracionesModal from '../../organismos/RutaColaboracionesModal'
import MenuRutas from '../../moleculas/MenuRutas'
import RutaDescripcion from './RutaDescripcion'
import RutaPuntosEncuentro from './RutaPuntosEncuentro'
import { usePermissionsNotifications } from '../../../hooks/usePermissionsNotifications'
import EmptyDetalleRuta from '../../organismos/EmptyDetalleRuta'
import AdminValidator from '../AdminValidator'
import RutaComentarios from './RutaComentarios'

const getInformacionPorEstado = (estado: string, inscrito: boolean) => {
  if (inscrito) {
    return {
      background: BACKGROUND_COLORS.ORANGE,
      label: 'Cancelar Inscripción',
      message: '',
    }
  }
  switch (estado) {
    case ESTADO_RUTA.CURSO:
      return {
        background: 'bg-black bg-opacity-20',
        label: 'Inscribirme',
        message: 'La ruta ya ha iniciado, no puede registrarse',
      }
    case ESTADO_RUTA.FINALIZADAS:
      return {
        background: 'bg-black bg-opacity-20',
        label: 'Inscribirme',
        message: 'La ruta ha finalizado, no puede registrarse',
      }
    case ESTADO_RUTA.NOCUPOS:
      return {
        background: 'bg-black bg-opacity-20',
        label: 'Inscribirme',
        message: 'No hay cupos disponibles para esta ruta',
      }
    case ESTADO_RUTA.DISPONIBLES:
      return {
        background: BACKGROUND_COLORS.PRIMARY_BLUE,
        label: 'Inscribirme',
        message: '',
      }
    case ESTADO_RUTA.INSCRITAS:
      return {
        background: BACKGROUND_COLORS.ORANGE,
        label: 'Cancelar inscripción',
        message: '',
      }
    default:
      return {
        background: BACKGROUND_COLORS.GRAY,
        label: 'Inscribirme',
        message: '',
      }
  }
}

interface RutaIndividualProps {
  token: string
}

const RutaIndividual = ({ token }: RutaIndividualProps) => {
  const { authToken, user } = useSelector((state: RootState) => state.user)
  const [isLoading, setIsLoading] = React.useState(false)
  const [ruta, setRuta] = React.useState<Ruta>()
  const [showModal, setShowModal] = React.useState(false)
  const [refresh, setRefresh] = React.useState(false)
  const [colaboraciones, setColaboraciones] = React.useState<string[]>([])
  const { rutaHasModified } = useSelector((state: RootState) => state.ruta)
  const dispatch = useDispatch()
  const navigation =
    useNavigation<NavigationProp<RootStackParamList, Screens>>()
  const estado = getEstadoRuta(ruta?.estado || { prioridad: 5 })
  const propsByState = getInformacionPorEstado(estado, ruta?.inscrito || false)
  const { sendPushNotification } = usePermissionsNotifications()
  const statesNoAllowed: EstadoRuta[] = [
    'En Curso',
    'Cancelada',
    'Finalizada',
    'Cancelada',
  ]

  React.useEffect(() => {
    ;(async () => {
      if (authToken && token) {
        setRuta(await getRutaById(authToken, token))
      }
    })()
  }, [rutaHasModified, refresh])

  const sendNotificationRutaAprobada = async () => {
    if (!authToken || !ruta?.token_notificacion) return
    await sendPushNotification({
      tokens: [ruta?.token_notificacion],
      title: 'Tu ruta ha sido aprobada',
      body: `${user?.first_name} ${user?.last_name} ha aprobado la ruta que propusiste para la comunidad.`,
    })
  }

  const sendNotificationRutaRechazada = async () => {
    if (!authToken || !ruta?.token_notificacion) return
    await sendPushNotification({
      tokens: [ruta?.token_notificacion],
      title: 'Tu ruta ha sido rechazada',
      body: `${user?.first_name} ${user?.last_name} ha rechazado la solicitudd de la ruta ${ruta?.nombre}`,
    })
  }

  const handleAprobar = async () => {
    setIsLoading(true)
    if (authToken) {
      await aprobarRuta(authToken, token)
      dispatch(setRutaHasModified({ rutaHasModified: !rutaHasModified }))
      await sendNotificationRutaAprobada()
      navigation.navigate('Rutas')
    }
    setIsLoading(false)
  }

  const handleRechazar = async () => {
    setIsLoading(true)
    if (authToken) {
      await eliminarRuta(authToken, token)
      dispatch(setRutaHasModified({ rutaHasModified: !rutaHasModified }))
      await sendNotificationRutaRechazada()
      navigation.navigate('Rutas')
    }
    setIsLoading(false)
  }

  const sendRegistro = async () => {
    setIsLoading(true)
    if (authToken) {
      if (!ruta?.inscrito && estado !== 'Sin Cupos') {
        await inscribirUsuarioEnRuta(authToken, token, colaboraciones)
      } else {
        await cancelarInscripcionUsuario(authToken, token)
      }
    }
    dispatch(setRutaHasModified({ rutaHasModified: !rutaHasModified }))
    setIsLoading(false)
  }

  const handleRegistro = async () => {
    if (statesNoAllowed.includes(estado)) return
    if (
      ruta?.colaboraciones &&
      ruta?.colaboraciones.length > 0 &&
      !ruta?.inscrito
    ) {
      setShowModal(true)
      return
    }
    await sendRegistro()
  }

  const handleAddColaboraciones = (token: string) => {
    if (!colaboraciones.includes(token)) {
      setColaboraciones([...colaboraciones, token])
    } else {
      setColaboraciones(colaboraciones.filter((c) => c !== token))
    }
  }

  return !ruta ? (
    <EmptyDetalleRuta />
  ) : (
    <View style={tw`px-2 mb-4`}>
      {showModal ? (
        <RutaColaboracionesModal
          colaboraciones={ruta.colaboracionesValues as any}
          visible={showModal}
          setVisible={setShowModal}
          handleAdd={handleAddColaboraciones}
          inscribirUser={sendRegistro}
        />
      ) : null}
      <View style={tw`relative`}>
        <RutaDetalleHeader ruta={ruta} estado={estado} />
        <View style={tw`absolute right-4 top-8`}>
          <MenuRutas ruta={ruta} onRefresh={() => setRefresh(!refresh)} />
        </View>
      </View>
      <RutaInformacion
        fecha={ruta?.fecha_inicio as Date}
        lugar={ruta.lugar}
        cupos={ruta.cupos_disponibles || 0}
        registrados={ruta.participantes?.length || 0}
      />
      <RutaDescripcion descripcion={ruta?.descripcion} />
      <RutaFotos fotos={ruta.fotos} />
      <RutaMapView ubicacion={ruta.ubicacion} />
      {ruta.grupos_encuentro && ruta.grupos_encuentro.length > 0 ? (
        <RutaPuntosEncuentro grupos={ruta.grupos_encuentro || []} />
      ) : null}
      {ruta.requisitosValues && ruta.requisitosValues?.length > 0 ? (
        <RutasRequisitos requisitos={ruta.requisitosValues} />
      ) : null}
      <RutasParticipantes participantes={ruta.participantes || []} />

      <AdminValidator>
        <RutaComentarios participantes={ruta.participantes || []} />
      </AdminValidator>
      {ruta.aprobado ? (
        isLoading ? (
          <Spinner />
        ) : (
          <>
            <ButtonPrimary
              label={propsByState.label}
              style={`${propsByState.background} w-11/12 py-2 mx-auto rounded-3xl my-4`}
              handleClick={handleRegistro}
            />
            <Text style={tw`text-red-800 text-xs text-center`}>
              {propsByState.message}
            </Text>
          </>
        )
      ) : isLoading ? (
        <Spinner />
      ) : (
        <View style={tw`flex flex-row justify-center items-center`}>
          <ButtonPrimary
            label="Rechazar"
            style={`${BACKGROUND_COLORS.ORANGE} bg-opacity-80 mx-2 my-4 py-2 px-8 rounded-3xl`}
            icon={require('../../../../assets/close.png')}
            handleClick={handleRechazar}
            iconDimension={18}
          />
          <ButtonPrimary
            label="Aprobar"
            style={`${BACKGROUND_COLORS.PRIMARY_BLUE} mx-2 my-4 py-2 px-8 rounded-3xl`}
            handleClick={handleAprobar}
            icon={require('../../../../assets/check_white_icon.png')}
            iconDimension={18}
          />
        </View>
      )}
    </View>
  )
}

export default RutaIndividual

=== RutaInformacion.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Text, View, Image } from 'react-native'
import TitleWithDivider from '../../moleculas/TitleWithDivider'
import RoundedWhiteBaseTemplate from '../../organismos/RoundedWhiteBaseTemplate'
import { TEXT_COLORS } from '../../../utils/constants'
import { getFecha } from '../../../utils/parseDates'

interface RutaInformacionProps {
  fecha: Date
  lugar: string
  cupos: number
  registrados: number
}

const RutaInformacion = ({
  fecha,
  lugar,
  cupos,
  registrados,
}: RutaInformacionProps) => {
  const totalCupos = cupos + registrados
  const getColorCupos = (cupos: number) => {
    if (cupos < 10) {
      return TEXT_COLORS.RED
    }
    return TEXT_COLORS.GREEN_PRIMARY
  }
  return (
    <RoundedWhiteBaseTemplate shadow={false}>
      <TitleWithDivider label="Información" />

      <View style={tw`flex flex-row items-center my-4`}>
        <View style={tw`w-1/12`}>
          <Image
            source={require('../../../../assets/calendar_blue_icon.png')}
            style={{ width: 20, height: 20 }}
          />
        </View>
        <View style={tw`w-11/12 ml-4`}>
          <Text style={tw`${TEXT_COLORS.DARK_BLUE}`}>
            {getFecha(fecha as any)}
          </Text>
          <Text style={tw`${TEXT_COLORS.DARK_BLUE}`}>{lugar}</Text>
        </View>
      </View>

      <View style={tw`flex flex-row items-center my-4`}>
        <View style={tw`w-1/12`}>
          <Image
            source={require('../../../../assets/comunidad_icon.png')}
            style={{ width: 25, height: 25 }}
          />
        </View>
        <View style={tw`w-11/12 ml-4`}>
          <Text style={tw`${TEXT_COLORS.DARK_BLUE}`}>
            {totalCupos} Cupos planificados
          </Text>
          <Text style={tw`${getColorCupos(cupos)}`}>
            {cupos}{' '}
            {cupos === 1
              ? 'disponible'
              : cupos < 1 || cupos > 1
              ? 'disponibles'
              : ''}
          </Text>
        </View>
      </View>
    </RoundedWhiteBaseTemplate>
  )
}

export default RutaInformacion

=== RutaMapView.tsx ===
import * as React from 'react'
import RoundedWhiteBaseTemplate from '../../organismos/RoundedWhiteBaseTemplate'
import TitleWithDivider from '../../moleculas/TitleWithDivider'
import MapViewSelectUbication from '../../moleculas/MapViewSelectUbication'
import { WIDTH_DIMENSIONS } from '../../../utils/constants'
import { RutaCoordinadas } from '../../../models/Rutas'

interface RutaMapViewProps {
  ubicacion: RutaCoordinadas
}

const RutaMapView = ({ ubicacion }: RutaMapViewProps) => {
  return (
    <RoundedWhiteBaseTemplate shadow={false}>
      <TitleWithDivider label="Ruta" />
      {ubicacion ? (
        <MapViewSelectUbication
          value={ubicacion}
          height={300}
          width={WIDTH_DIMENSIONS * 0.86}
        />
      ) : null}
    </RoundedWhiteBaseTemplate>
  )
}

export default RutaMapView

=== RutaPuntosEncuentro.tsx ===
import * as React from 'react'
import { Image, Text } from 'react-native'
import Gap from '../../atomos/Gap'
import TitleWithDivider from '../../moleculas/TitleWithDivider'
import RoundedWhiteBaseTemplate from '../../organismos/RoundedWhiteBaseTemplate'

interface RutaPuntosEncuentroProps {
  grupos: any[]
}

const RutaPuntosEncuentro = ({ grupos }: RutaPuntosEncuentroProps) => {
  return (
    <RoundedWhiteBaseTemplate shadow={false}>
      <TitleWithDivider label="Puntos de encuentro" />
      {grupos?.map((grupo, index) => (
        <Gap py="1" styles="flex flex-row items-center" key={index}>
          <Image
            source={require('../../../../assets/grupos_ubicacion_icon.png')}
            style={{ width: 30, height: 30, marginRight: 8 }}
          />
          <Text>
            {grupo.nombre}
            {': '} {grupo.lugar_encuentro}
          </Text>
        </Gap>
      ))}
    </RoundedWhiteBaseTemplate>
  )
}

export default RutaPuntosEncuentro

=== RutaRequisitos.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Image, Text, View } from 'react-native'
import RoundedWhiteBaseTemplate from '../../organismos/RoundedWhiteBaseTemplate'
import TitleWithDivider from '../../moleculas/TitleWithDivider'
import Gap from '../../atomos/Gap'
import { catalogs } from '../../../models/Rutas'

interface RutasRequisitosProps {
  requisitos: any
}

const RutasRequisitos = ({ requisitos }: RutasRequisitosProps) => {
  return (
    <RoundedWhiteBaseTemplate shadow={false}>
      <TitleWithDivider label="Requisitos" />
      <View style={tw`px-1 py-2`}>
        {requisitos?.map((requisito: catalogs, index: number) => (
          <Gap py="1" styles="flex flex-row items-center" key={index}>
            <Image
              source={require('../../../../assets/check_filled_icon.png')}
              style={{ width: 15, height: 15, marginRight: 8 }}
            />
            <Text>{requisito.nombre}</Text>
          </Gap>
        ))}
      </View>
    </RoundedWhiteBaseTemplate>
  )
}

export default RutasRequisitos

=== RutasParticipantes.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import TitleWithDivider from '../../moleculas/TitleWithDivider'
import RoundedWhiteBaseTemplate from '../../organismos/RoundedWhiteBaseTemplate'
import { TEXT_COLORS } from '../../../utils/constants'
import { Pressable, Text } from 'react-native'
import ParticipantesRutaModal from '../../organismos/ParticipantesRutaModal'
import { User } from '../../../models/User'
import ParticipantesFotoMiniatura from '../../moleculas/ParticipantesFotoMiniatura'

interface RutasParticipantesProps {
  participantes: Partial<User>[]
}

const RutasParticipantes = ({ participantes }: RutasParticipantesProps) => {
  const [showModal, setShowModal] = React.useState(false)
  const [listaParticipantes, setlistaParticipantes] =
    React.useState(participantes)

  React.useEffect(() => {
    setlistaParticipantes(participantes)
  }, [participantes])

  return (
    <>
      <RoundedWhiteBaseTemplate shadow={false}>
        <TitleWithDivider label="Participantes" />
        <Pressable style={tw`mx-4 my-2`} onPress={() => setShowModal(true)}>
          {listaParticipantes.length > 0 ? (
            <ParticipantesFotoMiniatura ciclistas={participantes} />
          ) : (
            <Text
              style={tw`${TEXT_COLORS.GRAY_PLACEHOLDER} italic font-semibold text-base`}
            >
              No hay ciclistas registrados en esta ruta
            </Text>
          )}
        </Pressable>
      </RoundedWhiteBaseTemplate>
      {showModal && (
        <ParticipantesRutaModal
          visible={showModal}
          setVisible={setShowModal}
          participantes={participantes}
        />
      )}
    </>
  )
}

export default RutasParticipantes

=== ConsejoFormulario.tsx ===
import { Formik } from 'formik'
import * as React from 'react'
import { ImageSourcePropType, ScrollView, Text } from 'react-native'
import { useDispatch, useSelector } from 'react-redux'
import {
  agregarConsejo,
  editarConsejo,
} from '../../../lib/services/consejos.services'
import { Consejo } from '../../../models/Consejo.model'
import { RootState } from '../../../redux/store'
import { ConsejoValidationSchema } from '../../../schemas/ConsejoSchema'
import { BACKGROUND_COLORS, TEXT_COLORS } from '../../../utils/constants'
import Input from '../../moleculas/Input'
import FieldFormulario from '../../moleculas/FieldFormulario'
import HeaderScreen from '../../moleculas/HeaderScreen'
import GalleryButton from '../../moleculas/GalleryButton'
import { RootStackParamList, Screens } from '../../../models/Screens.types'
import SecondaryButton from '../../atomos/SecondaryButton'
import Spinner from '../../atomos/Spinner'
import { NavigationProp, useNavigation } from '@react-navigation/native'
import { setHasModified } from '../../../redux/consejo'
import tw from 'twrnc'
import { getCiclistasToken } from '../../../lib/services/notifications.services'
import { usePermissionsNotifications } from '../../../hooks/usePermissionsNotifications'
import { capitalize } from '../../../utils/capitalizeText'

interface ConsejoFormularioProps {
  consejoProp?: Consejo
}

const ConsejoForm = ({ consejoProp }: ConsejoFormularioProps) => {
  const { authToken, user } = useSelector((state: RootState) => state.user)
  const { hasModified } = useSelector((state: RootState) => state.consejo)
  const { sendPushNotification } = usePermissionsNotifications()
  const [isLoading, setIsLoading] = React.useState(false)
  const dispatch = useDispatch()
  const navigation =
    useNavigation<NavigationProp<RootStackParamList, Screens>>()

  const imageSourceUri = { uri: consejoProp?.imagen } as ImageSourcePropType

  const initialValues = {
    informacion: consejoProp?.informacion || '',
    imagen: consejoProp?.imagen ? imageSourceUri : undefined,
  }

  const handleSubmit = async (props: Consejo) => {
    setIsLoading(true)
    if (consejoProp) {
      await editarConsejo(props, authToken as string, consejoProp)
    } else {
      await agregarConsejo(props, authToken as string)
    }
    const tokens = await getCiclistasToken(authToken || '')
    await sendPushNotification({
      tokens,
      title: '¡Nuevo consejo del día!',
      body: `${capitalize(user?.first_name)} ${capitalize(
        user?.last_name
      )} ha agregado un nuevo consejo para la comunidad. ¡No te lo pierdas!`,
    })
    dispatch(setHasModified({ hasModified: !hasModified }))
    navigation.navigate('Inicio')
    setIsLoading(false)
  }

  return (
    <ScrollView showsVerticalScrollIndicator={false} style={tw`px-2`}>
      <HeaderScreen
        title="Consejo del día"
        message="¡Recomiendaciones para la comunidad!"
        srcImage={require('../../../../assets/consejo_icon.png')}
      />
      <Formik
        initialValues={initialValues}
        validationSchema={ConsejoValidationSchema}
        onSubmit={handleSubmit}
      >
        {({ handleSubmit, values, setFieldValue }) => (
          <>
            <FieldFormulario>
              <Input
                multiline
                text="Informacion"
                type="none"
                name="informacion"
                textAlignVertical="top"
                placeholder="Agrega información relevante para la comunidad"
                numberOfLines={6}
                value={values.informacion}
                setValue={(value) => setFieldValue('informacion', value)}
              />
            </FieldFormulario>

            <FieldFormulario>
              <Text style={tw`${TEXT_COLORS.DARK_BLUE} font-bold text-sm pl-2`}>
                Imagen
              </Text>
              <FieldFormulario>
                <GalleryButton
                  field="imagen"
                  icono={require('../../../../assets/gallery_icon.png')}
                  imagen={values.imagen as ImageSourcePropType}
                />
              </FieldFormulario>
            </FieldFormulario>

            {isLoading ? (
              <Spinner />
            ) : (
              <SecondaryButton
                label="Publicar"
                handleClick={handleSubmit}
                style={`${BACKGROUND_COLORS.PRIMARY_BLUE} w-6/12 mx-auto mt-6`}
              />
            )}
          </>
        )}
      </Formik>
    </ScrollView>
  )
}

export default ConsejoForm

=== NovedadFormulario.tsx ===
import { NavigationProp, useNavigation } from '@react-navigation/native'
import { Formik } from 'formik'
import * as React from 'react'
import { Text, ScrollView, ImageSourcePropType } from 'react-native'
import { useDispatch, useSelector } from 'react-redux'
import tw from 'twrnc'
import { agregarNovedad } from '../../../lib/services/novedades.services'
import { NovedadInterface } from '../../../models/Novedad.model'
import { RootStackParamList, Screens } from '../../../models/Screens.types'
import { setNovedadHasModified } from '../../../redux/novedad'
import { RootState } from '../../../redux/store'
import { PublicidadValidationSchema } from '../../../schemas/PublicidadSchema'
import { BACKGROUND_COLORS, TEXT_COLORS } from '../../../utils/constants'
import GalleryButton from '../../moleculas/GalleryButton'
import Input from '../../moleculas/Input'
import SecondaryButton from '../../atomos/SecondaryButton'
import Spinner from '../../atomos/Spinner'
import FieldFormulario from '../../moleculas/FieldFormulario'
import HeaderScreen from '../../moleculas/HeaderScreen'

const PublicidadFormulario = () => {
  const [isLoading, setIsLoading] = React.useState(false)
  const { authToken } = useSelector((state: RootState) => state.user)
  const { novedadHasModified } = useSelector(
    (state: RootState) => state.novedad
  )
  const dispatch = useDispatch()
  const navigation =
    useNavigation<NavigationProp<RootStackParamList, Screens>>()

  const initialValues = {
    titulo: '',
    imagen: undefined,
    descripcion: '',
    descripcion_corta: '',
    datos_contacto: {
      nombre: '',
      celular: '',
      direccion: '',
    },
  }

  const handleSubmit = async (props: NovedadInterface) => {
    setIsLoading(true)
    await agregarNovedad(authToken || '', props)
    setIsLoading(false)
    dispatch(setNovedadHasModified({ novedadHasModified: !novedadHasModified }))
    navigation.navigate('Inicio')
  }

  return (
    <ScrollView showsVerticalScrollIndicator={false} style={tw`px-2 mb-8`}>
      <HeaderScreen
        title="Novedades"
        message="¡Difunde información importante a la comunidad!"
        srcImage={require('../../../../assets/publicidad_icon.png')}
      />
      <Formik
        initialValues={initialValues}
        validationSchema={PublicidadValidationSchema}
        onSubmit={handleSubmit}
      >
        {({ handleSubmit, values, setFieldValue }) => (
          <>
            <FieldFormulario>
              <Input
                text="Título"
                type="none"
                name="titulo"
                value={values.titulo}
                setValue={(value) => setFieldValue('titulo', value)}
                placeholder="Escribe un título..."
              />
            </FieldFormulario>

            <FieldFormulario>
              <Input
                text="Descripcion Corta"
                type="none"
                name="descripcion_corta"
                value={values.descripcion_corta}
                setValue={(value) => setFieldValue('descripcion_corta', value)}
                placeholder="Agrega una breve descripción..."
              />
            </FieldFormulario>

            <FieldFormulario>
              <Text style={tw`${TEXT_COLORS.DARK_BLUE} font-bold text-sm pl-2`}>
                Imagen
              </Text>
              <FieldFormulario>
                <GalleryButton
                  field="imagen"
                  icono={require('../../../../assets/gallery_icon.png')}
                  imagen={values.imagen as ImageSourcePropType}
                />
              </FieldFormulario>
            </FieldFormulario>

            <FieldFormulario>
              <Input
                multiline
                text="Descripción"
                type="none"
                name="descripcion"
                placeholder="Agrega una descripción completa..."
                numberOfLines={4}
                value={values.descripcion}
                setValue={(value) => setFieldValue('descripcion', value)}
              />
            </FieldFormulario>

            <FieldFormulario>
              <Text style={tw`${TEXT_COLORS.DARK_BLUE} font-bold text-sm pl-2`}>
                Datos del contacto
                <Text
                  style={tw`${TEXT_COLORS.DARK_GRAY} text-opacity-40 font-bold text-xs pl-2`}
                >
                  {` `} (Esta sección es opcional)
                </Text>
              </Text>
              <Input
                type="none"
                name="nombre"
                placeholder="Nombre"
                value={values.nombre}
                setValue={(value) => setFieldValue('nombre', value)}
              />
              <Input
                type="none"
                name="celular"
                placeholder="Celular"
                value={values.celular}
                setValue={(value) => setFieldValue('celular', value)}
              />
              <Input
                type="none"
                name="direcion"
                placeholder="Dirección"
                value={values.direccion}
                setValue={(value) => setFieldValue('direccion', value)}
              />
            </FieldFormulario>

            {isLoading ? (
              <Spinner />
            ) : (
              <SecondaryButton
                label="Publicar"
                handleClick={handleSubmit}
                style={`${BACKGROUND_COLORS.PRIMARY_BLUE} w-6/12 mx-auto mt-6`}
              />
            )}
          </>
        )}
      </Formik>
    </ScrollView>
  )
}

export default PublicidadFormulario

=== PerfilForm.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Text, View } from 'react-native'
import { ScrollView } from 'react-native-gesture-handler'
import HeaderScreen from '../../moleculas/HeaderScreen'
import { Formik } from 'formik'
import FieldFormulario from '../../moleculas/FieldFormulario'
import Input from '../../moleculas/Input'
import {
  BACKGROUND_COLORS,
  generosCatalog,
  nivelesCatalog,
  TEXT_COLORS,
} from '../../../utils/constants'
import GalleryButton from '../../moleculas/GalleryButton'
import Gap from '../../atomos/Gap'
import Ruler from '../../atomos/Ruler'
import SelectCreatableBatches from '../../moleculas/SelectCreatableBatches'
import { useSelector } from 'react-redux'
import { RootState } from '../../../redux/store'
import { getTiposRuta } from '../../../lib/services/rutas.services'
import SecondaryButton from '../../atomos/SecondaryButton'
import RoundedSelectInput from '../../../../RoudedSelectInput'
import RoundedGallery from '../../moleculas/RoundedGallery'
import { usuarioValidationSchema } from '../../../schemas/usuarioValidationSchema'
import { enviarDatosUsuarios } from '../../../lib/services/user.services'
import Spinner from '../../atomos/Spinner'
import { NavigationProp, useNavigation } from '@react-navigation/native'
import { RootStackParamList, Screens } from '../../../models/Screens.types'

const PerfilForm = ({ datosPerfil }: any) => {
  const [tiposRuta, setTiposRuta] = React.useState([])
  const { authToken, user } = useSelector((state: RootState) => state.user)
  const [isLoading, setIsLoading] = React.useState(false)
  const navigation =
    useNavigation<NavigationProp<RootStackParamList, Screens>>()

  const initialValues = {
    nombre: datosPerfil?.first_name || '',
    apellido: datosPerfil?.last_name || '',
    edad: datosPerfil?.edad || undefined,
    usuario: datosPerfil?.username || '',
    telefono: datosPerfil?.telefono || '',
    foto: datosPerfil?.foto || undefined,
    email: datosPerfil?.email || '',
    genero: datosPerfil?.genero || '',
    tipo: datosPerfil?.tipo || '',
    marca: datosPerfil?.marca || '',
    codigo: datosPerfil?.codigo || '',
    foto_bicicleta: datosPerfil?.foto_bicicleta || '',
    peso: datosPerfil?.peso || undefined,
    nivel: datosPerfil?.nivel || '',
    rutas_interes: datosPerfil?.rutas_interes || [],
  }

  React.useEffect(() => {
    ;(async function () {
      authToken && setTiposRuta(await getTiposRuta(authToken))
    })()
  }, [])

  const handleSubmit = async (props: any) => {
    setIsLoading(true)
    if (authToken) {
      await enviarDatosUsuarios(authToken, props)
    }
    navigation.navigate('Perfil', { userToken: user?.id_usuario || '' })

    setIsLoading(false)
  }

  return (
    <ScrollView showsVerticalScrollIndicator={false} style={tw`px-2 mb-8`}>
      <HeaderScreen
        title="Perfil"
        message="¡Presentate a la comunidad!"
        srcImage={require('../../../../assets/ciclista.png')}
      />

      <Formik
        initialValues={initialValues}
        validationSchema={usuarioValidationSchema}
        onSubmit={handleSubmit}
      >
        {({ handleSubmit, values, setFieldValue }) => (
          <>
            <FieldFormulario>
              <RoundedGallery
                field="foto"
                icono={require('../../../../assets/gallery_icon.png')}
                handleChange={(value) => setFieldValue('foto', value)}
                foto={values.foto}
              />

              <Gap py="1">
                <Input
                  text="Nombre"
                  type="none"
                  name="nombre"
                  value={values.nombre}
                  setValue={(value) => setFieldValue('nombre', value)}
                  placeholder="Nombre..."
                />
              </Gap>
              <Gap py="1">
                <Input
                  text="Apellido"
                  type="none"
                  name="apellido"
                  value={values.apellido}
                  setValue={(value) => setFieldValue('apellido', value)}
                  placeholder="Apellido..."
                />
              </Gap>

              <Gap py="3">
                <Input
                  text="Correo Electrónico"
                  type="none"
                  name="email"
                  value={values.email}
                  setValue={(value) => setFieldValue('email', value)}
                  placeholder="alguien@ejemplo.com"
                />
              </Gap>

              <Gap py="1">
                <Input
                  text="Usuario"
                  type="none"
                  name="usuario"
                  value={values.usuario}
                  setValue={(value) => setFieldValue('usuario', value)}
                  placeholder="username"
                />
              </Gap>

              <Gap py="3">
                <Input
                  text="Telefono"
                  type="telephoneNumber"
                  name="telefono"
                  value={values.telefono}
                  setValue={(value) => setFieldValue('telefono', value)}
                  placeholder="telefono"
                />
              </Gap>

              <Ruler style="w-10/12 mx-auto bg-[#e6e6e6] my-4" />

              <Gap py="1">
                <Input
                  text="Edad"
                  type="none"
                  name="edad"
                  value={values.edad}
                  setValue={(value) => setFieldValue('edad', value)}
                  placeholder="Edad..."
                />
              </Gap>

              <Gap py="1">
                <Text
                  style={tw`${TEXT_COLORS.DARK_BLUE} font-bold text-sm pl-2`}
                >
                  Género
                </Text>
                <RoundedSelectInput
                  values={generosCatalog}
                  setValuesSelected={(value) => setFieldValue('genero', value)}
                  placeholder="Femenino, Masculino..."
                  selectedValue={values.genero}
                />
              </Gap>

              <Gap py="3">
                <Text
                  style={tw`${TEXT_COLORS.DARK_BLUE} font-bold text-sm pl-2`}
                >
                  Peso
                </Text>
                <Input
                  type="none"
                  name="peso"
                  value={values.peso}
                  setValue={(value) => setFieldValue('peso', value)}
                  placeholder="120kg..."
                />
                <Text
                  style={tw`font-normal text-xs pl-2 text-black text-opacity-40`}
                >
                  Es imporantante que agregues tu peso para poder calcular las
                  calorías quemadas durante tus rutas
                </Text>
              </Gap>

              <Ruler style="w-10/12 mx-auto bg-[#e6e6e6] my-4" />

              <Gap py="1">
                <Text
                  style={tw`${TEXT_COLORS.DARK_BLUE} font-bold text-sm pl-2 pb-1`}
                >
                  Rutas de interés
                </Text>
                <SelectCreatableBatches
                  values={tiposRuta}
                  selectedValues={values.rutas_interes}
                  setValuesSelected={(tipo) => {
                    const exists = values.rutas_interes?.find(
                      (type: any) => type === tipo
                    )
                    if (!exists) {
                      setFieldValue('rutas_interes', [
                        ...(values.rutas_interes || []),
                        tipo,
                      ])
                    }
                  }}
                  deleteValue={(tipo) => {
                    setFieldValue('rutas_interes', [
                      ...(values.rutas_interes || []).filter(
                        (m: any) => m !== tipo
                      ),
                    ])
                  }}
                  placeholder="Montaña, Carretera..."
                  field={'rutas_interes'}
                />
              </Gap>

              <Gap py="3">
                <Text
                  style={tw`${TEXT_COLORS.DARK_BLUE} font-bold text-sm pl-2 pb-2`}
                >
                  Nivel
                </Text>

                <RoundedSelectInput
                  values={nivelesCatalog}
                  setValuesSelected={(value) => setFieldValue('nivel', value)}
                  placeholder="Básico, Intermedio..."
                  selectedValue={values.nivel}
                />
              </Gap>

              <Ruler style="w-10/12 mx-auto bg-[#e6e6e6] my-4" />

              <Gap py="1">
                <Text
                  style={tw`${TEXT_COLORS.DARK_BLUE} font-bold text-sm pl-2 pb-1`}
                >
                  Modelo de bicicleta
                </Text>
                <Input
                  type="none"
                  name="tipo"
                  value={values.tipo}
                  setValue={(value) => setFieldValue('tipo', value)}
                  placeholder="Tipo..."
                />
                <Input
                  type="none"
                  name="marca"
                  value={values.marca}
                  setValue={(value) => setFieldValue('marca', value)}
                  placeholder="Marca..."
                />
                <Input
                  type="none"
                  name="codigo"
                  value={values.codigo}
                  setValue={(value) => setFieldValue('codigo', value)}
                  placeholder="Código..."
                />
                <FieldFormulario>
                  <GalleryButton
                    field="foto_bicicleta"
                    icono={require('../../../../assets/gallery_icon.png')}
                    imagen={
                      typeof values.foto_bicicleta === 'string'
                        ? values.foto_bicicleta
                          ? { uri: values.foto_bicicleta }
                          : undefined
                        : values.foto_bicicleta
                    }
                  />
                </FieldFormulario>
              </Gap>
              {isLoading ? (
                <Spinner />
              ) : (
                <View style={tw`w-6/12 mx-auto mt-6`}>
                  <SecondaryButton
                    label="Guardar"
                    handleClick={handleSubmit}
                    style={BACKGROUND_COLORS.PRIMARY_BLUE}
                  />
                </View>
              )}
            </FieldFormulario>
          </>
        )}
      </Formik>
    </ScrollView>
  )
}

export default PerfilForm

=== PublicacionContenidoFormulario.tsx ===
import { useFormikContext } from 'formik'
import * as React from 'react'
import { Text, View } from 'react-native'
import {
  MultimediaResult,
  Publicacion,
} from '../../../models/Publicaciones.model'
import {
  BACKGROUND_COLORS,
  etiquetasPublicaciones,
  MIME_TYPES,
  TEXT_COLORS,
} from '../../../utils/constants'
import Input from '../../moleculas/Input'
import SecondaryButton from '../../atomos/SecondaryButton'
import FieldFormulario from '../../moleculas/FieldFormulario'
import tw from 'twrnc'
import SelectCreatableBatches from '../../moleculas/SelectCreatableBatches'
import GalleryMultiImages from '../../organismos/GalleryMultiImages'
import CreatableAudioRecord from '../../organismos/CreatableAudioRecord'
import { Audio } from 'expo-av'
import Spinner from '../../atomos/Spinner'

interface PublicacionContenidoProps {
  isSubmiting: boolean
  isEdit: boolean
}

const PublicacionContenidoFormulario = ({
  isSubmiting,
  isEdit,
}: PublicacionContenidoProps) => {
  const { values, setFieldValue, handleSubmit } =
    useFormikContext<Publicacion>()

  React.useEffect(() => {
    if (isEdit) {
      const audios = values.multimedia?.filter((file) => {
        const fileResult = file as unknown as MultimediaResult
        return fileResult.tipo === MIME_TYPES.AUDIO
      })
      setFieldValue('audios', audios)
    }
  }, [])

  const addAudio = (audio: Audio.Recording) => {
    const { audios } = values
    setFieldValue('audios', [...(audios || []), audio])
  }

  const deleteAudio = (uri: string) => {
    const { audios } = values
    setFieldValue('audios', [
      ...(audios || []).filter((audio) => {
        if (isEdit) {
          const audioResult = audio as unknown as MultimediaResult
          return audioResult.link !== uri
        } else {
          return audio._uri !== uri
        }
      }),
    ])
  }

  const addEtiquetas = (value: string) => {
    const exists = values.etiquetas.find((etiqueta) => etiqueta === value)
    if (!exists) {
      const { etiquetas } = values
      setFieldValue('etiquetas', [...(etiquetas || []), value])
    }
  }

  const deleteEtiqueta = (value: string) => {
    const { etiquetas } = values
    setFieldValue('etiquetas', [
      ...(etiquetas || []).filter((m) => m !== value),
    ])
  }

  return (
    <>
      <FieldFormulario>
        <Input
          text="Título"
          type="none"
          name="titulo"
          value={values.titulo}
          setValue={(value) => setFieldValue('titulo', value)}
          placeholder="Escribe un título..."
        />
      </FieldFormulario>

      <FieldFormulario>
        <Text style={tw`${TEXT_COLORS.DARK_BLUE} font-bold text-sm pl-2`}>
          Etiquetas
        </Text>
        <SelectCreatableBatches
          values={etiquetasPublicaciones}
          selectedValues={values.etiquetas}
          setValuesSelected={addEtiquetas}
          deleteValue={deleteEtiqueta}
          placeholder="Recomendaciones, Ofertas..."
          field={'etiquetas'}
        />
      </FieldFormulario>

      <FieldFormulario>
        <Input
          multiline
          numberOfLines={6}
          text="Descripción"
          type="none"
          name="descripcion"
          value={values.descripcion}
          textAlignVertical="top"
          stylesInput="pt-2"
          setValue={(value) => setFieldValue('descripcion', value)}
          placeholder="Agrega una descripción..."
        />
      </FieldFormulario>

      <FieldFormulario>
        <Text style={tw`${TEXT_COLORS.DARK_BLUE} font-bold text-sm pl-2`}>
          Multimedia
        </Text>
        <GalleryMultiImages
          field="multimedia"
          setFieldValue={setFieldValue}
          values={values.multimedia}
          allowedFiles={['image/*', 'application/pdf', 'video/*']}
          icon={require('../../../../assets/multimedia.png')}
          placeholder="Puedes agregar imágenes / videos / audios o archivos"
        />
      </FieldFormulario>

      <FieldFormulario>
        <Text style={tw`${TEXT_COLORS.DARK_BLUE} font-bold text-sm pl-2`}>
          Audios
        </Text>
        <CreatableAudioRecord
          field="audios"
          setField={addAudio}
          values={values.audios}
          deleteValue={deleteAudio}
        />
      </FieldFormulario>

      {isSubmiting ? (
        <Spinner />
      ) : (
        <View style={tw`flex flex-row justify-center items-center my-6`}>
          <SecondaryButton
            label={isEdit ? 'Guardar' : 'Publicar'}
            handleClick={handleSubmit}
            style={`${BACKGROUND_COLORS.ORANGE} w-48 shadow-sm`}
          />
        </View>
      )}
    </>
  )
}

export default PublicacionContenidoFormulario

=== PublicacionFormularioTemplate.tsx ===
import { NavigationProp, useNavigation } from '@react-navigation/native'
import { Formik } from 'formik'
import * as React from 'react'
import { ScrollView } from 'react-native-gesture-handler'
import { useDispatch, useSelector } from 'react-redux'
import tw from 'twrnc'
import { usePermissionsNotifications } from '../../../hooks/usePermissionsNotifications'
import { getAllTokens } from '../../../lib/services/notifications.services'
import {
  agregarPublicacion,
  editarPublicacion,
} from '../../../lib/services/publicaciones.services'
import { Publicacion } from '../../../models/Publicaciones.model'
import { RootStackParamList, Screens } from '../../../models/Screens.types'
import { setPublicacionHasModified } from '../../../redux/publicacion'
import { RootState } from '../../../redux/store'
import { PublicacionValidationSchema } from '../../../schemas/PublicacionSchema'
import { capitalize } from '../../../utils/capitalizeText'
import HeaderScreen from '../../moleculas/HeaderScreen'
import PublicacionContenido from './PublicacionContenidoFormulario'

interface PublicacionFormularioProps {
  Prop?: Publicacion
}

const PublicacionFormularioTemplate = ({
  Prop,
}: PublicacionFormularioProps) => {
  const [isLoading, setIsLoading] = React.useState(false)
  const [publicacionProp, setpublicacionProp] = React.useState<Publicacion>()
  const { authToken, user } = useSelector((state: RootState) => state.user)
  const navigation =
    useNavigation<NavigationProp<RootStackParamList, Screens>>()
  const { publicacionHasModified } = useSelector(
    (state: RootState) => state.publicacion
  )
  const { sendPushNotification } = usePermissionsNotifications()
  const dispatch = useDispatch()

  React.useEffect(() => {
    setpublicacionProp(Prop)
  }, [])

  const initialValues = {
    titulo: publicacionProp?.titulo || '',
    etiquetas: publicacionProp?.etiquetas || [],
    descripcion: publicacionProp?.descripcion || '',
    multimedia: publicacionProp?.multimedia || [],
    audios: publicacionProp?.audios || [],
  }

  const sendNotificationPublicacion = async () => {
    if (!authToken) return
    const tokens = await getAllTokens(authToken)
    await sendPushNotification({
      tokens,
      title: 'Nueva publicación',
      body: `${capitalize(
        user?.first_name
      )} ha agregado una nueva publicación para la comunidad. ¡Ven a revisarlo!`,
    })
  }

  const handleSubmit = async (publicacion: Publicacion) => {
    setIsLoading(true)
    if (publicacionProp && authToken && publicacionProp.token) {
      await editarPublicacion(publicacion, authToken, publicacionProp.token)
    } else if (authToken) {
      await agregarPublicacion(publicacion, authToken)
    }
    dispatch(
      setPublicacionHasModified({
        publicacionHasModified: !publicacionHasModified,
      })
    )
    await sendNotificationPublicacion()
    setIsLoading(false)
    navigation.navigate('Publicaciones')
  }

  return (
    <ScrollView showsVerticalScrollIndicator={false} style={tw`px-2 mb-8`}>
      <HeaderScreen
        title="Publicación"
        message="¡Dile a la comunidad lo que estás pensando!"
        srcImage={require('../../../../assets/nueva_publicacion_icon.png')}
      />
      <Formik
        initialValues={initialValues}
        validationSchema={PublicacionValidationSchema}
        onSubmit={handleSubmit}
      >
        <PublicacionContenido
          isSubmiting={isLoading}
          isEdit={!!publicacionProp}
        />
      </Formik>
    </ScrollView>
  )
}

export default PublicacionFormularioTemplate

=== FormularioRutas.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { ScrollView, Text, View } from 'react-native'
import HeaderScreen from '../../moleculas/HeaderScreen'
import { Formik } from 'formik'
import { RutasValidationSchema } from '../../../schemas/RutasValidationSchema'
import FieldFormulario from '../../moleculas/FieldFormulario'
import Input from '../../moleculas/Input'
import { BACKGROUND_COLORS, TEXT_COLORS } from '../../../utils/constants'
import SelectCreatableList from '../../moleculas/SelectCreatableList'
import GalleryMultiImages from '../../organismos/GalleryMultiImages'
import MapViewSelectUbication from '../../moleculas/MapViewSelectUbication'
import Spinner from '../../atomos/Spinner'
import SecondaryButton from '../../atomos/SecondaryButton'
import SelectCreatableBatches from '../../moleculas/SelectCreatableBatches'
import {
  editarRuta,
  getColaboracionesRutas,
  getGruposEncuentro,
  getRequisitos,
  getTiposRuta,
  guardarRuta,
} from '../../../lib/services/rutas.services'
import { useDispatch, useSelector } from 'react-redux'
import { RootState } from '../../../redux/store'
import { Ruta } from '../../../models/Rutas'
import { NavigationProp, useNavigation } from '@react-navigation/native'
import { RootStackParamList, Screens } from '../../../models/Screens.types'
import {
  getAdminTokens,
  getAllTokens,
  getCiclistasToken,
} from '../../../lib/services/notifications.services'
import { usePermissionsNotifications } from '../../../hooks/usePermissionsNotifications'
import { capitalize } from '../../../utils/capitalizeText'
import FormularioRutasGrupos from './FormularioRutasGrupos'
import Gap from '../../atomos/Gap'
import SmallFieldFecha from '../../moleculas/SmallFieldFecha'
import ArrowDivider from '../../atomos/ArrowDivider'
import FieldTitle from '../../atomos/FieldTitle'
import CustomSwitch from '../../atomos/CustomSwitch'
import { setRutaHasModified } from '../../../redux/ruta'

interface FormularioRutasProp {
  rutaProp: Ruta
}
const FormularioRutas = ({ rutaProp }: FormularioRutasProp) => {
  const { authToken, user } = useSelector((state: RootState) => state.user)
  const [isLoading, setIsLoading] = React.useState(false)
  const [requisitosCatalog, setRequisitosCatalog] = React.useState([])
  const [tiposRutaCatalog, setTiposRutaCatalog] = React.useState([])
  const [colaboracionesCatalog, setColaboracionesCatalog] = React.useState([])
  const [hasRequirements, setHasRequirements] = React.useState(false)
  const [hasCollaborations, setHasCollaborations] = React.useState(false)
  const [hasGroups, setHasGroups] = React.useState(false)
  const [cuposLimitados, setCuposLimitados] = React.useState(false)
  const [grupos, setGrupos] = React.useState([])
  const { rutaHasModified } = useSelector((state: RootState) => state.ruta)
  const dispatch = useDispatch()
  const { sendPushNotification } = usePermissionsNotifications()
  const navigation =
    useNavigation<NavigationProp<RootStackParamList, Screens>>()

  const converterDates = (date: any) => {
    if (!date) return undefined
    const [fecha] = date.split(' ')
    return new Date(fecha)
  }

  const initialValues = {
    nombre: rutaProp?.nombre || '',
    cupos_disponibles: rutaProp?.cupos_disponibles || undefined,
    requisitos: rutaProp?.requisitos || [],
    tipoRuta: rutaProp?.tipoRuta || [],
    fotos: rutaProp?.fotos || [],
    lugar: rutaProp?.lugar || '',
    ubicacion: rutaProp?.ubicacion || {
      coordinateX: {
        latitude: -2.1538019492930163,
        longitude: -79.88844282925129,
      },
      coordinateY: {
        latitude: -2.1453200715782175,
        longitude: -79.89056378602983,
      },
    },
    fecha_inicio: converterDates(rutaProp?.fecha_inicio) || undefined,
    fecha_fin: converterDates(rutaProp?.fecha_fin) || undefined,
    descripcion: rutaProp?.descripcion || '',
    grupos_encuentro: rutaProp?.grupos_encuentro || [],
    colaboraciones: rutaProp?.colaboraciones || [],
  }

  React.useEffect(() => {
    ;(async function () {
      if (authToken) {
        setRequisitosCatalog(await getRequisitos(authToken))
        setTiposRutaCatalog(await getTiposRuta(authToken))
        setColaboracionesCatalog(await getColaboracionesRutas(authToken))
        setGrupos(await getGruposEncuentro(authToken))
      }
    })()
  }, [])

  React.useEffect(() => {
    if (rutaProp) {
      setCuposLimitados(!!rutaProp.cupos_disponibles)
      setHasRequirements(!!(rutaProp.requisitos.length > 0))
      setHasCollaborations(!!(rutaProp.colaboraciones.length > 0))
      setHasGroups(
        !!(rutaProp.grupos_encuentro && rutaProp.grupos_encuentro?.length > 0)
      )
    }
  }, [rutaProp])

  const sendNotificationToAdmins = async () => {
    if (!authToken) return
    const tokens = await getAdminTokens(authToken)
    await sendPushNotification({
      tokens,
      title: 'Nueva ruta propuesta',
      body: `${capitalize(user?.first_name)} ${capitalize(
        user?.last_name
      )} ha sugerido una ruta para la comunidad y necesita aprobación`,
    })
  }

  const sendNotificationEditRutaToUsers = async () => {
    if (!authToken) return
    const tokens = await getCiclistasToken(authToken)
    await sendPushNotification({
      tokens,
      title: 'Ruta Modificada',
      body: `Se han modificado los detalles de la ruta ${rutaProp?.nombre}. Por favor, revisa esta actividad`,
    })
  }

  const sendNotificationNewRutaToUsers = async (nombre: string) => {
    if (!authToken) return
    const tokens = await getAllTokens(authToken)
    await sendPushNotification({
      tokens,
      title: 'Nueva ruta planificada',
      body: `${nombre} ha sido planificada para la comunidad. ¡Únete al recorrido!`,
    })
  }

  const handleSubmit = async (prop: Ruta) => {
    setIsLoading(true)
    if (authToken) {
      if (rutaProp && rutaProp.token && rutaProp.nombre) {
        await editarRuta(authToken, prop, rutaProp.token)
        await sendNotificationEditRutaToUsers()
      } else {
        await guardarRuta(authToken, prop)
        if (!user?.admin) {
          await sendNotificationToAdmins()
        } else {
          await sendNotificationNewRutaToUsers(prop.nombre)
        }
      }
    }
    setIsLoading(false)
    dispatch(setRutaHasModified({ rutaHasModified: !rutaHasModified }))
    navigation.navigate('Rutas')
  }

  return (
    <ScrollView showsVerticalScrollIndicator={false} style={tw`px-2 mb-8`}>
      <HeaderScreen
        title="Rutas"
        message="¡Planifica actividades para la comunidad!"
        srcImage={require('../../../../assets/ruta_icon.png')}
      />
      <Formik<Ruta>
        initialValues={initialValues}
        validationSchema={RutasValidationSchema}
        onSubmit={handleSubmit}
      >
        {({ handleSubmit, values, setFieldValue }) => (
          <>
            <FieldFormulario>
              <Gap py="2">
                <Input
                  text="Nombre"
                  type="none"
                  name="nombre"
                  placeholder="Nombre de la ruta..."
                  value={values.nombre}
                  setValue={(value) => setFieldValue('nombre', value)}
                />
              </Gap>

              <Gap py="2">
                <Input
                  text="Lugar"
                  type="none"
                  name="lugar"
                  placeholder="Añade una referencia del punto de partida..."
                  value={values.lugar}
                  setValue={(value) => setFieldValue('lugar', value)}
                />
              </Gap>

              <Gap py="2">
                <Text
                  style={tw`${TEXT_COLORS.DARK_BLUE} font-bold text-sm pl-2`}
                >
                  Tipo de Ruta
                </Text>
                <SelectCreatableBatches
                  values={tiposRutaCatalog}
                  selectedValues={values.tipoRuta}
                  setValuesSelected={(tipo) => {
                    const exists = values.tipoRuta.find(
                      (type: any) => type === tipo
                    )
                    if (!exists) {
                      setFieldValue('tipoRuta', [
                        ...(values.tipoRuta || []),
                        tipo,
                      ])
                    }
                  }}
                  deleteValue={(tipo) => {
                    setFieldValue('tipoRuta', [
                      ...(values.tipoRuta || []).filter((m: any) => m !== tipo),
                    ])
                  }}
                  placeholder="Montaña, Carretera..."
                  field={'tiposRuta'}
                />
              </Gap>

              <Gap py="2">
                <Input
                  multiline
                  numberOfLines={4}
                  textAlignVertical="top"
                  text="Descripcion del evento"
                  type="none"
                  name="descripcion"
                  placeholder="Agrega una descripción del evento..."
                  value={values.descripcion}
                  setValue={(value) => setFieldValue('descripcion', value)}
                />
              </Gap>
            </FieldFormulario>

            <FieldFormulario>
              <Text style={tw`${TEXT_COLORS.DARK_BLUE} font-bold text-sm pl-2`}>
                Fotos
              </Text>
              <GalleryMultiImages
                field="fotos"
                setFieldValue={setFieldValue}
                values={values.fotos}
                allowedFiles={['image/*']}
                icon={require('../../../../assets/ruta_gallery.png')}
                placeholder="¡Agrega algunas imágenes de la ruta!"
              />
            </FieldFormulario>

            <FieldFormulario>
              <Text style={tw`${TEXT_COLORS.DARK_BLUE} font-bold text-sm pl-2`}>
                Horario Planificado
              </Text>

              <View style={tw`flex flex-row justify-between items-center mx-8`}>
                <View style={tw`flex flex-col justify-between items-center`}>
                  <Text style={tw`${TEXT_COLORS.DARK_BLUE} text-sm my-2`}>
                    Fecha de Inicio
                  </Text>
                  <SmallFieldFecha
                    fecha={values.fecha_inicio}
                    setFecha={(value) => setFieldValue('fecha_inicio', value)}
                  />
                </View>
                <ArrowDivider />
                <View style={tw`flex flex-col justify-between items-center`}>
                  <Text style={tw`${TEXT_COLORS.DARK_BLUE} text-sm my-2`}>
                    Fecha de Fin
                  </Text>
                  <SmallFieldFecha
                    fecha={values.fecha_fin}
                    setFecha={(value) => setFieldValue('fecha_fin', value)}
                  />
                </View>
              </View>
            </FieldFormulario>

            <FieldFormulario>
              <Gap py="0">
                <View style={tw`flex flex-row items-center justify-between `}>
                  <FieldTitle text="Cupos Limitados" />
                  <CustomSwitch
                    handleClick={() => setCuposLimitados(!cuposLimitados)}
                    active={cuposLimitados}
                  />
                </View>
                {cuposLimitados ? (
                  <Input
                    type="none"
                    name="cupos"
                    placeholder="Cantidad de participantes admitidos..."
                    value={values.cupos_disponibles}
                    setValue={(value) =>
                      setFieldValue('cupos_disponibles', value)
                    }
                  />
                ) : null}
              </Gap>

              <Gap py="2">
                <View style={tw`flex flex-row items-center justify-between `}>
                  <FieldTitle text="Requisitos para participar" />
                  <CustomSwitch
                    handleClick={() => setHasRequirements(!hasRequirements)}
                    active={hasRequirements}
                  />
                </View>

                {hasRequirements ? (
                  <SelectCreatableList
                    field="requisitos"
                    placeholder="Insumos, Nivel de ciclista..."
                    values={requisitosCatalog}
                    selectedValues={values.requisitos}
                    setValuesSelected={(valor) => {
                      const exists = values.requisitos.find(
                        (requisito) => requisito === valor
                      )
                      if (!exists) {
                        setFieldValue('requisitos', [
                          ...(values.requisitos || []),
                          valor,
                        ])
                      }
                    }}
                    deleteValue={(valor) => {
                      setFieldValue('requisitos', [
                        ...(values.requisitos || []).filter((m) => m !== valor),
                      ])
                    }}
                  />
                ) : null}
              </Gap>

              <Gap py="2">
                <View style={tw`flex flex-row items-center justify-between`}>
                  <FieldTitle text="Colaboraciones de los ciclistas" />
                  <CustomSwitch
                    handleClick={() => setHasCollaborations(!hasCollaborations)}
                    active={hasCollaborations}
                  />
                </View>
                {hasCollaborations ? (
                  <SelectCreatableList
                    field="colaboraciones"
                    placeholder="Gasas, Alcohol..."
                    values={colaboracionesCatalog}
                    selectedValues={values.colaboraciones}
                    setValuesSelected={(valor) => {
                      const exists = values.colaboraciones.find(
                        (colaboracion) => colaboracion === valor
                      )
                      if (!exists) {
                        setFieldValue('colaboraciones', [
                          ...(values.colaboraciones || []),
                          valor,
                        ])
                      }
                    }}
                    deleteValue={(valor) => {
                      setFieldValue('colaboraciones', [
                        ...(values.colaboraciones || []).filter(
                          (m) => m !== valor
                        ),
                      ])
                    }}
                  />
                ) : null}
              </Gap>

              <View style={tw`flex flex-row items-center justify-between`}>
                <FieldTitle text="Puntos de encuentro" />
                <CustomSwitch
                  handleClick={() => setHasGroups(!hasGroups)}
                  active={hasGroups}
                />
              </View>

              {hasGroups ? (
                <FormularioRutasGrupos
                  grupos={grupos}
                  field="grupos_encuentro"
                />
              ) : null}
            </FieldFormulario>

            <FieldFormulario>
              <Text style={tw`${TEXT_COLORS.DARK_BLUE} font-bold text-sm pl-2`}>
                Ubicacion
              </Text>
              <MapViewSelectUbication
                select
                field="ubicacion"
                setField={setFieldValue}
                value={values.ubicacion}
              />
            </FieldFormulario>

            {isLoading ? (
              <Spinner />
            ) : (
              <SecondaryButton
                label={
                  rutaProp ? 'Guardar' : user?.admin ? 'Publicar' : 'Proponer'
                }
                handleClick={handleSubmit}
                style={`${BACKGROUND_COLORS.PRIMARY_BLUE} w-6/12 mx-auto mt-6`}
              />
            )}
          </>
        )}
      </Formik>
    </ScrollView>
  )
}

export default FormularioRutas

=== FormularioRutasGrupos.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Text, View } from 'react-native'
import FieldFormulario from '../../moleculas/FieldFormulario'
import { BACKGROUND_COLORS, TEXT_COLORS } from '../../../utils/constants'
import Input from '../../moleculas/Input'
import { Etiqueta } from '../../../models/Etiqueta.model'
import { Formik, FormikHelpers, useFormikContext } from 'formik'
import { GrupoEncuentro, Ruta } from '../../../models/Rutas'
import ButtonPrimary from '../../atomos/ButtonPrimary'
import ItemCheckList from '../../atomos/ItemCheckList'
import CancelButton from '../../atomos/CancelButton'
import RoundedSelectInput from '../../../../RoudedSelectInput'

interface FormularioRutasGruposProps {
  grupos: Etiqueta[]
  field: string
}

const FormularioRutasGrupos = ({
  grupos,
  field,
}: FormularioRutasGruposProps) => {
  const {
    values: { grupos_encuentro },
    setFieldValue,
  } = useFormikContext<Ruta>()

  const handleSubmit = (
    props: GrupoEncuentro,
    { resetForm }: FormikHelpers<GrupoEncuentro>
  ) => {
    const alreadyExist = grupos_encuentro?.find(
      (grupoEncuentro) => grupoEncuentro.grupo === props?.grupo
    )
    if (!alreadyExist) {
      setFieldValue(field, [...(grupos_encuentro || []), props])
    }
    resetForm()
  }

  const removeGrupo = (tokenGrupo: string) => {
    setFieldValue(field, [
      ...(grupos_encuentro || []).filter((m) => m.grupo !== tokenGrupo),
    ])
  }

  const renderGrupos = () => {
    return grupos_encuentro?.map((grupo) => {
      const nombreGupo = grupos.find(
        (grupoEncuentro) => grupoEncuentro.value === grupo.grupo
      )
      return (
        <View key={grupo.grupo} style={tw`px-4`}>
          <ItemCheckList
            text={`${nombreGupo?.nombre}: ${grupo.lugar_encuentro}` || ''}
          />
          <CancelButton
            handleClick={() => removeGrupo(grupo.grupo)}
            value={grupo.grupo || ''}
            styles="right-0 top-1 w-10 h-10"
          />
        </View>
      )
    })
  }

  return (
    <FieldFormulario>
      <Formik<GrupoEncuentro>
        initialValues={{
          grupo: '',
          lugar_encuentro: '',
        }}
        onSubmit={handleSubmit}
        enableReinitialize={true}
      >
        {(props: any) => (
          <>
            <Text
              style={tw`${TEXT_COLORS.DARK_BLUE} font-normal text-sm pl-2 mt-2`}
            >
              Grupos
            </Text>
            <RoundedSelectInput
              values={grupos}
              setValuesSelected={(value) =>
                props?.setFieldValue('grupo', value)
              }
              placeholder="Grupo Norte, Grupo Sur..."
              selectedValue={props?.values.grupo}
            />
            <Text
              style={tw`${TEXT_COLORS.DARK_BLUE} font-normal text-sm pl-2 mt-4`}
            >
              Lugar
            </Text>
            <Input
              type="none"
              name="lugar_encuentro"
              placeholder="Lugar de encuentro..."
              value={props?.values.lugar_encuentro}
              setValue={(value) =>
                props?.setFieldValue('lugar_encuentro', value)
              }
            />
            <View style={tw`mt-4 mb-2 w-5/12 mx-auto`}>
              <ButtonPrimary
                label="Agregar"
                handleClick={props?.submitForm}
                style={`${BACKGROUND_COLORS.DARK_BLUE} text-white rounded-3xl py-1`}
              />
            </View>
          </>
        )}
      </Formik>
      {renderGrupos()}
    </FieldFormulario>
  )
}

export default FormularioRutasGrupos

=== HistorialConsejosRoot.tsx ===
import * as React from 'react'
import { ScrollView } from 'react-native-gesture-handler'
import tw from 'twrnc'
import useDebounce from '../../../hooks/useDebounce'
import SectionTitle from '../../moleculas/SectionTitle'
import ListaConsejosHistoricos from './ListaConsejosHistoricos'
import SearchBar from '../../moleculas/SearchBar'

const HistorialConsejos = () => {
  const [text, setText] = React.useState('')
  const debouncedText = useDebounce<string>(text)

  return (
    <ScrollView style={tw`px-2 py-4`}>
      <SectionTitle text="Historial Consejos" />
      <SearchBar text={text} setText={setText} />
      <ListaConsejosHistoricos text={debouncedText} />
    </ScrollView>
  )
}

export default HistorialConsejos

=== ListaConsejosHistoricos.tsx ===
import * as React from 'react'
import { View } from 'react-native'
import { useSelector } from 'react-redux'
import tw from 'twrnc'
import { obtenerConsejosHistoricos } from '../../../lib/services/consejos.services'
import { Consejo } from '../../../models/Consejo.model'
import { RootState } from '../../../redux/store'
import TarjetaConsejoHistorico from './TarjetaConsejoHistorico'

interface ListConsejosHistoricosProps {
  text: string
}

const ListaConsejosHistoricos = ({ text }: ListConsejosHistoricosProps) => {
  const { authToken } = useSelector((state: RootState) => state.user)
  const [consejos, setConsejos] = React.useState([])
  const [filteredConsejos, setFilterdConsejos] = React.useState([])

  React.useEffect(() => {
    let isMounted = true
    if (isMounted) {
      ;(async function () {
        const response = await obtenerConsejosHistoricos(authToken as string)
        setConsejos(response.data)
        setFilterdConsejos(response.data)
      })()
    }

    return () => {
      isMounted = false
    }
  }, [])

  React.useEffect(() => {
    let isMounted = true
    if (isMounted) {
      if (!text) {
        setFilterdConsejos(consejos)
      } else {
        const filteredConsejos = consejos.filter((consejo: Consejo) =>
          consejo.informacion.toLowerCase().includes(text.toLowerCase())
        )
        setFilterdConsejos(filteredConsejos)
      }
    }
    return () => {
      isMounted = false
    }
  }, [text])

  return (
    <View style={tw`pt-4`}>
      {filteredConsejos?.map((consejo, index) => (
        <TarjetaConsejoHistorico key={index} consejo={consejo} />
      ))}
    </View>
  )
}

export default ListaConsejosHistoricos

=== TarjetaConsejoHistorico.tsx ===
import { NavigationProp, useNavigation } from '@react-navigation/native'
import * as React from 'react'
import {
  Image,
  ImageSourcePropType,
  Pressable,
  StyleSheet,
  Text,
  View,
} from 'react-native'
import tw from 'twrnc'
import { Consejo } from '../../../models/Consejo.model'
import {
  RootDrawerParamList,
  ScreensDrawer,
} from '../../../models/Screens.types'

interface TarjetaConsejoHistoricoProps {
  consejo: Consejo
}

const TarjetaConsejoHistorico = ({ consejo }: TarjetaConsejoHistoricoProps) => {
  const navigation =
    useNavigation<NavigationProp<RootDrawerParamList, ScreensDrawer>>()
  return (
    <Pressable
      onPress={() => navigation.navigate('ConsejoDetalle', { consejo })}
    >
      <View
        style={[
          tw`bg-white mt-2 h-24 flex flex-row items-center overflow-hidden rounded-xl`,
          styles.borderSide,
        ]}
      >
        {consejo.imagen ? (
          <Image
            source={{ uri: consejo.imagen } as ImageSourcePropType}
            style={{ width: 90, height: 95 }}
          />
        ) : null}

        <View style={tw`pl-3 pr-12 w-10/12`}>
          <Text style={styles.text}>{consejo.informacion} </Text>
        </View>
      </View>
    </Pressable>
  )
}

export default TarjetaConsejoHistorico
const styles = StyleSheet.create({
  container: {
    borderStyle: 'solid',
    marginTop: 2,
    borderColor: '#DFDFDF',
  },
  text: {
    overflow: 'hidden',
    height: 40,
    lineHeight: 20,
    color: '#0C3248',
  },
  borderSide: {
    borderBottomColor: '#DFDFF0',
    borderBottomWidth: 1,
    borderLeftColor: '#DFDFF0',
    borderLeftWidth: 1,
    borderTopColor: '#DFDFF0',
    borderTopWidth: 1,
    borderRadius: 14,
    borderRightColor: '#6a7bd2',
    borderRightWidth: 6,
  },
})

=== HistorialNovedades.tsx ===
import * as React from 'react'
import { ScrollView } from 'react-native-gesture-handler'
import tw from 'twrnc'
import useDebounce from '../../../hooks/useDebounce'
import SectionTitle from '../../moleculas/SectionTitle'
import ListaNovedadesHistoricas from './ListaNovedadesHistoricas'
import SearchBar from '../../moleculas/SearchBar'

const HistorialNovedades = () => {
  const [text, setText] = React.useState('')
  const debouncedText = useDebounce<string>(text)

  return (
    <ScrollView style={tw`px-2 py-4`}>
      <SectionTitle text="Historial Novedades" />
      <SearchBar text={text} setText={setText} />
      <ListaNovedadesHistoricas text={debouncedText} />
    </ScrollView>
  )
}

export default HistorialNovedades

=== ListaNovedadesHistoricas.tsx ===
import * as React from 'react'
import { View } from 'react-native'
import { useSelector } from 'react-redux'
import tw from 'twrnc'
import { obtenerNovedades } from '../../../lib/services/novedades.services'
import { NovedadInterface } from '../../../models/Novedad.model'
import { RootState } from '../../../redux/store'
import TarjetaNovedadHistorica from './TarjetaNovedadHistorica'

interface ListaNovedadesHistoricasProps {
  text: string
}

const ListaNovedadesHistoricas = ({ text }: ListaNovedadesHistoricasProps) => {
  const { authToken } = useSelector((state: RootState) => state.user)
  const [novedades, setNovedades] = React.useState<NovedadInterface[]>([])
  const [filteredNovedades, setFilteredNovedades] = React.useState<
    NovedadInterface[]
  >([])
  const { novedadHasModified } = useSelector(
    (state: RootState) => state.novedad
  )

  React.useEffect(() => {
    let isMounted = true
    if (isMounted) {
      ;(async function () {
        const response = await obtenerNovedades(authToken || '')
        const novedades: NovedadInterface[] = response.data
        setNovedades(novedades)
        setFilteredNovedades(novedades)
      })()
    }
    return () => {
      isMounted = false
    }
  }, [novedadHasModified])

  React.useEffect(() => {
    let isMounted = true
    if (isMounted) {
      if (!text) {
        setFilteredNovedades(novedades)
      } else {
        setFilteredNovedades(filtrarNovedades())
      }
    }
    return () => {
      isMounted = false
    }
  }, [text])

  const filtrarNovedades = (): NovedadInterface[] => {
    const standarText = text.toLowerCase()
    return novedades.filter(
      (novedad: NovedadInterface) =>
        novedad.descripcion.toLowerCase().includes(standarText) ||
        novedad.descripcion_corta.toLowerCase().includes(standarText) ||
        novedad.titulo.toLowerCase().includes(standarText) ||
        novedad.nombre?.toLowerCase().includes(standarText)
    )
  }

  return (
    <View style={tw`pt-4`}>
      {filteredNovedades?.map((novedad, index) => (
        <TarjetaNovedadHistorica key={index} novedad={novedad} />
      ))}
    </View>
  )
}

export default ListaNovedadesHistoricas

=== TarjetaNovedadHistorica.tsx ===
import { NavigationProp, useNavigation } from '@react-navigation/native'
import * as React from 'react'
import {
  Image,
  ImageSourcePropType,
  Pressable,
  StyleSheet,
  Text,
  View,
} from 'react-native'
import tw from 'twrnc'
import { NovedadInterface } from '../../../models/Novedad.model'
import {
  RootDrawerParamList,
  ScreensDrawer,
} from '../../../models/Screens.types'
import { TEXT_COLORS } from '../../../utils/constants'
import ContenedorPaginasDetalle from '../ContenedorPaginasDetalle'

interface TarjetaNovedadHistoricaProps {
  novedad: NovedadInterface
}

const TarjetaNovedadHistorica = ({ novedad }: TarjetaNovedadHistoricaProps) => {
  const navigation =
    useNavigation<NavigationProp<RootDrawerParamList, ScreensDrawer>>()
  return (
    <Pressable
      onPress={() => navigation.navigate('DetalleNovedad', { data: novedad })}
    >
      <ContenedorPaginasDetalle
        borderRight
        colorBorder="#F16F31"
        borderWidth={8}
        styleProps="mt-1"
      >
        <View style={[tw`flex flex-row items-center py-2`, styles.container]}>
          {novedad.imagen ? (
            <Image
              source={{ uri: novedad.imagen } as ImageSourcePropType}
              style={{ width: 50, height: 50, borderRadius: 20 / 2 }}
            />
          ) : null}
          <View style={tw`pl-3 pr-12`}>
            <Text
              style={tw`font-bold ${TEXT_COLORS.DARK_BLUE}`}
              numberOfLines={1}
            >
              {novedad.titulo}
            </Text>
            <View style={tw`pt-1`}>
              <Text numberOfLines={3}>{novedad.descripcion_corta} </Text>
            </View>
          </View>
        </View>
      </ContenedorPaginasDetalle>
    </Pressable>
  )
}

export default TarjetaNovedadHistorica
const styles = StyleSheet.create({
  container: {
    borderStyle: 'solid',
    marginTop: 2,
    borderColor: '#DFDFDF',
  },
  text: {
    overflow: 'hidden',
    height: 40,
    lineHeight: 20,
    color: '#0C3248',
  },
})

=== BannerPublicidad.tsx ===
import * as React from 'react'
import Carousel from 'react-native-carousel-loop'
import { useSelector } from 'react-redux'
import { obtenerNovedades } from '../../../lib/services/novedades.services'
import { NovedadInterface } from '../../../models/Novedad.model'
import { RootState } from '../../../redux/store'
import { WIDTH_DIMENSIONS } from '../../../utils/constants'
import EmptyNovedad from '../../organismos/EmptyNovedad'
import Novedad from './Novedad'

const BannerNovedad = () => {
  const { authToken } = useSelector((state: RootState) => state.user)
  const { novedadHasModified } = useSelector(
    (state: RootState) => state.novedad
  )
  const [novedades, setNovedades] = React.useState<NovedadInterface[]>([])
  const [isLoading, setIsLoading] = React.useState(true)

  React.useEffect(() => {
    ;(async function () {
      const response = await obtenerNovedades(authToken || '')
      const novedades: NovedadInterface[] = response.data
      setNovedades(novedades)
      setIsLoading(false)
    })()
  }, [novedadHasModified])

  return isLoading ? (
    <EmptyNovedad />
  ) : (
    <Carousel
      delay={3000}
      autoplay
      style={{ width: WIDTH_DIMENSIONS, height: 100 }}
      isLooped
    >
      {novedades?.map((item, index) => {
        return <Novedad key={index} data={item} />
      })}
    </Carousel>
  )
}

export default BannerNovedad

=== CiclistaSafe.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Text, View, Image } from 'react-native'
import {
  BACKGROUND_COLORS,
  BORDER_COLORS,
  TEXT_COLORS,
} from '../../../utils/constants'

const CiclistaSafe = () => {
  return (
    <View
      style={tw`py-2 px-2 flex flex-row ${BACKGROUND_COLORS.ORANGE} bg-white border-t-2 border-solid ${BORDER_COLORS.ORANGE}`}
    >
      <View style={tw`w-9/12`}>
        <Text style={tw`${TEXT_COLORS.DARK_BLUE} font-semibold`}>
          ¿Haz llegado a casa?
        </Text>
        <Text style={tw`${TEXT_COLORS.DARK_BLUE} font-normal pt-1`}>
          Los miembros de la comunidad están esperando tu confirmación
        </Text>
      </View>
      <View style={tw`w-3/12 flex flex-row items-center`}>
        <Image
          source={require('../../../../assets/like_reaccion_icon.png')}
          style={{ width: 20, height: 20, marginRight: 20 }}
        />
        <Image
          source={require('../../../../assets/like_reaccion_icon.png')}
          style={{
            width: 20,
            height: 20,
            transform: [{ rotateY: '190deg' }, { scaleY: -1 }],
          }}
        />
      </View>
    </View>
  )
}

export default CiclistaSafe

=== Consejos.tsx ===
import * as React from 'react'
import { View } from 'react-native'
import tw from 'twrnc'
import TarjetaConsejo from './TarjetaConsejo'
import { BACKGROUND_COLORS } from '../../../utils/constants'
import { obtenerConsejosActuales } from '../../../lib/services/consejos.services'
import { RootState } from '../../../redux/store'
import { useDispatch, useSelector } from 'react-redux'
import { Consejo } from '../../../models/Consejo.model'
import { RootStackParamList, Screens } from '../../../models/Screens.types'
import SectionTitle from '../../moleculas/SectionTitle'
import { NavigationProp, useNavigation } from '@react-navigation/native'
import EmptyTarjetaConsejo from '../../organismos/EmptyTarjetaConsejo'
import { setActiveScreen } from '../../../redux/screens'

const Consejos = () => {
  const { authToken } = useSelector((state: RootState) => state.user)
  const { hasModified } = useSelector((state: RootState) => state.consejo)
  const [listaConsejos, setListaConsejos] = React.useState<Consejo[]>([])
  const [isLoading, setIsLoading] = React.useState(true)
  const navigation =
    useNavigation<NavigationProp<RootStackParamList, Screens>>()
  const dispatch = useDispatch()

  React.useEffect(() => {
    let isMounted = true
    if (isMounted) {
      ;(async () => {
        const response = await obtenerConsejosActuales(authToken as string)
        setListaConsejos(response?.data)
        setIsLoading(false)
      })()
    }
    dispatch(setActiveScreen({ activeScreen: 'Inicio' }))
    return () => {
      isMounted = false
    }
  }, [hasModified])

  return (
    <View style={tw`px-2`}>
      <View style={tw`mt-[2%] ${BACKGROUND_COLORS.BLUE_LIGHTER}`}>
        <SectionTitle
          text={'Consejos del día'}
          hasUpdates
          hasButton
          buttonIcon={require('../../../../assets/plus.png')}
          handleClickButton={() => navigation.navigate('ConsejoFormulario')}
        />
      </View>
      <View style={tw`mt-[4%] mb-8`}>
        {isLoading ? (
          <EmptyTarjetaConsejo />
        ) : (
          listaConsejos?.map((consejo, index) => {
            return <TarjetaConsejo key={index} consejoProp={consejo} />
          })
        )}
      </View>
    </View>
  )
}

export default Consejos

=== Novedad.tsx ===
import { NavigationProp, useNavigation } from '@react-navigation/native'
import * as React from 'react'
import { Text, View, Image, Pressable, ImageSourcePropType } from 'react-native'
import tw from 'twrnc'
import { NovedadInterface } from '../../../models/Novedad.model'
import { RootStackParamList, Screens } from '../../../models/Screens.types'
import { BORDER_COLORS, TEXT_COLORS } from '../../../utils/constants'
import ButtonUnderline from '../../atomos/ButtonUnderline'

interface NovedadProps {
  data: NovedadInterface
}

const Novedad = ({ data }: NovedadProps) => {
  const navigation =
    useNavigation<NavigationProp<RootStackParamList, Screens>>()
  return (
    <Pressable onPress={() => navigation.navigate('DetalleNovedad', { data })}>
      <View
        style={tw`bg-white py-3 border-r-8 ${BORDER_COLORS.ORANGE} border-solid z-40`}
      >
        <View style={tw`flex flex-row pl-2`}>
          <View style={tw`pl-4`}>
            <Image
              source={{ uri: data.imagen } as ImageSourcePropType}
              style={{ width: 70, height: 70, borderRadius: 20 / 2 }}
            />
          </View>
          <View style={[tw`pl-4 w-8/12 overflow-hidden`]}>
            <Text
              style={tw`text-base font-bold ${TEXT_COLORS.PRIMARY_BLUE}`}
              numberOfLines={1}
            >
              {data.titulo}
            </Text>

            <Text
              style={tw`text-sm font-semibold ${TEXT_COLORS.DARK_GRAY}`}
              numberOfLines={1}
            >
              {data.descripcion_corta}
            </Text>
            <ButtonUnderline
              label="Click Aquí!"
              handleClick={() => {
                return
              }}
              style={`${TEXT_COLORS.ORANGE} pt-2`}
            />
          </View>
        </View>
      </View>
    </Pressable>
  )
}

export default Novedad

=== TarjetaConsejo.tsx ===
import * as React from 'react'
import { View, ImageSourcePropType, Image } from 'react-native'
import tw from 'twrnc'
import { Consejo } from '../../../models/Consejo.model'
import InformacionUsuario from '../../atomos/InformacionUsuario'
import Reacciones from '../../moleculas/BarraReacciones'
import Ruler from '../../atomos/Ruler'
import ContenidoConsejo from '../../moleculas/ContenidoConsejo'
import MenuConsejoDia from '../../moleculas/MenuConsejoDia'
import TarjetaTemplate from '../../organismos/RoundedWhiteBaseTemplate'

interface TarjetaConsejoProps {
  consejoProp: Consejo
}

const TarjetaConsejo = ({ consejoProp }: TarjetaConsejoProps) => {
  const [consejo, setConsejo] = React.useState<Consejo>()

  React.useEffect(() => {
    let isMounted = true
    if (isMounted) {
      setConsejo(consejoProp)
    }
    return () => {
      isMounted = false
    }
  }, [consejoProp])

  return (
    <TarjetaTemplate shadow={false}>
      <View style={tw`flex flex-row justify-between relative`}>
        <InformacionUsuario
          firstName={consejo?.first_name || ''}
          lastName={consejo?.last_name || ''}
          foto={consejo?.foto}
        />
        <View style={tw`flex flex-row`}>
          {consejo?.fijado ? (
            <Image
              source={require('../../../../assets/pin_gold.png')}
              style={{ width: 15, height: 15, marginTop: 10, marginRight: 4 }}
            />
          ) : null}
          <MenuConsejoDia consejo={consejo as Consejo} />
        </View>
      </View>

      <Ruler style="w-full bg-gray-200 mb-2" />
      {consejo?.imagen ? (
        <ContenidoConsejo
          text={consejo?.informacion}
          image={{ uri: consejo?.imagen } as ImageSourcePropType}
        />
      ) : (
        <ContenidoConsejo text={consejo?.informacion} />
      )}

      <View style={tw`py-4 flex items-center`}>
        <Reacciones item={consejo as Consejo} type="Consejo" />
      </View>
    </TarjetaTemplate>
  )
}

export default TarjetaConsejo

=== LoginFormulario.tsx ===
import * as React from 'react'
import { Text, View, Image, TouchableHighlight } from 'react-native'
import Input from '../../moleculas/Input'
import ButtonPrimary from '../../atomos/ButtonPrimary'
import TouchableMessage from '../../atomos/TouchableMessage'
import Ruler from '../../atomos/Ruler'
import type { NativeStackNavigationProp } from '@react-navigation/native-stack'
import { RootStackParamList } from '../../../models/Screens.types'
import tw from 'twrnc'
import { Formik } from 'formik'
import { loginValidationSchema } from '../../../schemas/LoginSchema'
import { useAuthentication } from '../../../hooks/useAuthentication'
import {
  BACKGROUND_COLORS,
  HEIGHT_DIMENSIONS,
  WIDTH_DIMENSIONS,
} from '../../../utils/constants'
import ErrorMessage from '../../atomos/ErrorMessage'
import { Login } from '../../../models/User'
import Spinner from '../../atomos/Spinner'
import { usePermissionsNotifications } from '../../../hooks/usePermissionsNotifications'
interface Prop {
  navigation: NativeStackNavigationProp<RootStackParamList, 'Login'>
}

const LoginFormulario = ({ navigation }: Prop) => {
  const { initUser } = useAuthentication()
  const [isLoading, setIsLoading] = React.useState(false)
  const [failedLogin, setFailedLogin] = React.useState(false)
  const { registerForPushNotificationsAsync } = usePermissionsNotifications()

  const login = async (props: Login) => {
    try {
      setIsLoading(true)
      const token_notificacion =
        (await registerForPushNotificationsAsync()) || ''
      await initUser({ ...props, token_notificacion })
    } catch (e) {
      setFailedLogin(true)
      setIsLoading(false)
    }
  }

  return (
    <>
      <View
        style={tw`w-full flex flex-row justify-center mt-[${
          HEIGHT_DIMENSIONS * 0.08
        }]`}
      >
        <Image source={require('../../../../assets/ecuaciclismo_logo.png')} />
      </View>
      <View style={tw`mt-[5px]`}>
        <Formik
          initialValues={{ email: '', password: '', token_notificacion: '' }}
          validationSchema={loginValidationSchema}
          onSubmit={login}
        >
          {({ handleSubmit, setFieldValue, values }) => (
            <>
              <Input
                type="username"
                placeholder="Correo electrónico"
                stylesProp="w-11/12 mx-auto py-[5%]"
                name="email"
                value={values.email}
                setValue={(value) => setFieldValue('email', value)}
              />
              <Input
                type="password"
                placeholder="Contraseña"
                stylesProp="w-11/12 mx-auto pt-3 pb-[6%]"
                name="password"
                value={values.password}
                setValue={(value) => setFieldValue('password', value)}
                secureTextEntry={true}
              />
              {failedLogin && (
                <ErrorMessage message="Usuario o contraseña incorrectos" />
              )}

              <View style={tw`w-9/12 mx-auto mt-[${HEIGHT_DIMENSIONS * 0.04}]`}>
                {isLoading ? (
                  <Spinner />
                ) : (
                  <ButtonPrimary
                    style={BACKGROUND_COLORS.SKY_BLUE}
                    label="Iniciar sesión"
                    handleClick={handleSubmit}
                  />
                )}
              </View>
            </>
          )}
        </Formik>
      </View>

      <TouchableMessage
        text="¿Olvidaste tu contraseña?"
        style="mt-[5%]"
        handleClick={() => {
          return
        }}
      />

      <Ruler style={`w-3/12 mx-auto my-[${WIDTH_DIMENSIONS * 0.1}]`} />

      <View style={tw``}>
        <Text style={tw`text-center `}>
          ¿No tienes una cuenta?{' '}
          <TouchableHighlight
            onPress={() => navigation.navigate('Registro')}
            underlayColor="#E7F5FF"
          >
            <Text style={tw`text-[#F16F31]`}>¡Únete ahora!</Text>
          </TouchableHighlight>
        </Text>
      </View>
    </>
  )
}

export default LoginFormulario

=== PerfilFotoHeader.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { View, Image, Text } from 'react-native'
import {
  FOLDERS_STORAGE,
  HEIGHT_DIMENSIONS,
  TEXT_COLORS,
  WIDTH_DIMENSIONS,
} from '../../../utils/constants'
import { CustomText } from '../../atomos/CustomText'
import { capitalize } from '../../../utils/capitalizeText'
import * as DocumentPicker from 'expo-document-picker'
import RoundedGalleryButton from '../../moleculas/RoundedGalleryButton'
import { User } from '../../../models/User'
import { guardarArchivo } from '../../../lib/googleCloudStorage'
import UserValidator from '../UserValidator'

interface PerfilFotoHeaderProps {
  isAdmin: boolean
  email?: string
  nombre?: string
  apellido?: string
  foto?: string
  idUser: string
  telefono?: string
  onUpdate: (user: Partial<User>) => void
}

const PerfilFotoHeader = ({
  isAdmin,
  email,
  nombre,
  apellido,
  foto,
  idUser,
  telefono,
  onUpdate,
}: PerfilFotoHeaderProps) => {
  const [admin, setAdmin] = React.useState(false)
  React.useEffect(() => {
    setAdmin(isAdmin)
  }, [isAdmin])

  const changePhoto = async (file: DocumentPicker.DocumentResult) => {
    if (file.type === 'cancel') {
      return
    }
    const path = await guardarArchivo(
      FOLDERS_STORAGE.USUARIOS,
      file.name,
      file.uri
    )
    onUpdate({ foto: path })
  }

  return (
    <>
      <View style={tw`relative mb-6`}>
        <Image
          source={
            foto
              ? { uri: foto }
              : require('../../../../assets/user_placeholder.png')
          }
          style={{
            width: WIDTH_DIMENSIONS,
            height: HEIGHT_DIMENSIONS * 0.7,
            backgroundColor: 'white',
          }}
          resizeMode="cover"
        />

        <UserValidator userToken={idUser}>
          <View style={tw`absolute -bottom-6 right-2 `}>
            <RoundedGalleryButton handleImage={changePhoto} />
          </View>
        </UserValidator>
      </View>

      <CustomText
        containerProps={{ textAlign: 'center' }}
        style={`text-3xl ${TEXT_COLORS.DARK_BLUE}`}
      >
        {capitalize(nombre || '')} {capitalize(apellido || '')}
      </CustomText>

      <Text style={tw`text-center text-black opacity-40`}>
        {email || ''}
        {telefono ? (
          <Text style={tw`text-center text-black opacity-40`}>
            {' - '}
            {telefono}
          </Text>
        ) : null}
      </Text>
      <View style={tw`mt-1`}>
        <CustomText
          containerProps={{ textAlign: 'center' }}
          style={`text-xl ${TEXT_COLORS.ORANGE}`}
        >
          {admin ? 'Administrador' : 'Ciclista'}
        </CustomText>
      </View>
    </>
  )
}

export default PerfilFotoHeader

=== PerfilInformacionBicicleta.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { View, Image, Text } from 'react-native'
import { CustomText } from '../../atomos/CustomText'
import { TEXT_COLORS, WIDTH_DIMENSIONS } from '../../../utils/constants'
import ItemLi from '../../atomos/ItemLi'
import Gap from '../../atomos/Gap'

interface Props {
  tipo?: string
  marca?: string
  codigo?: string
  foto?: string
}

const PerfilInformacionBicicleta = ({ tipo, marca, codigo, foto }: Props) => {
  return (
    <View style={tw`mx-4 mt-2`}>
      <CustomText style={TEXT_COLORS.PRIMARY_BLUE}>
        Modelo de bicicleta
      </CustomText>
      <View style={tw`flex flex-row flex-wrap items-center mt-6 mb-2`}>
        {!foto && !marca && !codigo && !tipo ? (
          <Text style={tw`text-black text-opacity-40`}>
            No haz añadido información de tu bicicleta en el perfil
          </Text>
        ) : null}

        <View style={tw`w-6/12`}>
          {foto ? (
            <Image
              source={{ uri: foto }}
              style={{ width: WIDTH_DIMENSIONS * 0.4, height: 100 }}
              resizeMode="contain"
            />
          ) : null}
        </View>
        <View style={tw`w-6/12`}>
          {tipo ? (
            <Gap py="1">
              <ItemLi text={tipo} />
            </Gap>
          ) : null}
          {marca ? (
            <Gap py="1">
              <ItemLi text={marca} />
            </Gap>
          ) : null}
          {codigo ? (
            <Gap py="1">
              <ItemLi text={codigo} />
            </Gap>
          ) : null}
        </View>
      </View>
    </View>
  )
}

export default PerfilInformacionBicicleta

=== PerfilInformacionPersonal.tsx ===
import * as React from 'react'
import { View } from 'react-native'
import tw from 'twrnc'
import Gap from '../../atomos/Gap'
import RowWithImage from '../../atomos/RowWithImage'

interface Props {
  edad: number | string
  peso: number | string
  nivel: string
  genero: string
}

const PerfilInformacionPersonal = ({ edad, peso, nivel, genero }: Props) => {
  return (
    <View style={tw`w-10/12 mx-auto flex flex-row`}>
      <View style={tw`w-6/12`}>
        <Gap py="2">
          <RowWithImage
            icon={require('../../../../assets/age_icon.png')}
            text={`${edad} años`}
          />
        </Gap>
        <Gap py="2">
          <RowWithImage
            icon={require('../../../../assets/peso.png')}
            text={`${peso} kg`}
          />
        </Gap>
      </View>
      <View style={tw`w-6/12`}>
        <Gap py="2">
          <RowWithImage
            icon={require('../../../../assets/hembra.png')}
            text={genero}
          />
        </Gap>

        <Gap py="2">
          <RowWithImage
            icon={require('../../../../assets/level_icon.png')}
            text={nivel}
          />
        </Gap>
      </View>
    </View>
  )
}

export default PerfilInformacionPersonal

=== PerfilRoot.tsx ===
import { NavigationProp, useNavigation } from '@react-navigation/native'
import * as React from 'react'
import { View } from 'react-native'
import { useSelector } from 'react-redux'
import tw from 'twrnc'
import { useAuthentication } from '../../../hooks/useAuthentication'
import {
  getDetalleUsuario,
  updateUser,
} from '../../../lib/services/user.services'
import { RootStackParamList, Screens } from '../../../models/Screens.types'
import { User } from '../../../models/User'
import { RootState } from '../../../redux/store'
import { BACKGROUND_COLORS } from '../../../utils/constants'
import * as SecureStore from 'expo-secure-store'
import Ruler from '../../atomos/Ruler'
import OpcionPerfil from '../../moleculas/OpcionPerfil'
import PerfilFotoHeader from './PerfilFotoHeader'
import PerfilInformacionBicicleta from './PerfilInformacionBicicleta'
import PerfilInformacionPersonal from './PerfilInformacionPersonal'
import PerfilRutasInteres from './PerfilRutasInteres'
import PerfilRutasRecorridas from './PerfilRutasRecorridas'
import UserValidator from '../UserValidator'

interface PerfilRootProps {
  userToken: string
}

const PerfilRoot = ({ userToken }: PerfilRootProps) => {
  const { deleteUserStore } = useAuthentication()
  const { authToken, refreshUser } = useSelector(
    (state: RootState) => state.user
  )
  const [hasRefresh, setHasRefresh] = React.useState(false)
  const [detalleUser, setDetalleUser] = React.useState<Partial<User>>({})
  const navigation =
    useNavigation<NavigationProp<RootStackParamList, Screens>>()

  React.useEffect(() => {
    ;(async () => {
      if (authToken) {
        const detalle = await getDetalleUsuario(authToken, userToken)
        setDetalleUser(detalle)
      }
    })()
  }, [userToken, hasRefresh, refreshUser])

  const handleUpdates = async (updatedFields: Partial<User>) => {
    const data = { ...detalleUser, ...updatedFields }

    await updateUser(userToken, data)
    const result = await SecureStore.getItemAsync('user')
    if (result) {
      const data = JSON.parse(result)
      await SecureStore.setItemAsync(
        'user',
        JSON.stringify({
          token: data.token,
          user: { ...data.user, foto: updatedFields.foto },
        })
      )
    }
    setHasRefresh(!hasRefresh)
  }

  return (
    <View style={tw`pb-12`}>
      <PerfilFotoHeader
        isAdmin={!!detalleUser?.admin}
        nombre={detalleUser?.first_name}
        apellido={detalleUser?.last_name}
        email={detalleUser?.email}
        foto={detalleUser?.foto}
        telefono={detalleUser?.telefono}
        onUpdate={handleUpdates}
        idUser={userToken}
      />
      <Ruler style={`w-11/12 mx-auto ${BACKGROUND_COLORS.GRAY} my-4`} />

      <PerfilInformacionPersonal
        edad={detalleUser?.edad || '_'}
        nivel={detalleUser?.nivel || 'Nivel Básico'}
        peso={detalleUser?.peso || '_'}
        genero={detalleUser?.genero || '_ Género'}
      />
      <Ruler style={`w-11/12 mx-auto ${BACKGROUND_COLORS.GRAY} my-4`} />

      <PerfilRutasInteres tipoRutas={detalleUser?.etiquetas} />
      <Ruler style={`w-11/12 mx-auto ${BACKGROUND_COLORS.GRAY} my-4`} />

      <PerfilInformacionBicicleta
        tipo={detalleUser?.tipo}
        marca={detalleUser?.marca}
        codigo={detalleUser?.codigo}
        foto={detalleUser?.foto_bicicleta}
      />

      <Ruler style={`w-11/12 mx-auto ${BACKGROUND_COLORS.GRAY} my-4`} />

      <PerfilRutasRecorridas rutas={detalleUser?.rutas} userToken={userToken} />
      <Ruler style={`${BACKGROUND_COLORS.GRAY} mt-4`} />

      <UserValidator userToken={userToken}>
        <View style={tw`w-full pl-4`}>
          <OpcionPerfil
            icon={require('../../../../assets/chevron-abajo.png')}
            handlePress={() =>
              navigation.navigate('PerfilFormulario', { data: detalleUser })
            }
            text="Editar datos del perfil"
            transform
          />

          <Ruler style={`-ml-4 ${BACKGROUND_COLORS.GRAY}`} />

          <OpcionPerfil
            icon={require('../../../../assets/logout.png')}
            handlePress={() => deleteUserStore()}
            text="Cerrar sesión"
          />

          <Ruler style={`-ml-4 ${BACKGROUND_COLORS.GRAY}`} />
        </View>
      </UserValidator>
    </View>
  )
}

export default PerfilRoot

=== PerfilRutasInteres.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Text, View } from 'react-native'
import { CustomText } from '../../atomos/CustomText'
import { TEXT_COLORS } from '../../../utils/constants'
import Gap from '../../atomos/Gap'
import RoundedBadge from '../../moleculas/RoundedBadge'
import { catalogs } from '../../../models/Rutas'

interface Props {
  tipoRutas?: catalogs[]
}

const PerfilRutasInteres = ({ tipoRutas }: Props) => {
  return (
    <View style={tw`mx-4 mt-2`}>
      <CustomText style={TEXT_COLORS.PRIMARY_BLUE}>Rutas de Interés</CustomText>
      <View style={tw`flex flex-row flex-wrap mt-4`}>
        {tipoRutas && tipoRutas?.length > 0 ? (
          tipoRutas.map((tipo) => (
            <Gap px="1" py="1" key={tipo.token}>
              <RoundedBadge label={tipo.nombre} />
            </Gap>
          ))
        ) : (
          <Text style={tw`text-black text-opacity-40`}>
            No has agregado rutas de interés a tu perfil
          </Text>
        )}
      </View>
    </View>
  )
}

export default PerfilRutasInteres

=== PerfilRutasRecorridas.tsx ===
import * as React from 'react'
import { Text, View } from 'react-native'
import tw from 'twrnc'
import { TEXT_COLORS } from '../../../utils/constants'
import { CustomText } from '../../atomos/CustomText'
import Gap from '../../atomos/Gap'
import RutaRecorrida from '../../moleculas/RutaRecorrida'

interface Props {
  rutas: { link: string; token: string; nombre: string }[]
  userToken: string
}

const PerfilRutasRecorridas = ({ rutas, userToken }: Props) => {
  return (
    <View style={tw`mx-4 mt-2`}>
      <CustomText style={TEXT_COLORS.PRIMARY_BLUE}>Mis Rutas</CustomText>

      <View style={tw`flex flex-row flex-wrap items-center mt-3`}>
        {rutas && rutas.length > 0 ? (
          rutas?.map((ruta) => (
            <Gap px="[1px]" py="[1px]" styles="w-1/3 h-24" key={ruta.token}>
              <RutaRecorrida
                icon={{ uri: ruta.link }}
                token={ruta.token}
                nombre={ruta.nombre}
                userToken={userToken}
              />
            </Gap>
          ))
        ) : (
          <Text style={tw`text-black text-opacity-40`}>
            No has participado en rutas con la comunidad
          </Text>
        )}
      </View>
    </View>
  )
}

export default PerfilRutasRecorridas

=== PermissionWrapper.tsx ===
import * as React from 'react'
import { useSelector } from 'react-redux'
import { RootState } from '../../redux/store'

interface PermissionWrapperProps {
  tokenUserOwnerPublication: string | undefined
  children: React.ReactNode | React.ReactNode[]
}

const PermissionWrapper = ({
  tokenUserOwnerPublication,
  children,
}: PermissionWrapperProps) => {
  const { authToken, user } = useSelector((state: RootState) => state.user)

  const isOwner = tokenUserOwnerPublication === authToken
  const isAdmin = user?.admin

  if (!(isOwner || isAdmin)) {
    return null
  }
  return <>{children}</>
}

export default PermissionWrapper

=== PublicacionesFeed.tsx ===
import * as React from 'react'
import { View } from 'react-native'
import { useSelector } from 'react-redux'
import tw from 'twrnc'
import { obtenerPublicaciones } from '../../../lib/services/publicaciones.services'
import { Publicacion } from '../../../models/Publicaciones.model'
import { RootState } from '../../../redux/store'
import WithoutResults from '../../moleculas/WithoutResults'
import EmptyTarjetaPublicacion from '../../organismos/EmptyTarjetaPublicacion'
import PublicacionesFeedHeader from './PublicacionesFeedHeader'
import TarjetaPublicaciones from './TarjetaPublicaciones'

const PublicacionesFeed = () => {
  const { authToken } = useSelector((state: RootState) => state.user)
  const [publicaciones, setPublicaciones] = React.useState<Publicacion[]>([])
  const [isLoading, setIsLoading] = React.useState(true)
  const { publicacionHasModified } = useSelector(
    (state: RootState) => state.publicacion
  )
  const { text, buildFiltros } = useSelector(
    (state: RootState) => state.busqueda
  )
  const [filteredPublicaciones, setFilteredPublicaciones] = React.useState<
    Publicacion[]
  >([])

  React.useEffect(() => {
    ;(async () => {
      const publicaciones = (await obtenerPublicaciones(authToken || '')) || []
      setPublicaciones(publicaciones)
      setFilteredPublicaciones(publicaciones)
      setIsLoading(false)
    })()
  }, [publicacionHasModified])

  React.useEffect(() => {
    const { etiquetas = [], fecha } = buildFiltros
    let publicacionesFiltradas = []
    if (text) {
      publicacionesFiltradas = publicaciones?.filter(
        (publicacion) =>
          publicacion.titulo.toLowerCase().includes(text.toLowerCase()) ||
          publicacion.descripcion.toLowerCase().includes(text.toLowerCase())
      )
    } else {
      publicacionesFiltradas = publicaciones
    }
    if (etiquetas?.length > 0) {
      publicacionesFiltradas = publicacionesFiltradas?.filter((publicacion) =>
        publicacion.etiquetasResult?.some((etiqueta) =>
          etiquetas?.includes(etiqueta.value)
        )
      )
    }
    if (fecha) {
      const date = new Date(fecha)
      date.setHours(0, 0, 0, 0)
      publicacionesFiltradas = publicacionesFiltradas?.filter((publicacion) => {
        const fechaCreacion = new Date(publicacion.ultimo_cambio || '')
        fechaCreacion.setUTCHours(5)
        return date.getTime() === fechaCreacion.getTime()
      })
    }
    setFilteredPublicaciones(publicacionesFiltradas)
  }, [text, buildFiltros])

  return (
    <View style={tw`px-2`}>
      <PublicacionesFeedHeader />
      <View style={tw`py-2`}>
        {isLoading ? (
          <>
            <EmptyTarjetaPublicacion />
            <EmptyTarjetaPublicacion />
            <EmptyTarjetaPublicacion />
          </>
        ) : filteredPublicaciones?.length <= 0 ? (
          <WithoutResults styles="pt-12" />
        ) : (
          filteredPublicaciones.map((publicacion) => (
            <TarjetaPublicaciones
              publicacion={publicacion}
              key={publicacion.token}
            />
          ))
        )}
      </View>
    </View>
  )
}

export default PublicacionesFeed

=== PublicacionesFeedHeader.tsx ===
import { NavigationProp, useNavigation } from '@react-navigation/native'
import * as React from 'react'
import { View } from 'react-native'
import { useDispatch, useSelector } from 'react-redux'
import tw from 'twrnc'
import { RootStackParamList, Screens } from '../../../models/Screens.types'
import { setText } from '../../../redux/publicacionBusqueda'
import { RootState } from '../../../redux/store'
import { etiquetasPublicaciones } from '../../../utils/constants'
import HeaderRoundedContainer from '../../moleculas/HeaderRoundedContainer'
import SearchBar from '../../moleculas/SearchBar'
import SectionTitle from '../../moleculas/SectionTitle'
import BarraFiltros from '../../organismos/BarraFiltros'

const PublicacionesFeedHeader = () => {
  const { text } = useSelector((state: RootState) => state.busqueda)
  const dispatch = useDispatch()
  const navigation =
    useNavigation<NavigationProp<RootStackParamList, Screens>>()

  const handleText = (text: string) => {
    dispatch(setText({ text }))
  }
  return (
    <HeaderRoundedContainer>
      <View style={tw`mx-4`}>
        <SectionTitle
          hasButton
          isRestricted={false}
          text="Publicaciones"
          styleText="text-3xl"
          background={false}
          buttonIcon={require('../../../../assets/plus.png')}
          handleClickButton={() => navigation.navigate('PublicacionFormulario')}
        />
        <SearchBar text={text} setText={handleText} />
      </View>
      <BarraFiltros filtros={etiquetasPublicaciones} />
    </HeaderRoundedContainer>
  )
}

export default PublicacionesFeedHeader

=== TarjetaPublicaciones.tsx ===
import * as React from 'react'
import { Text, View, Image, Pressable } from 'react-native'
import tw from 'twrnc'
import { CustomText } from '../../atomos/CustomText'
import TarjetaTemplate from '../../organismos/RoundedWhiteBaseTemplate'
import { TEXT_COLORS, WIDTH_DIMENSIONS } from '../../../utils/constants'
import LinkedBadges from '../../moleculas/LinkedBadges'
import { NavigationProp, useNavigation } from '@react-navigation/native'
import { RootStackParamList, Screens } from '../../../models/Screens.types'
import { Publicacion } from '../../../models/Publicaciones.model'
import VideoPlayer from 'expo-video-player'
import { ResizeMode } from 'expo-av'

interface TarjetaPublicacionesProps {
  publicacion: Publicacion
}

const TarjetaPublicaciones = ({ publicacion }: TarjetaPublicacionesProps) => {
  const navigation =
    useNavigation<NavigationProp<RootStackParamList, Screens>>()

  const getImagenPrincipal = () => {
    const { multimediaResult } = publicacion
    const main = multimediaResult?.find((file) => file.tipo === 'image')
    if (!main) return null

    return (
      <Image
        source={{ uri: main?.link }}
        style={{ width: WIDTH_DIMENSIONS * 0.88, height: 100 }}
      />
    )
  }

  const getVideoPrincipal = () => {
    const { multimediaResult } = publicacion
    const main = multimediaResult?.find((file) => file.tipo === 'video')
    if (!main) return null

    return (
      <VideoPlayer
        style={{ width: WIDTH_DIMENSIONS * 0.88, height: 100 }}
        videoProps={{
          source: { uri: main.link },
          resizeMode: 'contain' as ResizeMode,
          isLooping: true,
        }}
      />
    )
  }

  const getImagePlaceholder = () => {
    return (
      <Image
        source={require('../../../../assets/publicacion_default_icon.png')}
        style={{
          width: WIDTH_DIMENSIONS * 0.88,
          height: 100,
          borderRadius: 40 / 2,
        }}
      />
    )
  }

  const portadaPrincipal =
    getImagenPrincipal() || getVideoPrincipal() || getImagePlaceholder()

  return (
    <Pressable
      onPress={() =>
        navigation.navigate('DetallePublicacion', {
          token: publicacion.token || '',
        })
      }
    >
      <TarjetaTemplate shadow={false}>
        <View style={tw`pt-2 pb-4 relative`}>
          <CustomText style={`${TEXT_COLORS.DARK_BLUE}`}>
            {publicacion.titulo}
          </CustomText>
          <View style={tw`my-3 w-full relative`}>
            {portadaPrincipal}
            <View style={tw`absolute bottom-1 -left-4`}>
              <LinkedBadges
                etiquetas={publicacion.etiquetasResult || []}
                tipo="transparent"
              />
            </View>
          </View>

          <View style={tw`w-full pb-6`}>
            <View style={tw`px-3 pt-1`}>
              <Text numberOfLines={2}>{publicacion.descripcion}</Text>
            </View>
          </View>

          <Pressable style={tw`absolute top-1 -right-2 px-4 py-2`}>
            <Image
              source={require('../../../../assets/tag_icon.png')}
              style={{ width: 15, height: 15 }}
            />
          </Pressable>

          <View style={tw`absolute bottom-0 right-2`}>
            <Text style={tw`${TEXT_COLORS.DARK_GRAY} capitalize text-xs`}>
              {publicacion.first_name} {publicacion.last_name}{' '}
              {publicacion.ultimo_cambio}
            </Text>
          </View>
        </View>
      </TarjetaTemplate>
    </Pressable>
  )
}

export default TarjetaPublicaciones

=== RastreoMain.tsx ===
import { NavigationProp, useNavigation } from '@react-navigation/native'
import * as React from 'react'
import { Image, Text, View } from 'react-native'
import tw from 'twrnc'
import { Ruta } from '../../../models/Rutas'
import { RootStackParamList, Screens } from '../../../models/Screens.types'
import {
  BACKGROUND_COLORS,
  HEIGHT_DIMENSIONS,
  TEXT_COLORS,
  WIDTH_DIMENSIONS,
} from '../../../utils/constants'
import { getHorasEstimadas } from '../../../utils/rastreoCalculations'
import ButtonPrimary from '../../atomos/ButtonPrimary'
import { CustomText } from '../../atomos/CustomText'
import HeaderRoundedContainer from '../../moleculas/HeaderRoundedContainer'
import RoundedWhiteBaseTemplate from '../../organismos/RoundedWhiteBaseTemplate'

interface RastreoMainProp {
  ruta: Ruta
}

const RastreoMain = ({ ruta }: RastreoMainProp) => {
  const navigation =
    useNavigation<NavigationProp<RootStackParamList, Screens>>()

  const getDatesRange = () => {
    const { fecha_inicio, fecha_fin } = ruta || {}
    const dateStart = new Date(fecha_inicio || '')
    const dateEnd = new Date(fecha_fin || '')
    const inicio = `${dateStart?.getHours()}:${dateStart?.getMinutes()}`
    const fin = `${dateEnd?.getHours()}:${dateEnd?.getMinutes()}`
    return inicio + ' - ' + fin
  }

  return (
    <View style={tw`px-2`}>
      <HeaderRoundedContainer>
        <CustomText
          style={`text-3xl ${TEXT_COLORS.DARK_BLUE}`}
          containerProps={{ textAlign: 'center' }}
        >
          {ruta?.nombre}
        </CustomText>

        <View style={tw`w-9/12 mx-auto mt-8`}>
          <Text style={tw`${TEXT_COLORS.DARK_GRAY} text-center text-base`}>
            Duración {getDatesRange()}
          </Text>
          <Text style={tw`${TEXT_COLORS.DARK_GRAY} text-center text-base`}>
            (Aproximadamente{' '}
            {getHorasEstimadas(ruta.fecha_inicio, ruta.fecha_fin)} horas)
          </Text>
        </View>
        <View style={tw`w-9/12 mx-auto mt-4 mb-2`}>
          <Text style={tw`${TEXT_COLORS.DARK_GRAY} text-center text-base`}>
            {ruta?.participantes?.length || 0} Participates registrados
          </Text>
        </View>
      </HeaderRoundedContainer>

      <RoundedWhiteBaseTemplate shadow={false}>
        <Image
          source={require('../../../../assets/rastreo_ruta_icon.png')}
          style={{
            width: WIDTH_DIMENSIONS * 0.9,
            height: HEIGHT_DIMENSIONS * 0.5,
            marginTop: 6,
            marginBottom: 4,
          }}
          resizeMode="contain"
        />
        <View style={tw`w-8/12 mx-auto`}>
          <ButtonPrimary
            label="Iniciar Ruta"
            style={`w-full ${BACKGROUND_COLORS.PRIMARY_BLUE} rounded-xl`}
            icon={require('../../../../assets/rastreo_icon.png')}
            handleClick={() =>
              navigation.navigate('RastreoUbicacion', { ruta })
            }
          />
        </View>
      </RoundedWhiteBaseTemplate>
    </View>
  )
}

export default RastreoMain

=== RastreoUbicacion.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Image, View } from 'react-native'
import * as Location from 'expo-location'
import * as TaskManager from 'expo-task-manager'
import MapView, { Marker } from 'react-native-maps'
import {
  HEIGHT_DIMENSIONS,
  uri_meta_icon,
  WIDTH_DIMENSIONS,
} from '../../../utils/constants'
import RoundedButtonIcon from '../../atomos/RoundedButtonIcon'
import RutaModal from '../../organismos/RutaModal'
import { useSelector } from 'react-redux'
import { RootState } from '../../../redux/store'
import { configureBgTask } from '../../../backgroundTasks/locationTask'
import { getDatabase, ref, onValue, set, remove, get } from 'firebase/database'
import { Ruta } from '../../../models/Rutas'
import RutaFinalRastreoModal from '../../organismos/RutaFinalRastreoModal'
import {
  calcularDistancia,
  calcularKcalorias,
  calcularTiempoRecorrido,
  calcularVelocidadPromedio,
  getHorasEstimadas,
} from '../../../utils/rastreoCalculations'
import { finalizarRastreo } from '../../../lib/services/rutas.services'

const TASK_NAME = 'BACKGROUND_LOCATION_TASK'

interface RastreoUbicacionProps {
  ruta: Ruta
}

const RastreoUbicacion = ({ ruta }: RastreoUbicacionProps) => {
  const [location, setLocation] = React.useState<any>()
  const [errorMsg, setErrorMsg] = React.useState('')
  const [infParticipantes, setinfParticipantes] = React.useState<any>([])
  const [showModal, setShowModal] = React.useState(false)
  const [showFinalModal, setShowFinalModal] = React.useState(false)
  const { authToken, user } = useSelector((state: RootState) => state.user)

  React.useEffect(() => {
    ;(async () => {
      const { status } = await Location.requestForegroundPermissionsAsync()
      if (status !== 'granted') {
        setErrorMsg(
          'El permiso para acceder a la ubicación en primer plano fue negado'
        )
        return errorMsg
      }
      const { status: statusBackground } =
        await Location.requestBackgroundPermissionsAsync()
      if (statusBackground !== 'granted') {
        setErrorMsg(
          'El permiso para acceder a la ubicación en segundo plano fue negado.'
        )
        return errorMsg
      }
      // await startForegroundUpdate()
      await startBackgroundLocation()
    })()
  }, [])

  React.useEffect(() => {
    if (authToken) {
      configureBgTask({
        userToken: authToken,
        foto:
          user?.foto ||
          'https://firebasestorage.googleapis.com/v0/b/omega-keep-354005.appspot.com/o/usuarios%2Fuser.png?alt=media&token=646d4b60-b175-4ff1-85a0-25493710df24',
        setSelfLocation: (location) => setLocation(location),
      })
    }
  }, [])

  React.useEffect(() => {
    ;(async () => {
      const db = getDatabase()
      const reference = ref(db, 'users')
      onValue(reference, (snapshot) => {
        const values = snapshot.val()
        setinfParticipantes(
          Object.values(values).map((infParticipante) => infParticipante)
        )
        if (authToken) {
          const { location, retorno } = values[authToken] || {}
          setLocation({
            coords: {
              latitude: location?.latitude || 0,
              longitude: location?.longitude || 0,
            },
            retorno,
          })
        }
      })
    })()
  }, [])

  React.useEffect(() => {
    if (location && ruta.ubicacion && !location.retorno) {
      const { coordinateY } = ruta.ubicacion || {}
      const distance = calcularDistancia(location?.coords, coordinateY)
      if (distance < 2) {
        const db = getDatabase()
        const reference = ref(db, 'users/' + authToken + '/retorno')
        set(reference, true)
      }
    }
  }, [location])

  React.useEffect(() => {
    ;(async () => {
      if (location && location.retorno && ruta.ubicacion) {
        const { coordinateX } = ruta.ubicacion || {}
        const distance = calcularDistancia(location?.coords, coordinateX)
        if (distance < 2) {
          await stopTracking()
          setShowFinalModal(true)
        }
      }
    })()
  }, [location])

  const stopTracking = async () => {
    if (TaskManager.isTaskDefined(TASK_NAME)) {
      Location.stopLocationUpdatesAsync(TASK_NAME)
    }
    const hitos = await getHitosRuta()
    if (authToken && ruta.token) {
      await finalizarRastreo(hitos, authToken, ruta.token)
    }
  }

  const getHitosRuta = async () => {
    const db = getDatabase()
    const reference = ref(db, 'users/' + authToken)
    const snapshot = await get(reference)
    const values = snapshot.val()
    const kilometros = (values?.distance?.distance || 0) / 1000

    const velocidad = calcularVelocidadPromedio(
      Object.values(values?.speed || {})
    )

    const horas = calcularTiempoRecorrido(
      Object.values(values?.timestamp || {})
    )

    const kilocalorias = calcularKcalorias(horas, user?.peso || 0)
    remove(reference)
    return { kilometros, velocidad, kilocalorias, horas }
  }

  const startBackgroundLocation = async () => {
    if (TaskManager.isTaskDefined(TASK_NAME)) {
      await Location.startLocationUpdatesAsync(TASK_NAME, {
        accuracy: 1,
        timeInterval: 5,
        showsBackgroundLocationIndicator: true,
        distanceInterval: 1,
        foregroundService: {
          notificationTitle: 'Rastreando tu ubicación',
          notificationBody:
            'Estamos accediendo a tu ubicación para medir tu rendimiento en la ruta.',
          notificationColor: '#008000',
        },
      })
    }
  }

  //Útil para que el enfoque inicial del mapa sea siempre Guayaquil
  const initialRegion = {
    latitude: -2.1453021140388437,
    latitudeDelta: 0.2568955895381215,
    longitude: -79.93498552590609,
    longitudeDelta: 0.13138934969902039,
  }

  return (
    <View style={tw`relative`}>
      <MapView
        style={{ width: WIDTH_DIMENSIONS, height: HEIGHT_DIMENSIONS }}
        initialRegion={initialRegion}
      >
        <Marker
          coordinate={{
            longitude: ruta?.ubicacion?.coordinateY?.longitude,
            latitude: ruta?.ubicacion?.coordinateY?.latitude,
          }}
          image={{ uri: uri_meta_icon }}
        />

        {infParticipantes.map((participante: any, index: number) => {
          const { longitude, latitude, foto } = participante.location || {}
          return (
            <Marker
              key={index}
              coordinate={{
                longitude: longitude || 0,
                latitude: latitude || 0,
              }}
            >
              <Image
                source={{ uri: foto }}
                style={{ width: 35, height: 35, borderRadius: 100 / 2 }}
              />
            </Marker>
          )
        })}
      </MapView>
      <View style={tw`absolute top-2 left-2`}>
        <RoundedButtonIcon
          src={require('../../../../assets/menu_white_icon.png')}
          handleClick={() => setShowModal(true)}
        />
      </View>
      {showModal && (
        <RutaModal
          visible={showModal}
          setVisible={setShowModal}
          participantes={ruta?.participantes}
          nombre={ruta?.nombre || ''}
          handleAbandonar={stopTracking}
          tokenRuta={ruta?.token}
          horasEstimadas={getHorasEstimadas(
            ruta?.fecha_inicio,
            ruta?.fecha_fin
          )}
        />
      )}
      {showFinalModal && (
        <RutaFinalRastreoModal
          token={ruta?.token || ''}
          visible={showFinalModal}
          setVisible={setShowFinalModal}
        />
      )}
    </View>
  )
}

export default RastreoUbicacion

=== ReporteFinalRuta.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Image, Text, View } from 'react-native'
import { CustomText } from '../../atomos/CustomText'
import { TEXT_COLORS } from '../../../utils/constants'
import RoundedWhiteBaseTemplate from '../../organismos/RoundedWhiteBaseTemplate'
import Ruler from '../../atomos/Ruler'
import { useSelector } from 'react-redux'
import { RootState } from '../../../redux/store'
import {
  enviarComentariosRuta,
  getDatosRastreoById,
} from '../../../lib/services/rutas.services'
import { HitosRuta } from '../../../models/Rutas'
import { capitalize } from '../../../utils/capitalizeText'
import HeaderRoundedContainer from '../../moleculas/HeaderRoundedContainer'
import Hito from '../../moleculas/Hito'
import { getAdminTokens } from '../../../lib/services/notifications.services'
import { usePermissionsNotifications } from '../../../hooks/usePermissionsNotifications'
import { NavigationProp, useNavigation } from '@react-navigation/native'
import { RootStackParamList, Screens } from '../../../models/Screens.types'
import FeedbackRuta from '../../moleculas/FeedbackRuta'

interface ReporteFinalRutaProps {
  tokenRuta: string
  tokenUsuario: string
}

const ReporteFinalRuta = ({
  tokenRuta,
  tokenUsuario,
}: ReporteFinalRutaProps) => {
  const { authToken, user } = useSelector((state: RootState) => state.user)
  const [hitosRuta, setHitosRuta] = React.useState<HitosRuta>()
  const [comentario, setComentario] = React.useState('')
  const [stars, setStars] = React.useState(0)
  const [isLoading, setIsLoading] = React.useState(false)
  const { sendPushNotification } = usePermissionsNotifications()
  const navigation =
    useNavigation<NavigationProp<RootStackParamList, Screens>>()

  React.useEffect(() => {
    ;(async () => {
      if (authToken && user?.id_usuario) {
        const datosRastreo = await getDatosRastreoById(
          tokenRuta,
          authToken,
          tokenUsuario
        )
        setHitosRuta(datosRastreo)
        setStars(datosRastreo?.estrellas || 0)
        setComentario(datosRastreo?.comentario || '')
      }
    })()
  }, [])

  const sendNotificationComentariosToAdmins = async () => {
    if (!authToken) return
    const tokens = await getAdminTokens(authToken)
    await sendPushNotification({
      tokens,
      title: `Nuevos comentarios en ruta ${hitosRuta?.nombre}`,
      body: `${capitalize(hitosRuta?.first_name)} ${capitalize(
        hitosRuta?.last_name
      )} ha comentado esta ruta`,
    })
  }

  const sendFeedback = async () => {
    setIsLoading(true)
    if (authToken) {
      await enviarComentariosRuta(stars, comentario, authToken, tokenRuta)
    }
    await sendNotificationComentariosToAdmins()
    navigation.navigate('Rutas')
    setIsLoading(false)
  }
  console.log(hitosRuta)
  const readOnly = tokenUsuario !== user?.id_usuario
  return (
    <View style={tw`px-4`}>
      <HeaderRoundedContainer>
        {!readOnly ? (
          <CustomText
            style={`${TEXT_COLORS.DARK_BLUE} text-2xl`}
            containerProps={{ textAlign: 'center' }}
          >
            ¡Felicidades {capitalize(hitosRuta?.first_name || '')}!
          </CustomText>
        ) : (
          <CustomText
            style={`${TEXT_COLORS.DARK_BLUE} text-2xl`}
            containerProps={{ textAlign: 'center' }}
          >
            Los hitos de {capitalize(hitosRuta?.first_name || '')} en{' '}
            {hitosRuta?.nombre || ''}
          </CustomText>
        )}
        <View style={tw`relative mx-auto`}>
          <Image
            source={
              user?.foto
                ? { uri: hitosRuta?.foto }
                : require('../../../../assets/user.png')
            }
            style={{
              width: 200,
              height: 200,
              borderRadius: 1000 / 2,
              borderWidth: 12,
              borderColor: '#fff',
              marginVertical: 12,
            }}
            resizeMode="contain"
          />
          <Image
            source={require('../../../../assets/lazo.png')}
            style={{
              width: 50,
              height: 90,
              position: 'absolute',
              bottom: 0,
              right: 0,
            }}
            resizeMode="contain"
          />
        </View>

        {!readOnly ? (
          <Text
            style={tw`${TEXT_COLORS.DARK_BLUE} font-semibold text-xl text-center`}
          >
            Tus hitos en {hitosRuta?.nombre}
          </Text>
        ) : null}
        <View style={tw`w-10/12 mt-4 mx-auto mb-4`}>
          <Hito
            label={`${hitosRuta?.horas?.toFixed(2)} horas de recorrido`}
            image={require('../../../../assets/reloj.png')}
          />

          <Ruler style={`w-7/12 mx-auto bg-[#f4f4f4]`} />
          <Hito
            label={`${hitosRuta?.kilometros?.toFixed(1)} Km pedaleados`}
            image={require('../../../../assets/rastreo_ruta_icon.png')}
          />
          <Ruler style={`w-7/12 mx-auto bg-[#f4f4f4]`} />
          <Hito
            label={`Velocidad ${hitosRuta?.velocidad?.toFixed(1)} km/h`}
            image={require('../../../../assets/velocidad_icon.png')}
          />
          <Ruler style={`w-7/12 mx-auto bg-[#f4f4f4]`} />
          <Hito
            label={`${hitosRuta?.kilocalorias?.toFixed(
              1
            )} kilocalorias quemadas`}
            image={require('../../../../assets/calorias.png')}
          />
        </View>
      </HeaderRoundedContainer>

      <RoundedWhiteBaseTemplate shadow={false}>
        <FeedbackRuta
          stars={stars}
          setStars={setStars}
          comentario={comentario}
          setComentario={setComentario}
          isLoading={isLoading}
          sendFeedback={sendFeedback}
          isReadOnly={readOnly}
        />
      </RoundedWhiteBaseTemplate>
    </View>
  )
}

export default ReporteFinalRuta

=== ReporteRutaIncompleta.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Text, View, Image } from 'react-native'
import { CustomText } from '../../atomos/CustomText'
import HeaderRoundedContainer from '../../moleculas/HeaderRoundedContainer'
import {
  HEIGHT_DIMENSIONS,
  TEXT_COLORS,
  WIDTH_DIMENSIONS,
} from '../../../utils/constants'
import RoundedWhiteBaseTemplate from '../../organismos/RoundedWhiteBaseTemplate'
import FeedbackRuta from '../../moleculas/FeedbackRuta'
import { useSelector } from 'react-redux'
import { RootState } from '../../../redux/store'
import { enviarComentariosRuta } from '../../../lib/services/rutas.services'
import { NavigationProp, useNavigation } from '@react-navigation/native'
import { RootStackParamList, Screens } from '../../../models/Screens.types'

interface Props {
  tokenRuta: string
  tokenUsuario: string
}

const ReporteRutaIncompleta = ({ tokenRuta, tokenUsuario }: Props) => {
  const [comentario, setComentario] = React.useState('')
  const [stars, setStars] = React.useState(0)
  const [isLoading, setIsLoading] = React.useState(false)
  const { authToken, user } = useSelector((state: RootState) => state.user)
  const navigation =
    useNavigation<NavigationProp<RootStackParamList, Screens>>()

  const sendFeedback = async () => {
    setIsLoading(true)
    if (authToken) {
      await enviarComentariosRuta(stars, comentario, authToken, tokenRuta)
    }
    navigation.navigate('Rutas')
    setIsLoading(false)
  }

  return (
    <View style={tw`px-2`}>
      <HeaderRoundedContainer>
        <CustomText
          containerProps={{ textAlign: 'center' }}
          style={`${TEXT_COLORS.DARK_BLUE} text-3xl`}
        >
          ¡Sigue así!
        </CustomText>

        <View style={tw`flex flex-col items-center mt-4`}>
          <Image
            source={require('../../../../assets/ruta_incompleta_icon.png')}
            style={{
              width: WIDTH_DIMENSIONS * 0.5,
              height: HEIGHT_DIMENSIONS * 0.3,
            }}
            resizeMode="contain"
          />
          <View style={tw`mt-2 mb-8`}>
            <Text
              style={tw`${TEXT_COLORS.GRAY_PLACEHOLDER} text-lg text-center`}
            >
              Continua practicando.
            </Text>
            <Text
              style={tw`${TEXT_COLORS.GRAY_PLACEHOLDER} text-lg text-center`}
            >
              ¡Nos vemos en la siguiente ruta!
            </Text>
          </View>
        </View>
      </HeaderRoundedContainer>

      <RoundedWhiteBaseTemplate shadow={false}>
        <FeedbackRuta
          stars={stars}
          setStars={setStars}
          comentario={comentario}
          setComentario={setComentario}
          isLoading={isLoading}
          sendFeedback={sendFeedback}
          isReadOnly={tokenUsuario !== user?.id_usuario}
        />
      </RoundedWhiteBaseTemplate>
    </View>
  )
}

export default ReporteRutaIncompleta

=== RegistroFormulario.tsx ===
import { NavigationProp, useNavigation } from '@react-navigation/native'
import { Formik } from 'formik'
import * as React from 'react'
import { Image, Text, View } from 'react-native'
import tw from 'twrnc'
import { usePermissionsNotifications } from '../../../hooks/usePermissionsNotifications'
import { createUser } from '../../../lib/services/user.services'
import { RootStackParamList, Screens } from '../../../models/Screens.types'
import { Registro } from '../../../models/User'
import { registroValidationSchema } from '../../../schemas/RegistroSchema'
import { BACKGROUND_COLORS, HEIGHT_DIMENSIONS } from '../../../utils/constants'
import ButtonPrimary from '../../atomos/ButtonPrimary'
import Input from '../../moleculas/Input'
import Ruler from '../../atomos/Ruler'
import Spinner from '../../atomos/Spinner'

const RegistroFormulario = () => {
  const navigation =
    useNavigation<NavigationProp<RootStackParamList, Screens>>()
  const [isLoading, setIsLoading] = React.useState(false)
  const { registerForPushNotificationsAsync } = usePermissionsNotifications()

  const initialValues = {
    first_name: '',
    last_name: '',
    username: '',
    email: '',
    password: '',
    password_confirmation: '',
  }

  const handleSubmit = async (props: Registro) => {
    setIsLoading(true)
    const token = (await registerForPushNotificationsAsync()) || ''
    await createUser(props, token)
    navigation.navigate('Login')
    setIsLoading(false)
  }
  return (
    <View style={tw`pt-[${HEIGHT_DIMENSIONS * 0.1}]`}>
      <View style={tw`w-full flex flex-row justify-center`}>
        <Image
          source={require('../../../../assets/ecuaciclismo_logo_small.png')}
        />
      </View>
      <Text style={tw`text-[#F16F31] text-2xl text-center font-bold`}>
        ¡Registrate!
      </Text>
      <Formik
        initialValues={initialValues}
        validationSchema={registroValidationSchema}
        onSubmit={handleSubmit}
      >
        {({ handleSubmit, values, setFieldValue }) => (
          <>
            <Input
              type="givenName"
              stylesProp="w-full mx-auto pt-[5%] pb-[2%]"
              name="first_name"
              placeholder="Nombre"
              value={values.first_name}
              setValue={(value) => setFieldValue('first_name', value)}
            />
            <Input
              placeholder="Apellido"
              type="familyName"
              stylesProp="w-full mx-auto py-[2%]"
              name="last_name"
              value={values.last_name}
              setValue={(value) => setFieldValue('last_name', value)}
            />

            <Ruler style="w-10/12 mx-auto my-[4%] bg-[#e6e6e9]" />

            <Input
              placeholder="Usuario"
              type="username"
              stylesProp="w-full mx-auto py-[2%]"
              name="username"
              value={values.username}
              setValue={(value) => setFieldValue('username', value)}
            />

            <Input
              placeholder="Correo electrónico"
              type="emailAddress"
              stylesProp="w-full mx-auto py-[2%]"
              name="email"
              value={values.email}
              setValue={(value) => setFieldValue('email', value)}
            />
            <Ruler style="w-10/12 mx-auto my-[4%] bg-[#e6e6e9]" />
            <Input
              placeholder="Contraseña"
              type="password"
              stylesProp="w-full mx-auto py-[2%]"
              name="password"
              value={values.password}
              setValue={(value) => setFieldValue('password', value)}
            />

            <Input
              placeholder="Confirmar Contraseña"
              type="password"
              stylesProp="w-full mx-auto py-[2%]"
              name="password_confirmation"
              value={values.password_confirmation}
              setValue={(value) =>
                setFieldValue('password_confirmation', value)
              }
            />
            {isLoading ? (
              <Spinner />
            ) : (
              <View style={tw`w-9/12 mx-auto my-[7%]`}>
                <ButtonPrimary
                  label="¡Unirme!"
                  handleClick={handleSubmit}
                  style={BACKGROUND_COLORS.SKY_BLUE}
                />
              </View>
            )}
          </>
        )}
      </Formik>
    </View>
  )
}

export default RegistroFormulario

=== RutasFeed.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { View } from 'react-native'
import RutasFeedHeader from './RutasFeedHeader'
import TarjetaRutas from './TarjetaRutas'
import { useDispatch, useSelector } from 'react-redux'
import { RootState } from '../../../redux/store'
import { getAllRutas } from '../../../lib/services/rutas.services'
import { Ruta } from '../../../models/Rutas'
import {
  setAllRutas,
  setRutasFeed,
  setRutasPropuestas,
} from '../../../redux/ruta'
import { setEtiquetas } from '../../../redux/rutasBusqueda'
import WithoutResults from '../../moleculas/WithoutResults'
import EmptyTarjetaPublicacion from '../../organismos/EmptyTarjetaPublicacion'

const RutasFeed = () => {
  const { authToken } = useSelector((state: RootState) => state.user)
  const { rutasFeed } = useSelector((state: RootState) => state.ruta)
  const [isRending, setIsRending] = React.useState(true)
  const dispatch = useDispatch()
  const { rutaHasModified } = useSelector((state: RootState) => state.ruta)

  React.useEffect(() => {
    ;(async function () {
      if (authToken) {
        const response: Ruta[] = await getAllRutas(authToken)
        const rutasPropuestas = response.filter((ruta) => !ruta.aprobado)
        const rutaspublicadas = response.filter((ruta) => ruta.aprobado)
        dispatch(setRutasFeed({ rutasFeed: rutaspublicadas }))
        dispatch(setAllRutas({ allRutas: rutaspublicadas }))
        dispatch(setRutasPropuestas({ rutasPropuestas }))
        setIsRending(false)
      }
    })()
  }, [rutaHasModified])

  React.useEffect(() => {
    dispatch(setEtiquetas({ name: '' }))
  }, [])

  const rutas = rutasFeed
    ?.slice()
    ?.sort((a, b) => (a.estado?.prioridad || 0) - (b.estado?.prioridad || 0))

  return (
    <View style={tw`px-2`}>
      <RutasFeedHeader />
      <View style={tw`py-2`}>
        {isRending ? (
          <>
            <EmptyTarjetaPublicacion />
            <EmptyTarjetaPublicacion />
            <EmptyTarjetaPublicacion />
          </>
        ) : rutas && rutas?.length <= 0 ? (
          <WithoutResults styles="pt-12" />
        ) : (
          rutas?.map((ruta, index) => <TarjetaRutas ruta={ruta} key={index} />)
        )}
      </View>
    </View>
  )
}

export default RutasFeed

=== RutasFeedHeader.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { View } from 'react-native'
import { NavigationProp, useNavigation } from '@react-navigation/native'
import { RootStackParamList, Screens } from '../../../models/Screens.types'
import HeaderRoundedContainer from '../../moleculas/HeaderRoundedContainer'
import SectionTitle from '../../moleculas/SectionTitle'
import { useSelector } from 'react-redux'
import { RootState } from '../../../redux/store'
import BarraFiltrosRutas from '../../organismos/BarraFiltrosRutas'

const RutasFeedHeader = () => {
  const { user } = useSelector((state: RootState) => state.user)
  const [isAdmin, setIsAdmin] = React.useState(false)
  const navigation =
    useNavigation<NavigationProp<RootStackParamList, Screens>>()

  React.useEffect(() => {
    setIsAdmin(user?.admin || false)
  }, [])

  const icon = isAdmin
    ? require('../../../../assets/plus.png')
    : require('../../../../assets/raise_hand_icon.png')

  const iconDimension = isAdmin ? 18 : 27

  return (
    <HeaderRoundedContainer>
      <View style={tw`mx-4`}>
        <SectionTitle
          text="Rutas"
          styleText="text-3xl"
          background={false}
          hasButton
          isRestricted={false}
          buttonIcon={icon}
          iconDimension={iconDimension}
          handleClickButton={() => navigation.navigate('RutasFormulario')}
        />
      </View>
      <BarraFiltrosRutas />
    </HeaderRoundedContainer>
  )
}

export default RutasFeedHeader

=== TarjetaRutas.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Text, View, Image, Pressable } from 'react-native'
import { CustomText } from '../../atomos/CustomText'
import {
  BACKGROUND_COLORS,
  ESTADOS_RUTA,
  TEXT_COLORS,
} from '../../../utils/constants'
import Gap from '../../atomos/Gap'
import { NavigationProp, useNavigation } from '@react-navigation/native'
import { RootStackParamList, Screens } from '../../../models/Screens.types'
import { EstadoRuta, Ruta } from '../../../models/Rutas'
import ImageScaleColor from '../../moleculas/ImageScaleColor'
import { getEstadoRuta } from '../../../utils/parseRouteState'
import BandaEstadoRuta from '../../atomos/BandaEstadoRuta'
import { useSelector } from 'react-redux'
import { RootState } from '../../../redux/store'
import { getFecha } from '../../../utils/parseDates'

interface TarjetaRutasProps {
  ruta: Ruta
}
const TarjetaRutas = ({ ruta }: TarjetaRutasProps) => {
  const navigation =
    useNavigation<NavigationProp<RootStackParamList, Screens>>()
  const { user } = useSelector((state: RootState) => state.user)

  const getColor = (estado: EstadoRuta) => {
    switch (estado) {
      case ESTADOS_RUTA.EN_CURSO:
        return `${BACKGROUND_COLORS.GREEN_PRIMARY} bg-opacity-12`
      case ESTADOS_RUTA.DISPONIBLE:
        return BACKGROUND_COLORS.BLUE_LIGHTER
      case ESTADOS_RUTA.CANCELADA:
      case ESTADOS_RUTA.FINALIZADA:
        return BACKGROUND_COLORS.GRAY_PLACEHOLDER
      case ESTADOS_RUTA.SIN_CUPOS:
        return `${BACKGROUND_COLORS.ORANGE} bg-opacity-8`
      default:
        return BACKGROUND_COLORS.BLUE_LIGHTER
    }
  }

  const getBandColor = (estado: EstadoRuta) => {
    switch (estado) {
      case ESTADOS_RUTA.EN_CURSO:
        return BACKGROUND_COLORS.GREEN_PRIMARY
      case ESTADOS_RUTA.DISPONIBLE:
        return BACKGROUND_COLORS.SKY_BLUE
      case ESTADOS_RUTA.CANCELADA:
        return `bg-black bg-opacity-40`
      case ESTADOS_RUTA.FINALIZADA:
        return `bg-black bg-opacity-70`
      case ESTADOS_RUTA.SIN_CUPOS:
        return BACKGROUND_COLORS.ORANGE
      default:
        return BACKGROUND_COLORS.BLUE_LIGHTER
    }
  }

  const getImageScale = (estado: EstadoRuta) => {
    switch (estado) {
      case ESTADOS_RUTA.EN_CURSO:
      case ESTADOS_RUTA.DISPONIBLE:
        return 'none'
      case ESTADOS_RUTA.CANCELADA:
      case ESTADOS_RUTA.FINALIZADA:
        return 'gray'
      case ESTADOS_RUTA.SIN_CUPOS:
        return 'red'
      default:
        return 'none'
    }
  }

  const getImagenPrincipal = () => {
    const [main] = ruta.fotos || []
    if (!main) return null

    return main?.link
  }

  const {
    participantes: participantesRutas = [],
    inscrito,
    aprobado,
  } = ruta || {}
  const estadoRuta = getEstadoRuta(ruta.estado)
  const color = aprobado ? getColor(estadoRuta) : BACKGROUND_COLORS.BLUE_LIGHTER
  const bandColor = getBandColor(estadoRuta)
  const imageScale = aprobado ? getImageScale(estadoRuta) : 'none'
  const participantes = participantesRutas.length
  return (
    <Pressable
      onPress={() =>
        navigation.navigate('DetalleRuta', { token: ruta.token || '' })
      }
      style={tw`my-1 relative overflow-hidden shadow-xl`}
    >
      <View
        style={tw`rounded-xl flex flex-row items-center py-2 px-4 ${color}`}
      >
        <ImageScaleColor
          scale={imageScale}
          image={{ uri: getImagenPrincipal() }}
        />

        <View style={tw`pl-5 pt-2`}>
          <CustomText style={`${TEXT_COLORS.DARK_BLUE}`}>
            {ruta.nombre}
          </CustomText>
          <Gap py="1">
            <Text style={tw`${TEXT_COLORS.DARK_BLUE}`}>@ {ruta.lugar}</Text>
            <Text style={tw`${TEXT_COLORS.DARK_BLUE} font-semibold`}>
              {getFecha(ruta.fecha_inicio as any)}
            </Text>
          </Gap>

          {inscrito && (
            <View style={tw`flex flex-row`}>
              <Image
                source={
                  user?.foto
                    ? { uri: user?.foto }
                    : require('../../../../assets/user.png')
                }
                style={{
                  width: 25,
                  height: 25,
                  borderRadius: 100 / 2,
                }}
                resizeMode="contain"
              />
              <Text style={tw`${TEXT_COLORS.DARK_BLUE} pl-2`}>
                Tú
                {participantes > 1
                  ? ` y ${participantes - 1} ${
                      participantes - 1 > 1 ? 'ciclistas' : 'ciclista'
                    } más`
                  : ''}
              </Text>
            </View>
          )}
        </View>
      </View>
      {aprobado ? (
        <BandaEstadoRuta estado={estadoRuta} color={bandColor} />
      ) : (
        <BandaEstadoRuta
          estado="Pendiente"
          color={BACKGROUND_COLORS.DARK_BLUE}
        />
      )}
    </Pressable>
  )
}

export default TarjetaRutas

=== Seguridad.tsx ===
import * as React from 'react'
import tw from 'twrnc'
import { Text, View, Image } from 'react-native'
import { CustomText } from '../../atomos/CustomText'
import { TEXT_COLORS } from '../../../utils/constants'

const SeguridadDatos = () => {
  return (
    <View style={tw`bg-white px-2 pt-8`}>
      <View style={tw`mx-auto`}>
        <Image source={require('../../../../assets/ecuaciclismo_logo.png')} />
      </View>
      <CustomText
        containerProps={{ textAlign: 'center', marginBottom: 16 }}
        style={`text-lg ${TEXT_COLORS.DARK_BLUE}`}
      >
        Sobre Nosotros
      </CustomText>
      <Text style={tw`text-base ${TEXT_COLORS.DARK_BLUE} px-8 text-center`}>
        Nuestro fin es promover el uso de la bicicleta; como un medio de
        transporte que no contamina el medio ambiente, ayuda a la salud de las
        personas y fomenta el cicloturismo o turismo de aventura.
      </Text>
      <View style={tw`mt-16`}>
        <Text style={tw`text-base ${TEXT_COLORS.DARK_BLUE} px-8 text-center`}>
          Si tienes dudas o sugerencias para mejorar esta app, por favor,
          contactanos al
        </Text>
        <Text
          style={tw`text-base ${TEXT_COLORS.DARK_BLUE} px-8 text-center pt-4`}
        >
          Teléfono: +59309952251
        </Text>
        <Text style={tw`text-base ${TEXT_COLORS.DARK_BLUE} px-8 text-center`}>
          Email: ecuador.sanchez@gmail.com
        </Text>
      </View>
    </View>
  )
}

export default SeguridadDatos
=== SideMenu.tsx ===
import {
  DrawerContentComponentProps,
  DrawerContentScrollView,
} from '@react-navigation/drawer'
import * as React from 'react'
import { StyleSheet, View } from 'react-native'
import { useDispatch } from 'react-redux'
import tw from 'twrnc'
import { ScreensDrawer } from '../../models/Screens.types'
import { setActiveTab } from '../../redux/drawerTabs'
import OptionSideMenu from '../atomos/OptionSideMenu'
import Ruler from '../atomos/Ruler'
import UserInformation from '../moleculas/UserInformation'

const SideMenu = (props: DrawerContentComponentProps) => {
  const dispatch = useDispatch()

  const handleClick = (tab: ScreensDrawer) => {
    dispatch(setActiveTab({ activeTab: tab }))
    props.navigation.navigate(tab)
  }

  return (
    <DrawerContentScrollView {...props}>
      <View style={[tw`flex flex-row items-center pl-4`, styles.container]}>
        <UserInformation />
      </View>

      <View style={tw`mt-2`}>
        <View>
          <OptionSideMenu
            label="Inicio"
            name="Inicio"
            source={require('../../../assets/home_blue_icon.png')}
            handleClick={() => handleClick('Inicio')}
          />
          <Ruler style="w-11/12 bg-[#e6e6e6] mx-auto" />
        </View>

        <View>
          <OptionSideMenu
            label="Comunidad"
            name="Comunidad"
            source={require('../../../assets/comunidad_icon.png')}
            handleClick={() => handleClick('Comunidad')}
          />
          <Ruler style="w-11/12 bg-[#e6e6e6] mx-auto" />
        </View>

        <View>
          <OptionSideMenu
            label="Consejos"
            name="HistorialConsejos"
            source={require('../../../assets/consejo_blue_icon.png')}
            handleClick={() => handleClick('HistorialConsejos')}
          />
          <Ruler style="w-11/12 bg-[#e6e6e6] mx-auto" />
        </View>

        <View>
          <OptionSideMenu
            label="Novedades"
            name="Novedades"
            source={require('../../../assets/novedades_icon.png')}
            handleClick={() => handleClick('Novedades')}
          />
          <Ruler style="w-11/12 bg-[#e6e6e6] mx-auto" />
        </View>

        <View>
          <OptionSideMenu
            label="Contactenos"
            name="Contactenos"
            source={require('../../../assets/contactenos.png')}
            handleClick={() => handleClick('Contactenos')}
          />
          <Ruler style="w-11/12 bg-[#e6e6e6] mx-auto" />
        </View>

        <View>
          <OptionSideMenu
            label="Seguridad"
            name="Seguridad"
            source={require('../../../assets/seguridad.png')}
            handleClick={() => handleClick('Contactenos')}
          />
          <Ruler style="w-11/12 bg-[#e6e6e6] mx-auto" />
        </View>

      </View>
    </DrawerContentScrollView>
  )
}

export default SideMenu

const styles = StyleSheet.create({
  container: { backgroundColor: '#2D84C4', height: 70, marginTop: -4 },
})

=== UserValidator.tsx ===
import * as React from 'react'
import { View } from 'react-native'
import { useSelector } from 'react-redux'
import { RootState } from '../../redux/store'
import tw from 'twrnc'
interface UserValidatorProps {
  children: React.ReactNode | React.ReactNode[]
  stylesProp?: string
  userToken: string
}

const UserValidator = ({
  userToken,
  children,
  stylesProp,
}: UserValidatorProps) => {
  const { user } = useSelector((state: RootState) => state.user)

  return userToken === user?.id_usuario ? (
    <View style={tw`${stylesProp || ''}`}>{children}</View>
  ) : null
}

export default UserValidator

=== firebase.ts ===
import { initializeApp } from 'firebase/app'
import { getStorage } from 'firebase/storage'

const firebaseConfig = {
  apiKey: 'AIzaSyBUskTxCtQT-9L3Ih2ES5Zh9PnrcvNB2lc',
  authDomain: 'omega-keep-354005.firebaseapp.com',
  databaseURL: 'https://omega-keep-354005-default-rtdb.firebaseio.com',
  projectId: 'omega-keep-354005',
  storageBucket: 'omega-keep-354005.appspot.com',
  messagingSenderId: '492631611294',
  appId: '1:492631611294:web:90ecd447a69d1b0ba5288f',
}

const firebaseApp = initializeApp(firebaseConfig)
const firebaseStorage = getStorage(firebaseApp)

export { firebaseApp, firebaseStorage }

=== useAuthentication.ts ===
import axios from 'axios'
import { useDispatch } from 'react-redux'
import { cerrarSesion, iniciarSesion } from '../redux/user'
import * as SecureStore from 'expo-secure-store'
import { Login } from '../models/User'
import { useState } from 'react'

export const useAuthentication = () => {
  const dispatch = useDispatch()
  const [isLoading, setIsLoading] = useState(true)

  const initUser = async (props: Login) => {
    const data = { user: { email: props.email, password: props.password } }
    try {
      const response = await axios.post(
        'https://ecuaciclismoapp.pythonanywhere.com/api/token-auth/',
        data
      )

      const {
        first_name,
        last_name,
        email,
        username,
        token,
        admin,
        foto,
        genero,
        peso,
        edad,
        nivel,
        id_usuario,
      } = response.data || {}

      const user = {
        first_name,
        last_name,
        email,
        username,
        admin,
        foto,
        genero,
        peso,
        edad,
        nivel,
        id_usuario,
      }

      dispatch(
        iniciarSesion({
          token,
          user,
        })
      )

      await SecureStore.setItemAsync('user', JSON.stringify({ token, user }))
    } catch (e) {
      throw new Error('Failed to Login')
    }
  }

  const setUser = async () => {
    const result = await SecureStore.getItemAsync('user')
    if (result) {
      const data = JSON.parse(result)
      dispatch(
        iniciarSesion({
          token: data.token,
          user: data.user,
        })
      )
    }
    setIsLoading(false)
  }

  const deleteUserStore = async () => {
    await SecureStore.deleteItemAsync('user')
    dispatch(cerrarSesion())
  }

  return { initUser, setUser, deleteUserStore, isLoading }
}

=== useDebounce.ts ===
import { useEffect, useState } from 'react'

function useDebounce<T>(value: T, delay = 500): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value)

  useEffect(() => {
    const timeoutId = setTimeout(() => setDebouncedValue(value), delay)

    return () => {
      clearTimeout(timeoutId)
    }
  }, [value, delay])

  return debouncedValue
}

export default useDebounce

=== usePermissionsNotifications.ts ===
import * as Device from 'expo-device'
import * as Notifications from 'expo-notifications'
import { Platform } from 'react-native'

export interface PushNotificationProps {
  tokens: string[]
  title: string
  body: string
}

Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: false,
  }),
})

export const usePermissionsNotifications = () => {
  async function sendPushNotification({
    tokens,
    title,
    body,
  }: PushNotificationProps) {
    const message = {
      to: tokens,
      sound: 'default',
      title,
      body,
      data: { someData: 'goes here' },
    }
    await fetch('https://exp.host/--/api/v2/push/send', {
      method: 'POST',
      headers: {
        Accept: 'application/json',
        'Accept-encoding': 'gzip, deflate',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(message),
    })
  }

  async function registerForPushNotificationsAsync() {
    try {
      let token
      if (Device.isDevice) {
        const { status: existingStatus } =
          await Notifications.getPermissionsAsync()
        let finalStatus = existingStatus
        if (existingStatus !== 'granted') {
          const { status } = await Notifications.requestPermissionsAsync()
          finalStatus = status
        }
        if (finalStatus !== 'granted') {
          alert('Failed to get push token for push notification!')
          return
        }
        token = (await Notifications.getExpoPushTokenAsync()).data
      } else {
        alert('Must use physical device for Push Notifications')
      }

      if (Platform.OS === 'android') {
        Notifications.setNotificationChannelAsync('default', {
          name: 'default',
          importance: Notifications.AndroidImportance.MAX,
          vibrationPattern: [0, 250, 250, 250],
          sound: '../assets/sounds/bellnotification.wav',
          lightColor: '#FF231F7C',
        })
      }

      return token
    } catch (e) {
      return ''
    }
  }

  return {
    sendPushNotification,
    registerForPushNotificationsAsync,
  }
}

=== useSearchWithFilters.ts ===
import { useState } from 'react'
import { BuildFiltro } from '../models/Etiqueta.model'

export const useSearchWithFilters = () => {
  const [buildFiltros, setBuildFiltros] = useState<BuildFiltro>({})
  const [text, setText] = useState('')

  const handleDate = (date: number | undefined) => {
    setBuildFiltros({ ...buildFiltros, fecha: date })
  }

  const handleEtiquetas = (name: string) => {
    const { etiquetas = [] } = buildFiltros
    if (etiquetas?.includes(name)) {
      const filteredEtiquetas = etiquetas.filter(
        (etiqueta) => etiqueta !== name
      )
      setBuildFiltros({ ...buildFiltros, etiquetas: filteredEtiquetas })
    } else {
      setBuildFiltros({
        ...buildFiltros,
        etiquetas: [...etiquetas, name],
      })
    }
  }

  return {
    buildFiltros,
    text,
    setText,
    handleDate,
    handleEtiquetas,
  }
}

=== googleCloudStorage.ts ===
import {
  getDownloadURL,
  ref,
  StorageReference,
  uploadBytes,
} from 'firebase/storage'
import { firebaseStorage } from '../config/firebase'

export const guardarArchivo = async (
  folder: string,
  name: string,
  uri: string
): Promise<string> => {
  const filePath = `/${folder}/${name?.replace(/\s/g, '')}`
  const fileRef: StorageReference = ref(firebaseStorage, filePath)

  const blob: Blob = await new Promise((resolve, reject) => {
    const xhr = new XMLHttpRequest()
    xhr.onload = function () {
      resolve(xhr.response)
    }
    xhr.onerror = function () {
      reject(new TypeError('Network request failed'))
    }
    xhr.responseType = 'blob'
    xhr.open('GET', uri, true)
    xhr.send(null)
  })

  await uploadBytes(fileRef, blob)
  const url: string = await getDownloadURL(fileRef)
  return url || ''
}

=== consejos.services.ts ===
import axios from 'axios'
import { DocumentResult } from 'expo-document-picker'
import { Consejo } from '../../models/Consejo.model'
import { isDocumentResultType } from '../../utils/ckeckTypes'
import { FOLDERS_STORAGE } from '../../utils/constants'
import { guardarArchivo } from '../googleCloudStorage'

export const agregarConsejo = async (consejo: Consejo, token: string) => {
  try {
    const { imagen = {}, informacion = '' } = consejo || {}
    const document = imagen as DocumentResult
    if (document.type === 'cancel') {
      return
    }

    let path = ''
    if (imagen && isDocumentResultType(imagen)) {
      path = await guardarArchivo(
        FOLDERS_STORAGE.CONSEJOS,
        document.name,
        document.uri
      )
    }
    await axios({
      method: 'POST',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/consejodia/new_consejo_dia/',
      data: { imagen: path, informacion },
      headers: { Authorization: 'Token ' + token },
    })
  } catch (e) {
    console.error(e)
  }
}

export const editarConsejo = async (
  consejo: Consejo,
  token: string,
  oldConsejo: Consejo
) => {
  try {
    const { imagen = {}, informacion = '' } = consejo || {}
    let path = oldConsejo.imagen || ''
    const document = imagen as DocumentResult
    if (document.type === 'cancel') {
      return
    }

    if (imagen && isDocumentResultType(imagen)) {
      path = await guardarArchivo(
        FOLDERS_STORAGE.CONSEJOS,
        document.name,
        document.uri
      )
    }
    await axios({
      method: 'POST',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/consejodia/update_consejo_dia/',
      data: { informacion: informacion, imagen: path, token: oldConsejo.token },
      headers: { Authorization: 'Token ' + token },
    })
  } catch (e) {
    console.error(e)
  }
}

export const obtenerConsejosActuales = async (token: string) => {
  try {
    const response = await axios({
      method: 'GET',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/consejodia/get_consejos_dia/',
      headers: { Authorization: 'Token ' + token },
    })
    return response.data
  } catch (e) {
    console.error(e)
  }
}

export const obtenerConsejosHistoricos = async (token: string) => {
  try {
    const response = await axios({
      method: 'GET',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/consejodia/get_historico_consejos_dia/',
      headers: { Authorization: 'Token ' + token },
    })
    return response.data
  } catch (e) {
    console.error(e)
  }
}

export const republicarConsejo = async (
  authtoken: string,
  consejoId: string
) => {
  try {
    const response = await axios({
      method: 'POST',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/consejodia/republicar_consejo_dia/',
      headers: { Authorization: 'Token ' + authtoken },
      data: { token: consejoId },
    })
    return response.data
  } catch (e) {
    console.error(e)
  }
}

export const eliminarConsejo = async (token: string, tokenConsejo: string) => {
  try {
    await axios({
      method: 'DELETE',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/consejodia/delete_consejo_dia/',
      data: { token: tokenConsejo },
      headers: { Authorization: 'Token ' + token },
    })
  } catch (e) {
    console.error(e)
  }
}

export const despinnearConsejo = async (token: string, authtoken: string) => {
  try {
    await axios({
      method: 'POST',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/consejodia/remove_fijar_consejo/',
      headers: { Authorization: 'Token ' + authtoken },
      data: { token_consejo: token },
    })
  } catch (e) {
    console.error(e)
  }
}

export const pinnearConsejo = async (token: string, authtoken: string) => {
  try {
    await axios({
      method: 'POST',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/consejodia/fijar_consejo/',
      headers: { Authorization: 'Token ' + authtoken },
      data: { token_consejo: token },
    })
  } catch (e) {
    console.error(e)
  }
}

=== notifications.services.ts ===
import axios from 'axios'

interface TokenNotificacion {
  token_notificacion: string
}

export const getCiclistasToken = async (token: string) => {
  try {
    const response = await axios({
      method: 'GET',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/usuario/token_notificacion_users/',
      headers: { Authorization: 'Token ' + token },
    })
    const arrayTokens = response.data?.data || []
    const tokensFiltered = arrayTokens?.filter(
      (token: TokenNotificacion) => token.token_notificacion
    )
    return (
      tokensFiltered?.map(
        (token: TokenNotificacion) => token.token_notificacion
      ) || []
    )
  } catch (e) {
    console.error(e)
  }
}

export const getAdminTokens = async (token: string) => {
  try {
    const response = await axios({
      method: 'GET',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/usuario/token_notificacion_admins/',
      headers: { Authorization: 'Token ' + token },
    })
    const arrayTokens = response.data?.data || []
    const tokensFiltered = arrayTokens?.filter(
      (token: TokenNotificacion) => token.token_notificacion
    )
    return (
      tokensFiltered?.map(
        (token: TokenNotificacion) => token.token_notificacion
      ) || []
    )
  } catch (e) {
    console.error(e)
  }
}

export const getAllTokens = async (token: string) => {
  const adminTokens = await getAdminTokens(token)
  const ciclistasTokens = await getCiclistasToken(token)
  return [...adminTokens, ...ciclistasTokens]
}

=== novedades.services.ts ===
import axios from 'axios'
import { DocumentResult } from 'expo-document-picker'
import { NovedadInterface } from '../../models/Novedad.model'
import { isDocumentResultType } from '../../utils/ckeckTypes'
import { FOLDERS_STORAGE } from '../../utils/constants'
import { guardarArchivo } from '../googleCloudStorage'

export const agregarNovedad = async (
  authToken: string,
  data: NovedadInterface
) => {
  const { imagen } = data
  let path = imagen || ''

  const document = imagen as DocumentResult
  if (document.type === 'cancel') {
    return
  }

  if (imagen && isDocumentResultType(imagen)) {
    path = await guardarArchivo(
      FOLDERS_STORAGE.NOVEDADES,
      document.name,
      document.uri
    )
  }
  try {
    await axios({
      method: 'POST',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/consejodia/new_novedad/',
      headers: { Authorization: 'Token ' + authToken },
      data: {
        titulo: data.titulo,
        descripcion: data.descripcion,
        descripcion_corta: data.descripcion_corta,
        imagen: path,
        nombre: data.nombre,
        celular: data.celular,
        direccion: data.direccion,
      },
    })
  } catch (e) {
    console.error(e)
  }
}

export const obtenerNovedades = async (token: string) => {
  try {
    const response = await axios({
      method: 'GET',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/consejodia/get_novedades/',
      headers: { Authorization: 'Token ' + token },
    })
    return response.data
  } catch (e) {
    console.error(e)
  }
}

export const eliminarNovedad = async (token: string, tokenNovedad: string) => {
  try {
    await axios({
      method: 'DELETE',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/consejodia/delete_novedad/',
      data: { token: tokenNovedad },
      headers: { Authorization: 'Token ' + token },
    })
  } catch (e) {
    console.error(e)
  }
}

=== publicaciones.services.ts ===
import axios from 'axios'
import { Audio } from 'expo-av'
import { DocumentResult } from 'expo-document-picker'
import { Etiqueta } from '../../models/Etiqueta.model'
import { MultimediaResult, Publicacion } from '../../models/Publicaciones.model'
import { isAudioRecording, isDocumentResultType } from '../../utils/ckeckTypes'
import { FOLDERS_STORAGE } from '../../utils/constants'
import { guardarArchivo } from '../googleCloudStorage'

export const agregarPublicacion = async (
  publicacion: Publicacion,
  token: string
) => {
  try {
    const { audios, multimedia } = publicacion
    const audiosPaths = await guardrAudios(audios)
    const multimediaPaths = await guardarMultimedia(multimedia)
    const data = {
      titulo: publicacion.titulo,
      descripcion: publicacion.descripcion,
      etiquetas: publicacion.etiquetas,
      multimedia: [...audiosPaths, ...multimediaPaths],
    }
    await axios({
      method: 'POST',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/publicacion/new_publicacion/',
      data,
      headers: { Authorization: 'Token ' + token },
    })
  } catch (e) {
    console.error(e)
  }
}

export const editarPublicacion = async (
  publicacion: Publicacion,
  authToken: string,
  tokenPublicacion: string
) => {
  try {
    const { audios, multimedia } = publicacion
    const audiosPaths = await guardrAudios(audios)
    const multimediaPaths = await guardarMultimedia(multimedia)
    const data = {
      token: tokenPublicacion,
      titulo: publicacion.titulo,
      descripcion: publicacion.descripcion,
      etiquetas: publicacion.etiquetas,
      multimedia: [...audiosPaths, ...multimediaPaths],
    }

    await axios({
      method: 'POST',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/publicacion/update_publicacion/',
      data,
      headers: { Authorization: 'Token ' + authToken },
    })
  } catch (e) {
    console.error(e)
  }
}

const guardrAudios = async (audios: Audio.Recording[]) => {
  const audiosPaths = []
  for (let i = 0; i < audios?.length; i++) {
    const audio = audios[i]
    const isAudioRecord = isAudioRecording(audio)
    if (isAudioRecord) {
      const uri = audio.getURI() || ''
      const path = await guardarArchivo(
        FOLDERS_STORAGE.PUBLICACIONES,
        uri.replace(/\//g, ''),
        uri
      )
      audiosPaths.push({ link: path, tipo: 'audio', path: '' })
    } else {
      const audioResult = audio as unknown as MultimediaResult
      audiosPaths.push({ link: audioResult.link, tipo: 'audio', path: '' })
    }
  }
  return audiosPaths
}

const guardarMultimedia = async (multimedia: DocumentResult[]) => {
  const multimediaPaths = []
  for (let i = 0; i < multimedia?.length; i++) {
    const file = multimedia[i]
    const isDocResult = isDocumentResultType(file)
    if (isDocResult && file.type !== 'cancel') {
      const { uri, name, mimeType } = file
      const fileType = mimeType?.split('/')[0]
      const path = await guardarArchivo(
        FOLDERS_STORAGE.PUBLICACIONES,
        name,
        uri
      )
      multimediaPaths.push({ link: path, tipo: fileType, path: '' })
    } else {
      const fileResult = file as unknown as MultimediaResult
      if (fileResult.tipo !== 'audio') {
        multimediaPaths.push({
          link: fileResult.link,
          tipo: fileResult.tipo,
          path: '',
        })
      }
    }
  }
  return multimediaPaths
}

export const obtenerPublicaciones = async (token: string) => {
  try {
    const response = await axios({
      method: 'GET',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/publicacion/get_publicaciones/',
      headers: { Authorization: 'Token ' + token },
    })
    const { data } = response.data || {}
    return converterPublicaciones(data)
  } catch (e) {
    console.error(e)
  }
}

const converterPublicaciones = (publicaciones: Publicacion[]) => {
  return publicaciones.map((publicacion) =>
    converterPublicacionObject(publicacion)
  )
}

const converterPublicacionObject = (publicacion: Publicacion) => {
  const etiquetas = publicacion.etiquetas as unknown as Etiqueta[]
  return {
    ...publicacion,
    multimediaResult: publicacion.multimedia as unknown as MultimediaResult[],
    etiquetas: etiquetas.map((etiqueta) => etiqueta.value),
    etiquetasResult: etiquetas,
  }
}

export const eliminarPublicacion = async (
  authToken: string,
  publicacionToken: string
) => {
  try {
    await axios({
      method: 'DELETE',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/publicacion/delete_publicacion/',
      data: { token: publicacionToken },
      headers: {
        Authorization: 'Token ' + authToken,
        'Content-Type': 'application/json',
      },
    })
  } catch (e) {
    console.error(e)
  }
}

export const getPublicacionById = async (authToken: string, token: string) => {
  if (!token) return
  try {
    const response = await axios({
      method: 'POST',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/publicacion/get_publicacion/',
      data: { token_publicacion: token },
      headers: {
        Authorization: 'Token ' + authToken,
        'Content-Type': 'application/json',
      },
    })
    const { data } = response.data || {}
    return converterPublicacionObject(data[0])
  } catch (e) {
    console.error(e)
  }
}

export const agregarComentarioPublicacion = async (
  authToken: string,
  token: string,
  comentario: string
) => {
  try {
    await axios({
      method: 'POST',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/publicacion/new_comentario_publicacion/',
      data: { token, comentario },
      headers: {
        Authorization: 'Token ' + authToken,
      },
    })
  } catch (e) {
    console.error(e)
  }
}

=== reacciones.services.ts ===
import axios from 'axios'
import { ReaccionTypes } from '../../models/Reacciones.model'

export const agregarReacciones = async (
  name: ReaccionTypes,
  token: string,
  userToken: string,
  type: 'Consejo' | 'Publicacion'
) => {
  try {
    const endpoint = {
      Consejo: 'consejodia/post_reaccion/',
      Publicacion: 'publicacion/post_reaccion/',
    }
    const data = {
      Consejo: {
        token_consejo: token,
        nombre_reaccion: name,
      },
      Publicacion: {
        token_publicacion: token,
        nombre_reaccion: name,
      },
    }

    await axios({
      method: 'POST',
      url: `https://ecuaciclismoapp.pythonanywhere.com/api/${endpoint[type]}`,
      data: data[type],
      headers: { Authorization: 'Token ' + userToken },
    })
  } catch (e) {
    console.error(e)
  }
}

export const eliminarReaccion = async (
  name: ReaccionTypes,
  token: string,
  userToken: string,
  type: 'Consejo' | 'Publicacion'
) => {
  try {
    const endpoint = {
      Consejo: 'consejodia/delete_detalle_reaccion_consejo/',
      Publicacion: 'publicacion/delete_detalle_reaccion_publicacion/',
    }

    const data = {
      Consejo: {
        token_consejo: token,
        nombre_reaccion: name,
      },
      Publicacion: {
        token_publicacion: token,
        nombre_reaccion: name,
      },
    }

    await axios({
      method: 'DELETE',
      url: `https://ecuaciclismoapp.pythonanywhere.com/api/${endpoint[type]}`,
      data: data[type],
      headers: { Authorization: 'Token ' + userToken },
    })
  } catch (e) {
    console.error(e)
  }
}

=== rutas.services.ts ===
import axios from 'axios'
import { DocumentResult } from 'expo-document-picker'
import { catalogs, GrupoEncuentro, HitosRuta, Ruta } from '../../models/Rutas'
import { isDocumentResultType } from '../../utils/ckeckTypes'
import { FOLDERS_STORAGE } from '../../utils/constants'
import { guardarArchivo } from '../googleCloudStorage'

export const getRequisitos = async (authToken: string) => {
  try {
    const response = await axios({
      method: 'GET',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/ruta/get_requisitos/',
      headers: { Authorization: 'Token ' + authToken },
    })
    const requisitos = response.data?.data || []
    const finalRequisitos = requisitos.map((requisito: catalogs) => ({
      nombre: requisito.nombre,
      value: requisito.token,
    }))
    return finalRequisitos
  } catch (e) {
    console.error(e)
  }
}

export const getTiposRuta = async (authToken: string) => {
  try {
    const response = await axios({
      method: 'GET',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/ruta/get_tipos_rutas/',
      headers: { Authorization: 'Token ' + authToken },
    })
    const tipos = response.data?.data || []
    const finaltipos = tipos.map((tipo: catalogs) => ({
      nombre: tipo.nombre,
      value: tipo.token,
    }))
    return finaltipos
  } catch (e) {
    console.error(e)
  }
}

export const getColaboracionesRutas = async (authToken: string) => {
  try {
    const response = await axios({
      method: 'GET',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/ruta/get_colaboraciones/',
      headers: { Authorization: 'Token ' + authToken },
    })
    const colaboraciones = response.data?.data || []
    const finalcolaboraciones = colaboraciones.map(
      (colaboracion: catalogs) => ({
        nombre: colaboracion.nombre,
        value: colaboracion.token,
      })
    )
    return finalcolaboraciones
  } catch (e) {
    console.error(e)
  }
}

export const getGruposEncuentro = async (authToken: string) => {
  try {
    const response = await axios({
      method: 'GET',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/ruta/get_grupos_encuentro/',
      headers: { Authorization: 'Token ' + authToken },
    })
    const grupos = response.data?.data || []
    const finalGrupos = grupos.map((grupo: catalogs) => ({
      nombre: grupo.nombre,
      value: grupo.token,
    }))
    return finalGrupos
  } catch (e) {
    console.error(e)
  }
}

export const getAllRutas = async (authToken: string) => {
  try {
    const response = await axios({
      method: 'GET',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/ruta/get_rutas/',
      headers: { Authorization: 'Token ' + authToken },
    })
    return response.data?.data
  } catch (e) {
    console.error(e)
  }
}

export const guardarRuta = async (authToken: string, ruta: Ruta) => {
  try {
    const fotos = await guardarGaleriaFotos(ruta.fotos || [])
    await axios({
      method: 'POST',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/ruta/new_ruta/',
      data: {
        ...ruta,
        fotos,
        fecha_inicio: ruta.fecha_inicio?.toISOString().split('.')[0],
        fecha_fin: ruta.fecha_fin?.toISOString().split('.')[0],
        puntosencuentro: converterLugarEncuentro(ruta?.grupos_encuentro),
      },
      headers: { Authorization: 'Token ' + authToken },
    })
  } catch (e) {
    console.error(e)
  }
}

const converterLugarEncuentro = (grupos: GrupoEncuentro[] | undefined) => {
  return (
    grupos?.map((grupo) => ({
      token: grupo.grupo,
      lugar: grupo.lugar_encuentro,
    })) || []
  )
}

export const editarRuta = async (
  authToken: string,
  ruta: Ruta,
  tokenRuta: string
) => {
  try {
    const fotos = await guardarGaleriaFotos(ruta.fotos || [])
    await axios({
      method: 'POST',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/ruta/editar_ruta/',
      data: {
        ...ruta,
        token_ruta: tokenRuta,
        fotos,
        fecha_inicio: ruta.fecha_inicio?.toISOString().split('.')[0],
        fecha_fin: ruta.fecha_fin?.toISOString().split('.')[0],
        puntosencuentro: converterLugarEncuentro(ruta?.grupos_encuentro),
      },
      headers: { Authorization: 'Token ' + authToken },
    })
  } catch (e) {
    console.error(e)
  }
}

const guardarGaleriaFotos = async (fotos: DocumentResult[]) => {
  const paths = []
  for (let i = 0; i < fotos.length; i++) {
    const imagen = fotos[i] as any
    let publicLink = imagen.link || ''
    if (imagen && isDocumentResultType(imagen) && imagen.type !== 'cancel') {
      publicLink = await guardarArchivo(
        FOLDERS_STORAGE.RUTAS,
        imagen.name,
        imagen.uri
      )
    }
    paths.push({
      link: publicLink,
      path: imagen.path || `${FOLDERS_STORAGE.RUTAS}/${imagen.name}`,
    })
  }
  return paths
}

const converterRuta = (ruta: any) => {
  const { colaboraciones, requisitos, tipoRuta } = ruta
  const parseColaboraciones = colaboraciones.map((colaboracion: any) => {
    return colaboracion.token
  })
  const parseRequisitos = requisitos.map((requisito: any) => {
    return requisito.token
  })
  const parseTipos = tipoRuta.map((tipo: any) => {
    return tipo.token
  })
  const parseGrupos = ruta?.puntosencuentros?.map((item: any) => ({
    grupo: item.token,
    lugar_encuentro: item.lugar,
    nombre: item.nombre,
  }))
  return {
    ...ruta,
    colaboraciones: parseColaboraciones,
    colaboracionesValues: colaboraciones,
    requisitos: parseRequisitos,
    requisitosValues: requisitos,
    tipoRuta: parseTipos,
    tipoRutaValues: tipoRuta,
    grupos_encuentro: parseGrupos,
  }
}

export const getRutaById = async (authToken: string, tokenRuta: string) => {
  if (!tokenRuta) return
  try {
    const response = await axios({
      method: 'POST',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/ruta/get_ruta/',
      data: { token_ruta: tokenRuta },
      headers: {
        Authorization: 'Token ' + authToken,
        'Content-Type': 'application/json',
      },
    })
    const [ruta] = response.data?.data || []
    return converterRuta(ruta)
  } catch (e) {
    console.error(e)
  }
}

export const aprobarRuta = async (authToken: string, tokenRuta: string) => {
  if (!tokenRuta) return
  try {
    await axios({
      method: 'POST',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/ruta/aprobar_ruta/',
      data: { token_ruta: tokenRuta },
      headers: {
        Authorization: 'Token ' + authToken,
        'Content-Type': 'application/json',
      },
    })
  } catch (e) {
    console.error(e)
  }
}

export const eliminarRuta = async (authToken: string, tokenRuta: string) => {
  try {
    await axios({
      method: 'POST',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/ruta/eliminar_ruta/',
      data: { token_ruta: tokenRuta },
      headers: {
        Authorization: 'Token ' + authToken,
        'Content-Type': 'application/json',
      },
    })
  } catch (e) {
    console.error(e)
  }
}

export const inscribirUsuarioEnRuta = async (
  authToken: string,
  tokenRuta: string,
  colaboraciones: string[]
) => {
  try {
    await axios({
      method: 'POST',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/ruta/inscribirse_ruta/',
      data: { token: tokenRuta, colaboraciones },
      headers: {
        Authorization: 'Token ' + authToken,
        'Content-Type': 'application/json',
      },
    })
  } catch (e) {
    console.error(e)
  }
}

export const cancelarInscripcionUsuario = async (
  authToken: string,
  tokenRuta: string
) => {
  try {
    await axios({
      method: 'POST',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/ruta/cancelar_inscripcion/',
      data: { token: tokenRuta },
      headers: {
        Authorization: 'Token ' + authToken,
        'Content-Type': 'application/json',
      },
    })
  } catch (e) {
    console.error(e)
  }
}

export const cancelarRutas = async (
  authToken: string,
  tokenRuta: string,
  motivo: string
) => {
  try {
    await axios({
      method: 'POST',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/ruta/cancelar_ruta/',
      data: { token: tokenRuta, motivo_cancelacion: motivo },
      headers: {
        Authorization: 'Token ' + authToken,
        'Content-Type': 'application/json',
      },
    })
  } catch (e) {
    console.error(e)
  }
}

export const finalizarRutaAdmin = async (
  tokenRuta: string,
  authToken: string
) => {
  try {
    await axios({
      method: 'POST',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/ruta/finalizar_ruta/',
      data: { token_ruta: tokenRuta },
      headers: {
        Authorization: 'Token ' + authToken,
        'Content-Type': 'application/json',
      },
    })
  } catch (e) {
    console.error(e)
  }
}

export const finalizarRastreo = async (
  hitos: HitosRuta,
  authToken: string,
  tokenRuta: string
) => {
  try {
    await axios({
      method: 'POST',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/ruta/finalizar_rastreo/',
      data: { token_ruta: tokenRuta, ...hitos },
      headers: {
        Authorization: 'Token ' + authToken,
        'Content-Type': 'application/json',
      },
    })
  } catch (e) {
    console.error(e)
  }
}

export const getDatosRastreoById = async (
  tokenRuta: string,
  authToken: string,
  userId: string
) => {
  try {
    const response = await axios({
      method: 'POST',
      data: { token_ruta: tokenRuta, token_usuario: userId },
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/ruta/get_informacion_individual_ruta/',
      headers: { Authorization: 'Token ' + authToken },
    })
    const [hitos] = response.data?.data
    return hitos
  } catch (e) {
    console.error(e)
  }
}

export const enviarComentariosRuta = async (
  stars: number,
  comentario: string,
  authToken: string,
  tokenRuta: string
) => {
  try {
    await axios({
      method: 'POST',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/ruta/adicional_rastreo/',
      data: { token_ruta: tokenRuta, estrellas: stars, comentario },
      headers: {
        Authorization: 'Token ' + authToken,
        'Content-Type': 'application/json',
      },
    })
  } catch (e) {
    console.error(e)
  }
}

=== user.services.ts ===
import axios from 'axios'
import { DocumentResult } from 'expo-document-picker'
import { Registro, User } from '../../models/User'
import { isDocumentResultType } from '../../utils/ckeckTypes'
import { FOLDERS_STORAGE } from '../../utils/constants'
import { guardarArchivo } from '../googleCloudStorage'

export const createUser = async (data: Registro, tokenNotification: string) => {
  try {
    await axios({
      method: 'POST',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/usuario/crear_usuario/',
      data: {
        usuario: data.username,
        email: data.email,
        password: data.password,
        nombre: data.first_name,
        apellido: data.last_name,
        token_notificacion: tokenNotification,
      },
    })
  } catch (e) {
    console.error(e)
  }
}

export const getRutasSinConfirmar = async (authToken: string) => {
  try {
    const response = await axios({
      method: 'GET',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/ruta/get_not_response/',
      headers: { Authorization: 'Token ' + authToken },
    })
    return response?.data?.data?.[0]
  } catch (e) {
    console.error(e)
  }
}

export const confirmarSafeInHome = async (
  authToken: string,
  tokenRuta: string,
  safe: boolean
) => {
  try {
    await axios({
      method: 'POST',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/ruta/safe_in_home/',
      headers: { Authorization: 'Token ' + authToken },
      data: { token_ruta: tokenRuta, safe },
    })
  } catch (e) {
    console.error(e)
  }
}

export const getDetalleUsuario = async (
  authToken: string,
  userToken: string
) => {
  try {
    const response = await axios({
      method: 'POST',
      data: { token_usuario: userToken },
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/usuario/get_detalle_usuario/',
      headers: { Authorization: 'Token ' + authToken },
    })
    const [detalle] = response?.data?.data || []
    return converterUsuario(detalle)
  } catch (e) {
    console.error(e)
  }
}

const converterUsuario = (user: any) => {
  return {
    ...user,
    rutas_interes: user?.etiquetas.map((etiqueta: any) => etiqueta.token) || [],
  }
}

export const updateUser = async (
  authToken: string,
  updatedUser: Partial<User>
) => {
  try {
    await axios({
      method: 'POST',
      data: {
        ...updatedUser,
        usuario: updatedUser.username,
        nombre: updatedUser.first_name,
        apellido: updatedUser.last_name,
      },
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/usuario/editar_usuario/',
      headers: { Authorization: 'Token ' + authToken },
    })
  } catch (e) {
    console.error(e)
  }
}

export const enviarDatosUsuarios = async (
  authToken: string,
  updatedUser: any
) => {
  try {
    const { foto_bicicleta = {} } = updatedUser || {}
    const document = foto_bicicleta as DocumentResult
    if (document.type === 'cancel') {
      return
    }

    let path = foto_bicicleta
    if (foto_bicicleta && isDocumentResultType(foto_bicicleta)) {
      path = await guardarArchivo(
        FOLDERS_STORAGE.USUARIOS,
        document.name,
        document.uri
      )
    }
    await axios({
      method: 'POST',
      data: {
        ...updatedUser,
        foto_bicicleta: path,
      },
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/usuario/editar_usuario/',
      headers: { Authorization: 'Token ' + authToken },
    })
  } catch (e) {
    console.error(e)
  }
}

export const getComunidad = async (authToken: string) => {
  try {
    const response = await axios({
      method: 'GET',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/usuario/get_usuarios/',
      headers: { Authorization: 'Token ' + authToken },
    })
    return response?.data?.data || []
  } catch (e) {
    console.error(e)
  }
}

export const cambiarPermiso = async (
  usuarioToken: string,
  isAdmin: boolean,
  adminToken: string
) => {
  try {
    await axios({
      method: 'POST',
      url: 'https://ecuaciclismoapp.pythonanywhere.com/api/usuario/setear_admin/',
      data: { token_usuario: usuarioToken, admin: isAdmin },
      headers: { Authorization: 'Token ' + adminToken },
    })
  } catch (e) {
    console.error(e)
  }
}

=== Consejo.model.ts ===
import { DocumentResult } from 'expo-document-picker'
import { ImageSourcePropType } from 'react-native'
import { ReaccionesInterface } from './Reacciones.model'

export interface Consejo {
  imagen?: TypeImage
  email?: string
  first_name?: string
  foto?: string
  last_name?: string
  informacion: string
  username?: string
  token?: string
  reacciones?: ReaccionesInterface
  fijado?: boolean
}

export type TypeImage =
  | string
  | ImageSourcePropType
  | DocumentResult
  | { uri: string }

=== Etiqueta.model.ts ===
export interface Etiqueta {
  value: string
  nombre: string
}

export interface BuildFiltro {
  fecha?: number
  etiquetas?: string[]
}

export interface BuildUniqueFiltro {
  fecha?: number
  etiqueta?: string
}

export type ValuesEtiquetaPublicacion =
  | 'recomendaciones'
  | 'felicitaciones'
  | 'peligro'
  | 'salud'
  | 'noticia'

=== Novedad.model.ts ===
import { ImageSourcePropType } from 'react-native'

export interface BannerNovedadInterface {
  titulo: string
  imagen?: ImageSourcePropType
  descripcion_corta: string
  token?: string
}

export interface NovedadInterface extends BannerNovedadInterface {
  descripcion: string
  nombre?: string
  celular?: string
  direccion?: string
}

=== Publicaciones.model.ts ===
import { Audio } from 'expo-av'
import { DocumentResult } from 'expo-document-picker'
import { ImageSourcePropType } from 'react-native'
import { Etiqueta } from './Etiqueta.model'
import { ReaccionesInterface } from './Reacciones.model'

export interface Filtro extends Etiqueta {
  icon?: ImageSourcePropType
}

export interface Publicacion {
  titulo: string
  etiquetas: string[]
  etiquetasResult?: Etiqueta[]
  descripcion: string
  multimedia: DocumentResult[]
  multimediaResult?: MultimediaResult[]
  audios: Audio.Recording[]
  first_name?: string
  last_name?: string
  token?: string
  token_usuario?: string
  ultimo_cambio?: string
  comentarios?: Comentario[]
  reacciones?: ReaccionesInterface
  foto?: string //Foto del usuario
  token_notificacion?: string //Token notificación del usuario q hizo la publicacion
}

export interface Comentario {
  comentario: string
  username?: string
  first_name?: string
  last_name?: string
  foto?: string
  token_comentario?: string
}

export interface MultimediaResult {
  link: string
  tipo: string
}

export type multimediaTypes = 'image' | 'video' | 'application' | 'audio'

=== Reacciones.model.ts ===
export interface ReaccionesInterface {
  encanta?: ReaccionValues
  like?: ReaccionValues
  apoyo?: ReaccionValues
  fuerza?: ReaccionValues
  ciclista?: ReaccionValues
}

export interface ReaccionValues {
  count?: number
  usuarios?: string[]
  reaccion_usuario?: boolean
}

export type ReaccionTypes = 'encanta' | 'like' | 'apoyo' | 'fuerza' | 'ciclista'

=== Rutas.ts ===
import { User } from './User'

export interface RutaCoordinadas {
  coordinateX: Coordinate
  coordinateY: Coordinate
}

export interface Coordinate {
  latitude: number
  longitude: number
}

export type EstadoRuta =
  | 'En Curso'
  | 'Disponible'
  | 'Cancelada'
  | 'Finalizada'
  | 'Sin Cupos'

export interface Ruta {
  nombre: string
  descripcion: string
  cupos_disponibles: number | undefined
  lugar: string
  fecha_inicio?: Date
  fecha_fin?: Date
  requisitos: string[]
  requisitosValues?: any[]
  colaboraciones: string[]
  colaboracionesValues?: any[]
  tipoRuta: any[]
  tipoRutaValues?: any[]
  ubicacion: RutaCoordinadas
  fotos: any
  token?: string
  fotosResult?: ImagesUriPath[]
  estado?: Estado
  inscrito?: boolean
  participantes?: Partial<User>[]
  aprobado?: boolean
  motivo_cancelacion?: string
  grupos_encuentro?: GrupoEncuentro[]
  token_notificacion?: string //Token de notificación del usuario que propuso la ruta :)
}

export interface GrupoEncuentro {
  grupo: string
  lugar_encuentro: string
}

export interface Estado {
  estado_no_iniciada?: boolean
  estado_finalizado?: boolean
  estado_en_curso?: boolean
  estado_sin_cupos?: boolean
  estado_cancelado?: boolean
  prioridad: number
}

export interface ImagesUriPath {
  link: string
  path: string
}

export interface catalogs {
  nombre: string
  token?: string
  value?: string
}

export interface HitosRuta {
  kilometros: number
  kilocalorias: number
  velocidad: number
  horas: number
  comentario?: string
  estrellas?: number
  first_name?: string
  last_name?: string
  foto?: string
  username?: string
  nombre?: string
}

=== Screens.types.ts ===
import { Consejo } from './Consejo.model'
import { NovedadInterface } from './Novedad.model'
import { Publicacion } from './Publicaciones.model'
import { Ruta } from './Rutas'

export type RootStackParamList = {
  Inicio: { reload: boolean } | undefined
  Login: undefined
  Registro: undefined
  Rutas: undefined
  Publicaciones: undefined
  Perfil: { userToken: string } | undefined
  ConsejoFormulario: { consejo: Consejo } | undefined
  NovedadFormulario: { publicidad: NovedadInterface } | undefined
  DetalleNovedad: { data: NovedadInterface } | undefined
  DetallePublicacion: { token: string } | undefined
  PublicacionFormulario: { data: Publicacion } | undefined
  RutasFormulario: { ruta: Ruta } | undefined
  DetalleRuta: { token: string } | undefined
  InicioRastreo: { ruta: Ruta } | undefined
  RastreoUbicacion: { ruta: Ruta } | undefined
  RutaIncompleta: { tokenRuta: string; tokenUsuario: string } | undefined
  FinalRuta: { tokenRuta: string; tokenUsuario: string } | undefined
  PerfilFormulario: { data: any } | undefined
}

export type Screens =
  | 'Inicio'
  | 'Perfil'
  | 'Login'
  | 'Registro'
  | 'Rutas'
  | 'ConsejoFormulario'
  | 'Publicaciones'
  | 'NovedadFormulario'
  | 'DetalleNovedad'
  | 'DetallePublicacion'
  | 'PublicacionFormulario'
  | 'RutasFormulario'
  | 'DetalleRuta'
  | 'InicioRastreo'
  | 'RastreoUbicacion'
  | 'RutaIncompleta'
  | 'FinalRuta'
  | 'PerfilFormulario'

export type RootDrawerParamList = {
  HomeStack: undefined
  HistorialConsejos: undefined
  Comunidad: undefined
  Novedades: undefined
  Perfil: { userToken: string } | undefined
  ConsejoDetalle: { consejo: Consejo } | undefined
  DetalleNovedad: { data: NovedadInterface } | undefined
  Publicaciones: undefined
  Inicio: undefined
  Contactenos: undefined
  Seguridad: undefined

}

export type ScreensDrawer =
  | 'HomeStack'
  | 'HistorialConsejos'
  | 'Comunidad'
  | 'Novedades'
  | 'DetalleNovedad'
  | 'Publicaciones'
  | 'Inicio'
  | 'Perfil'
  | 'Contactenos'
  | 'Seguridad'

  

=== TextInput.model.ts ===
export type TextInputType =
  | 'none'
  | 'URL'
  | 'addressCity'
  | 'addressCityAndState'
  | 'addressState'
  | 'countryName'
  | 'creditCardNumber'
  | 'emailAddress'
  | 'familyName'
  | 'fullStreetAddress'
  | 'givenName'
  | 'jobTitle'
  | 'location'
  | 'middleName'
  | 'name'
  | 'namePrefix'
  | 'nameSuffix'
  | 'nickname'
  | 'organizationName'
  | 'postalCode'
  | 'streetAddressLine1'
  | 'streetAddressLine2'
  | 'sublocality'
  | 'telephoneNumber'
  | 'username'
  | 'password'
  | 'newPassword'
  | 'oneTimeCode'

=== User.ts ===
import { catalogs } from './Rutas'

export interface User {
  first_name: string
  last_name: string
  foto: string
  email: string
  telefono?: string
  username: string
  celular?: string
  edad?: number
  nivel?: string
  peso?: number
  genero?: string
  admin?: boolean
  tipo?: string
  marca?: string
  codigo?: string
  foto_bicicleta?: string
  etiquetas?: catalogs[]
  rutas?: any
  id_usuario?: string
}

export interface Login {
  email: string
  password: string
  token_notificacion: string
}

export interface Registro {
  email: string
  username: string
  first_name: string
  last_name: string
  password: string
  password_confirmation: string
}
export interface UserSession {
  token: string
  user: User
}

=== consejo.ts ===
import { createSlice, PayloadAction } from '@reduxjs/toolkit'

interface ConsejoSlice {
  hasModified: boolean
}

const initialState: ConsejoSlice = {
  hasModified: false,
}

export const Consejo = createSlice({
  name: 'consejo',
  initialState,
  reducers: {
    setHasModified: (state, action: PayloadAction<ConsejoSlice>) => {
      state.hasModified = action.payload.hasModified
    },
  },
})

export const { setHasModified } = Consejo.actions

export default Consejo.reducer

=== drawerTabs.ts ===
import { createSlice, PayloadAction } from '@reduxjs/toolkit'
import { ScreensDrawer } from '../models/Screens.types'

interface DrawerTabsSlice {
  activeTab: ScreensDrawer
}

const initialState: DrawerTabsSlice = {
  activeTab: 'HomeStack',
}

export const ScreenStore = createSlice({
  name: 'drawerTabs',
  initialState,
  reducers: {
    setActiveTab: (state, action: PayloadAction<DrawerTabsSlice>) => {
      state.activeTab = action.payload.activeTab
    },
  },
})

export const { setActiveTab } = ScreenStore.actions

export default ScreenStore.reducer

=== novedad.ts ===
import { createSlice, PayloadAction } from '@reduxjs/toolkit'

interface NovedadSlice {
  novedadHasModified: boolean
}

const initialState: NovedadSlice = {
  novedadHasModified: false,
}

export const Novedad = createSlice({
  name: 'novedad',
  initialState,
  reducers: {
    setNovedadHasModified: (state, action: PayloadAction<NovedadSlice>) => {
      state.novedadHasModified = action.payload.novedadHasModified
    },
  },
})

export const { setNovedadHasModified } = Novedad.actions

export default Novedad.reducer

=== publicacion.ts ===
import { createSlice, PayloadAction } from '@reduxjs/toolkit'

interface PublicacionSlice {
  publicacionHasModified: boolean
}

const initialState: PublicacionSlice = {
  publicacionHasModified: false,
}

export const Publicacion = createSlice({
  name: 'publicacion',
  initialState,
  reducers: {
    setPublicacionHasModified: (
      state,
      action: PayloadAction<PublicacionSlice>
    ) => {
      state.publicacionHasModified = action.payload.publicacionHasModified
    },
  },
})

export const { setPublicacionHasModified } = Publicacion.actions

export default Publicacion.reducer

=== publicacionBusqueda.ts ===
import { createSlice, PayloadAction } from '@reduxjs/toolkit'
import { BuildFiltro } from '../models/Etiqueta.model'

interface Busqueda {
  text: string
  buildFiltros: BuildFiltro
}

const initialState: Busqueda = {
  text: '',
  buildFiltros: { fecha: undefined, etiquetas: [] },
}

export const Busqueda = createSlice({
  name: 'busqueda',
  initialState,
  reducers: {
    setText: (state, action: PayloadAction<{ text: string }>) => {
      state.text = action.payload.text
    },
    setDate: (state, action: PayloadAction<{ fecha: number | undefined }>) => {
      state.buildFiltros.fecha = action.payload.fecha
    },
    setEtiquetas: (state, action: PayloadAction<{ name: string }>) => {
      const { name } = action.payload
      const { etiquetas } = state.buildFiltros
      if (etiquetas?.includes(name)) {
        const filteredEtiquetas = etiquetas.filter(
          (etiqueta) => etiqueta !== name
        )
        state.buildFiltros.etiquetas = filteredEtiquetas
      } else {
        state.buildFiltros.etiquetas = [...(etiquetas || []), name]
      }
    },
  },
})

export const { setText, setDate, setEtiquetas } = Busqueda.actions

export default Busqueda.reducer

=== ruta.ts ===
import { createSlice, PayloadAction } from '@reduxjs/toolkit'
import { Ruta } from '../models/Rutas'

interface RutaSlice {
  rutaHasModified?: boolean
  rutasPropuestas?: Ruta[]
  rutasFeed?: Ruta[]
  allRutas?: Ruta[]
}

const initialState: RutaSlice = {
  rutaHasModified: false,
  rutasPropuestas: [],
  rutasFeed: [],
  allRutas: [],
}

export const Rutas = createSlice({
  name: 'ruta',
  initialState,
  reducers: {
    setRutaHasModified: (state, action: PayloadAction<RutaSlice>) => {
      state.rutaHasModified = action.payload.rutaHasModified
    },
    setRutasPropuestas: (state, action: PayloadAction<RutaSlice>) => {
      state.rutasPropuestas = action.payload.rutasPropuestas
    },
    setRutasFeed: (state, action: PayloadAction<RutaSlice>) => {
      state.rutasFeed = action.payload.rutasFeed
    },
    setAllRutas: (state, action: PayloadAction<RutaSlice>) => {
      state.allRutas = action.payload.allRutas
    },
  },
})

export const {
  setRutaHasModified,
  setRutasPropuestas,
  setRutasFeed,
  setAllRutas,
} = Rutas.actions

export default Rutas.reducer

=== rutasBusqueda.ts ===
import { createSlice, PayloadAction } from '@reduxjs/toolkit'
import { BuildUniqueFiltro } from '../models/Etiqueta.model'

interface BusquedaRutas {
  buildFiltros: BuildUniqueFiltro
}

const initialState: BusquedaRutas = {
  buildFiltros: { fecha: undefined, etiqueta: '' },
}

export const BusquedaRutas = createSlice({
  name: 'busquedaRutas',
  initialState,
  reducers: {
    setDate: (state, action: PayloadAction<{ fecha: number | undefined }>) => {
      state.buildFiltros.fecha = action.payload.fecha
    },
    setEtiquetas: (state, action: PayloadAction<{ name: string }>) => {
      const { name } = action.payload
      const { etiqueta } = state.buildFiltros
      if (etiqueta === name) {
        state.buildFiltros.etiqueta = ''
      } else {
        state.buildFiltros.etiqueta = name
      }
    },
  },
})

export const { setDate, setEtiquetas } = BusquedaRutas.actions

export default BusquedaRutas.reducer

=== screens.ts ===
import { createSlice, PayloadAction } from '@reduxjs/toolkit'
import { Screens } from '../models/Screens.types'

interface ScreenSlice {
  activeScreen: Screens
}

const initialState: ScreenSlice = {
  activeScreen: 'Inicio',
}

export const ScreenStore = createSlice({
  name: 'screens',
  initialState,
  reducers: {
    setActiveScreen: (state, action: PayloadAction<ScreenSlice>) => {
      state.activeScreen = action.payload.activeScreen
    },
  },
})

export const { setActiveScreen } = ScreenStore.actions

export default ScreenStore.reducer

=== store.ts ===
import { configureStore } from '@reduxjs/toolkit'
import userReducer from './user'
import consejoReducer from './consejo'
import screensReducer from './screens'
import drawerTabsReducer from './drawerTabs'
import NovedadReducer from './novedad'
import publicacionBusqueda from './publicacionBusqueda'
import publicacionReducer from './publicacion'
import BusquedaRutas from './rutasBusqueda'
import Rutas from './ruta'

export const store = configureStore({
  reducer: {
    user: userReducer,
    consejo: consejoReducer,
    screens: screensReducer,
    drawerTabs: drawerTabsReducer,
    novedad: NovedadReducer,
    busqueda: publicacionBusqueda,
    publicacion: publicacionReducer,
    busquedaRutas: BusquedaRutas,
    ruta: Rutas,
  },
})

export type RootState = ReturnType<typeof store.getState>
export type AppDispatch = typeof store.dispatch

=== user.ts ===
import { createSlice, PayloadAction } from '@reduxjs/toolkit'
import { User, UserSession } from '../models/User'

interface UserSlice {
  user: User | null
  authToken: string | null
  refreshUser: boolean
}

const initialState: UserSlice = {
  user: null,
  authToken: null,
  refreshUser: false,
}

export const Auth = createSlice({
  name: 'user',
  initialState,
  reducers: {
    iniciarSesion: (state, action: PayloadAction<UserSession>) => {
      const { token, user } = action.payload
      state.user = user
      state.authToken = token
    },
    cerrarSesion: (state) => {
      state.user = null
      state.authToken = null
    },
    actualizarUsuario: (state, action: PayloadAction<any>) => {
      state.refreshUser = action.payload.refreshUser
    },
  },
})

export const { iniciarSesion, cerrarSesion, actualizarUsuario } = Auth.actions

export default Auth.reducer

=== ConsejoSchema.ts ===
import * as Yup from 'yup'

export const ConsejoValidationSchema = Yup.object({
  informacion: Yup.string().required('El mensaje es requerido'),
})

=== FormatFieldFormMessages.ts ===
export const FormatoCorreo = (fieldName: string): string => {
  return `Ingrese un ${fieldName} válido`
}

export const formatoRequerido = (
  fieldName: string,
  isPlural = false
): string => {
  return `${fieldName} ${isPlural ? 'son requeridos' : 'es requerido'}`
}

export const formatoMinLenghtItems = (
  fieldName: string,
  minLength: number
): string => {
  return `Escoge al menos ${minLength} item(s) para ${fieldName}.`
}

export const formatoMinLenght = (
  fieldName: string,
  minLength: number
): string => {
  return `${fieldName} debe contener al menos ${minLength} caracteres.`
}

export const formatoMaxLength = (
  fieldName: string,
  maxLength: number
): string => {
  return `${fieldName} no puede exceder ${maxLength} caracteres.`
}

export const formatOnlyText = (fieldName: string): string => {
  return `${fieldName} no puede contener números o caracteres especiales.`
}

=== LoginSchema.ts ===
import * as Yup from 'yup'
import { formatoRequerido } from './FormatFieldFormMessages'

export const loginValidationSchema = Yup.object({
  email: Yup.string()
    .email('Ingrese un correo electrónico válido')
    .required(formatoRequerido('Correo')),
  password: Yup.string().required(formatoRequerido('Contraseña')),
})

=== PublicacionSchema.ts ===
import * as Yup from 'yup'
import { PUBLICACION } from '../utils/constants'
import { formatoMaxLength } from './FormatFieldFormMessages'

export const PublicacionValidationSchema = Yup.object({
  titulo: Yup.string()
    .max(
      PUBLICACION.TITULO_MAX_LENGTH,
      formatoMaxLength('El título', PUBLICACION.TITULO_MAX_LENGTH)
    )
    .required('El título es requerido'),

  etiquetas: Yup.array()
    .min(1, 'Debes relacionar al menos una etiqueta a esta publicación')
    .required('Las etiquetas son requeridas'),
  descripcion: Yup.string().required('La descripción es requerida'),
})

=== PublicidadSchema.ts ===
import * as Yup from 'yup'
import { PUBLICIDAD } from '../utils/constants'
import { formatoMaxLength } from './FormatFieldFormMessages'

export const PublicidadValidationSchema = Yup.object({
  titulo: Yup.string().required('Debes ingresar un titulo para esta novedad'),
  imagen: Yup.mixed().required('Debe agregar al menos una imágen'),
  descripcion: Yup.string()
    .max(
      PUBLICIDAD.DESCRIPCION_MAX_LENGTH,
      formatoMaxLength('La descripción', PUBLICIDAD.DESCRIPCION_MAX_LENGTH)
    )
    .required('Agrega una descripción para esta novedad'),
  descripcion_corta: Yup.string()
    .max(
      PUBLICIDAD.DESCRIPCION_CORTA_MAX_LENGTH,
      formatoMaxLength(
        'La descripción',
        PUBLICIDAD.DESCRIPCION_CORTA_MAX_LENGTH
      )
    )
    .required('Agrega una breve descripción de esta novedad'),
})

=== RegistroSchema.ts ===
import * as Yup from 'yup'
import { PASSWORD, USERNAME } from '../utils/constants'
import {
  formatoMaxLength,
  formatoMinLenght,
  formatOnlyText,
} from './FormatFieldFormMessages'

export const registroValidationSchema = Yup.object({
  first_name: Yup.string()
    .matches(/^[aA-zZ\s]+$/, formatOnlyText('El nombre'))
    .required('El nombre es requerido'),
  last_name: Yup.string()
    .matches(/^[aA-zZ\s]+$/, formatOnlyText('El apellido'))
    .required('El apellido es requerido'),
  username: Yup.string()
    .max(
      USERNAME.MAX_LENGTH,
      formatoMaxLength('El nombre de usuario', USERNAME.MAX_LENGTH)
    )
    .min(
      USERNAME.MIN_LENGTH,
      formatoMinLenght('El nombre de usuario', USERNAME.MIN_LENGTH)
    )
    .required('Debe ingresar un nombre de usuario'),
  email: Yup.string()
    .email('Por favor, ingresa un correo electrónico válido')
    .required('Debe ingresar un correo electrónico'),
  password: Yup.string()
    .max(
      PASSWORD.MAX_SIZE,
      formatoMaxLength('La contraseña', PASSWORD.MAX_SIZE)
    )
    .min(
      PASSWORD.MIN_SIZE,
      formatoMinLenght('La contraseña', PASSWORD.MIN_SIZE)
    )
    .required('Debe ingresar una contraseña'),
  password_confirmation: Yup.string()
    .test(
      'passwords-match',
      'Las contraseñas deben coincidir',
      function (value) {
        return this.parent.password === value
      }
    )
    .required('Debe confirmar la contraseña ingresada'),
})

=== RutasValidationSchema.ts ===
import * as Yup from 'yup'
import { RUTAS } from '../utils/constants'
import { formatoMaxLength, formatoMinLenght } from './FormatFieldFormMessages'

export const RutasValidationSchema = Yup.object({
  nombre: Yup.string()
    .max(
      RUTAS.NOMBRE_MAX_LENGTH,
      formatoMaxLength('El nombre de la ruta', RUTAS.NOMBRE_MAX_LENGTH)
    )
    .min(
      RUTAS.NOMBRE_MIN_LENGTH,
      formatoMinLenght('El nombre de la ruta', RUTAS.NOMBRE_MIN_LENGTH)
    )
    .required('Por favor, ingresa el nombre de la ruta'),
  cupos_disponibles: Yup.number()
    .max(RUTAS.MAX_CUPOS, 'Ingresa una cantidad de cupos valida')
    .min(RUTAS.MIN_CUPOS, 'Esta ruta debe tener al menos un participante'),

  fotos: Yup.mixed().required('Debe agregar al menos una imágen'),
  lugar: Yup.string().required('El lugar es requerido'),
  ubicacion: Yup.mixed().required(
    'Por favor, seleccione el punto de partida y destino de la ruta'
  ),
  fecha_inicio: Yup.mixed().required('La fecha es requerida'),
  fecha_fin: Yup.mixed().required('La fecha es requerida'),
  tipoRuta: Yup.array()
    .min(1, 'Debes seleccionar el tipo de ruta.')
    .required('El tipo de ruta es requerido'),
})

=== usuarioValidationSchema.ts ===
import * as Yup from 'yup'
import { USERNAME } from '../utils/constants'
import {
  formatoMaxLength,
  formatoMinLenght,
  formatOnlyText,
} from './FormatFieldFormMessages'

export const usuarioValidationSchema = Yup.object({
  nombre: Yup.string()
    .matches(/^[aA-zZ\s]+$/, formatOnlyText('El nombre'))
    .required('El nombre es requerido'),
  apellido: Yup.string()
    .matches(/^[aA-zZ\s]+$/, formatOnlyText('El apellido'))
    .required('El apellido es requerido'),
  edad: Yup.number(),
  peso: Yup.number(),
  usuario: Yup.string()
    .max(
      USERNAME.MAX_LENGTH,
      formatoMaxLength('El nombre de usuario', USERNAME.MAX_LENGTH)
    )
    .min(
      USERNAME.MIN_LENGTH,
      formatoMinLenght('El nombre de usuario', USERNAME.MIN_LENGTH)
    )
    .required('Debe ingresar un nombre de usuario'),
  email: Yup.string()
    .email('Por favor, ingresa un correo electrónico válido')
    .required('Debe ingresar un correo electrónico'),
  tipo: Yup.string().required('El tipo de bicicleta es requerido'),
  marca: Yup.string().required('La marca de la bicicleta es requerida'),
  codigo: Yup.string().required('El código de la bicicleta es requerido'),
  foto_bicicleta: Yup.mixed().required(
    'Debes ingresar una foto de tu bicicleta'
  ),
})

=== Comunidad.tsx ===
import * as React from 'react'
import ComunidadAndRoles from '../components/templates/Comunidad/ComunidadAndRoles'
import BaseDrawerPaginas from '../components/templates/BasePaginasDrawer'

const Comunidad = () => {
  return (
    <BaseDrawerPaginas>
      <ComunidadAndRoles />
    </BaseDrawerPaginas>
  )
}

export default Comunidad

=== ConsejoDetalle.tsx ===
import { RouteProp } from '@react-navigation/native'
import * as React from 'react'
import { Consejo } from '../models/Consejo.model'
import { RootDrawerParamList } from '../models/Screens.types'
import ConsejoDetalleTemplate from '../components/templates/ConsejoDetalle/ConsejoDetalleTemplate'
import BaseDrawerPaginas from '../components/templates/BasePaginasDrawer'

interface ConsejoDetalleProps {
  route: RouteProp<RootDrawerParamList, 'ConsejoDetalle'>
}
const ConsejoDetalle = ({ route }: ConsejoDetalleProps) => {
  return (
    <BaseDrawerPaginas>
      <ConsejoDetalleTemplate consejo={route.params?.consejo as Consejo} />
    </BaseDrawerPaginas>
  )
}

export default ConsejoDetalle

=== ConsejoFormulario.tsx ===
import { RouteProp } from '@react-navigation/native'
import * as React from 'react'
import { RootStackParamList } from '../models/Screens.types'
import ConsejoForm from '../components/templates/FormularioConsejo/ConsejoFormulario'
import BasePaginasSecundarias from '../components/templates/BasePaginasSecundarias'

interface Props {
  route: RouteProp<RootStackParamList, 'ConsejoFormulario'>
}

const ConsejoFormulario = ({ route }: Props) => {
  return (
    <BasePaginasSecundarias>
      <ConsejoForm consejoProp={route.params?.consejo} />
    </BasePaginasSecundarias>
  )
}

export default ConsejoFormulario

=== Contactenos.tsx ===
import * as React from 'react'
import BaseDrawerPaginas from '../components/templates/BasePaginasDrawer'
import DatosContacto from '../components/templates/Contactenos/DatosContacto'

const Contactaenos = () => {
  return (
    <BaseDrawerPaginas backgroundColor="bg-white">
      <DatosContacto />
    </BaseDrawerPaginas>
  )
}

export default Contactaenos

=== DetalleNovedad.tsx ===
import { RouteProp } from '@react-navigation/native'
import * as React from 'react'
import { NovedadInterface } from '../models/Novedad.model'
import { RootStackParamList } from '../models/Screens.types'
import BasePaginasSecundarias from '../components/templates/BasePaginasSecundarias'
import NovedadIndividual from '../components/templates/DetalleNovedades/NovedadIndividual'
interface DetalleNovedadProps {
  route: RouteProp<RootStackParamList, 'DetalleNovedad'>
}

const DetalleNovedad = ({ route }: DetalleNovedadProps) => {
  return (
    <BasePaginasSecundarias>
      <NovedadIndividual data={route.params?.data as NovedadInterface} />
    </BasePaginasSecundarias>
  )
}

export default DetalleNovedad

=== DetallePublicacion.tsx ===
import { RouteProp } from '@react-navigation/native'
import React from 'react'
import BasePaginasSecundarias from '../components/templates/BasePaginasSecundarias'
import Publicacion from '../components/templates/DetallePublicacion/Publicacion'
import { RootStackParamList } from '../models/Screens.types'

interface DetallePublicacionProps {
  route: RouteProp<RootStackParamList, 'DetallePublicacion'>
}

const DetallePublicacion = ({ route }: DetallePublicacionProps) => {
  return (
    <BasePaginasSecundarias>
      <Publicacion token={route.params?.token as string} />
    </BasePaginasSecundarias>
  )
}

export default DetallePublicacion

=== DetalleRuta.tsx ===
import { RouteProp } from '@react-navigation/native'
import * as React from 'react'
import BasePaginasSecundarias from '../components/templates/BasePaginasSecundarias'
import RutaIndividual from '../components/templates/DetalleRutas/RutaIndividual'
import { RootStackParamList } from '../models/Screens.types'

interface DetallePublicacionProps {
  route: RouteProp<RootStackParamList, 'DetallePublicacion'>
}
const DetalleRuta = ({ route }: DetallePublicacionProps) => {
  return (
    <BasePaginasSecundarias>
      <RutaIndividual token={route.params?.token as string} />
    </BasePaginasSecundarias>
  )
}

export default DetalleRuta

=== FinalRuta.tsx ===
import { RouteProp } from '@react-navigation/native'
import * as React from 'react'
import BasePaginas from '../components/templates/BasePaginas'
import ReporteFinalRuta from '../components/templates/RastreoRutas/ReporteFinalRuta'
import { RootStackParamList } from '../models/Screens.types'

interface FinalRutaProps {
  route: RouteProp<RootStackParamList, 'FinalRuta'>
}

const FinalRuta = ({ route }: FinalRutaProps) => {
  const { tokenRuta = '', tokenUsuario = '' } = route.params || {}
  return (
    <BasePaginas>
      <ReporteFinalRuta tokenRuta={tokenRuta} tokenUsuario={tokenUsuario} />
    </BasePaginas>
  )
}

export default FinalRuta

=== HistorialConsejos.tsx ===
import * as React from 'react'
import HistorialConsejosRoot from '../components/templates/HistorialConsejos/HistorialConsejosRoot'
import BaseDrawerPaginas from '../components/templates/BasePaginasDrawer'

const HistorialConsejos = () => {
  return (
    <BaseDrawerPaginas>
      <HistorialConsejosRoot />
    </BaseDrawerPaginas>
  )
}

export default HistorialConsejos

=== HistorialNovedades.tsx ===
import * as React from 'react'
import HistorialNovedades from '../components/templates/HistorialNovedades/HistorialNovedades'
import BaseDrawerPaginas from '../components/templates/BasePaginasDrawer'

const Novedades = () => {
  return (
    <BaseDrawerPaginas>
      <HistorialNovedades />
    </BaseDrawerPaginas>
  )
}

export default Novedades

=== Inicio.tsx ===
import React, { useEffect } from 'react'
import BasePaginas from '../components/templates/BasePaginas'
import Consejos from '../components/templates/Inicio/Consejos'
import BannerPublicidad from '../components/templates/Inicio/BannerPublicidad'
import SectionTitle from '../components/moleculas/SectionTitle'
import AdminValidator from '../components/templates/AdminValidator'
import { NavigationProp, useNavigation } from '@react-navigation/native'
import { RootStackParamList, Screens } from '../models/Screens.types'
import { useDispatch, useSelector } from 'react-redux'
import { RootState } from '../redux/store'
import { setHasModified } from '../redux/consejo'
import { setNovedadHasModified } from '../redux/novedad'
import { setActiveScreen } from '../redux/screens'

const Inicio = () => {
  const navigation =
    useNavigation<NavigationProp<RootStackParamList, Screens>>()
  const { hasModified } = useSelector((state: RootState) => state.consejo)
  const dispatch = useDispatch()
  const { novedadHasModified } = useSelector(
    (state: RootState) => state.novedad
  )

  const onRefresh = async () => {
    dispatch(setHasModified({ hasModified: !hasModified }))
    dispatch(setNovedadHasModified({ novedadHasModified: !novedadHasModified }))
  }

  useEffect(() => {
    dispatch(setActiveScreen({ activeScreen: 'Inicio' }))
  }, [])

  return (
    <BasePaginas stickyIndexes={[1]} handleRefresh={onRefresh}>
      <AdminValidator stylesProp="py-4 px-2">
        <SectionTitle
          text="Novedades"
          hasButton
          buttonIcon={require('../../assets/plus.png')}
          handleClickButton={() => navigation.navigate('NovedadFormulario')}
        />
      </AdminValidator>
      <BannerPublicidad />
      <Consejos />
    </BasePaginas>
  )
}

export default Inicio

=== InicioRastreo.tsx ===
import { RouteProp } from '@react-navigation/native'
import * as React from 'react'
import BasePaginasSecundarias from '../components/templates/BasePaginasSecundarias'
import RastreoMain from '../components/templates/RastreoRutas/RastreoMain'
import { Ruta } from '../models/Rutas'
import { RootStackParamList } from '../models/Screens.types'

interface InicioRastreoProps {
  route: RouteProp<RootStackParamList, 'InicioRastreo'>
}

const InicioRastreo = ({ route }: InicioRastreoProps) => {
  return (
    <BasePaginasSecundarias>
      <RastreoMain ruta={route.params?.ruta as Ruta} />
    </BasePaginasSecundarias>
  )
}

export default InicioRastreo

=== Login.tsx ===
import React from 'react'
import BaseAutenticacion from '../components/templates/BaseAutenticacion'
import { RootStackParamList } from '../models/Screens.types'
import { NativeStackNavigationProp } from '@react-navigation/native-stack'
import LoginFormulario from '../components/templates/Login/LoginFormulario'

interface Props {
  navigation: NativeStackNavigationProp<RootStackParamList, 'Login'>
}

const Login = ({ navigation }: Props) => {
  return (
    <BaseAutenticacion>
      <LoginFormulario navigation={navigation} />
    </BaseAutenticacion>
  )
}

export default Login

=== Main.tsx ===
import 'react-native-gesture-handler'
import { NavigationContainer } from '@react-navigation/native'
import { createNativeStackNavigator } from '@react-navigation/native-stack'
import React, { useEffect } from 'react'
import Navbar from '../components/atomos/Navbar'
import Inicio from './Inicio'
import Rutas from './Rutas'
import Perfil from './Perfil'
import Login from './Login'
import Registro from './Registro'
import { useSelector } from 'react-redux'
import { RootState } from '../redux/store'
import { useAuthentication } from '../hooks/useAuthentication'
import Spinner from '../components/atomos/Spinner'
import ConsejoFormulario from './ConsejoFormulario'
import NovedadFormulario from './NovedadFormulario'
import DetalleNovedad from './DetalleNovedad'
import { createDrawerNavigator } from '@react-navigation/drawer'
import SideMenu from '../components/templates/SideMenu'
import Comunidad from './Comunidad'
import Consejos from './HistorialConsejos'
import Novedades from './HistorialNovedades'
import ConsejoDetalle from './ConsejoDetalle'
import Publicaciones from './Publicaciones'
import DetallePublicacion from './DetallePublicacion'
import PublicacionFormulario from './PublicacionFormulario'
import RutasFormulario from './RutasFormulario'
import DetalleRuta from './DetalleRuta'
import InicioRastreo from './InicioRastreo'
import RutaIncompleta from './RutaIncompleta'
import FinalRuta from './FinalRuta'
import PerfilFormulario from './PerfilFormulario'
import RastreoLocation from './RastreoLocation'
import SafeView from '../components/organismos/SafeView'
import Contactaenos from './Contactenos'
import Seguridad from './Seguridad'

const Stack = createNativeStackNavigator()
const Drawer = createDrawerNavigator()

const Main = () => {
  const { authToken } = useSelector((state: RootState) => state.user)
  const { setUser, isLoading } = useAuthentication()

  useEffect(() => {
    setUser()
  }, [])

  const AuthStack = () => {
    return (
      <Stack.Navigator
        screenOptions={{
          headerShown: false,
        }}
        initialRouteName="Login"
      >
        <Stack.Screen name="Login" component={Login} />
        <Stack.Screen name="Registro" component={Registro} />
      </Stack.Navigator>
    )
  }

  const HomeStack = () => {
    return (
      <Stack.Navigator
        screenOptions={{
          headerShown: false,
          animation: 'none',
        }}
        initialRouteName="Inicio"
      >
        <Stack.Screen name="Rutas" component={Rutas} />
        <Stack.Screen name="Perfil" component={Perfil} />
        <Stack.Screen name="DetalleNovedad" component={DetalleNovedad} />
        <Stack.Screen name="Publicaciones" component={Publicaciones} />
        <Stack.Screen name="NovedadFormulario" component={NovedadFormulario} />
        <Stack.Screen name="ConsejoFormulario" component={ConsejoFormulario} />
        <Stack.Screen name="DetalleRuta" component={DetalleRuta} />
        <Stack.Screen name="InicioRastreo" component={InicioRastreo} />
        <Stack.Screen name="RastreoUbicacion" component={RastreoLocation} />
        <Stack.Screen name="RutaIncompleta" component={RutaIncompleta} />
        <Stack.Screen name="FinalRuta" component={FinalRuta} />
        <Stack.Screen name="PerfilFormulario" component={PerfilFormulario} />
        <Stack.Screen
          name="PublicacionFormulario"
          component={PublicacionFormulario}
        />
        <Stack.Screen name="RutasFormulario" component={RutasFormulario} />
        <Stack.Screen
          name="Inicio"
          component={Inicio}
          options={{ headerBackVisible: false }}
        />
        <Stack.Screen
          name="DetallePublicacion"
          component={DetallePublicacion}
        />
      </Stack.Navigator>
    )
  }

  const MainStack = () => {
    return (
      <Drawer.Navigator
        drawerContent={SideMenu}
        screenOptions={{
          headerStyle: {
            backgroundColor: '#2D84C4',
            height: 70,
          },
          headerTitle: Navbar,
        }}
        initialRouteName="HomeStack"
        backBehavior="history"
      >
        <Drawer.Screen name="HomeStack" component={HomeStack} />
        <Drawer.Screen name="Comunidad" component={Comunidad} />
        <Drawer.Screen name="HistorialConsejos" component={Consejos} />
        <Drawer.Screen name="ConsejoDetalle" component={ConsejoDetalle} />
        <Drawer.Screen name="DetalleNovedad" component={DetalleNovedad} />
        <Drawer.Screen name="Novedades" component={Novedades} />
        <Drawer.Screen name="Inicio" component={Inicio} />
        <Drawer.Screen name="Perfil" component={Perfil} />
        <Drawer.Screen name="Contactenos" component={Contactaenos} />
        <Drawer.Screen name="Seguridad" component={Seguridad} />
      </Drawer.Navigator>
    )
  }

  return isLoading ? (
    <Spinner />
  ) : (
    <NavigationContainer>
      {authToken ? (
        <>
          <SafeView />
          <MainStack />
        </>
      ) : (
        <AuthStack />
      )}
    </NavigationContainer>
  )
}

export default Main

=== NovedadFormulario.tsx ===
import * as React from 'react'
import BasePaginasSecundarias from '../components/templates/BasePaginasSecundarias'
import PublicidadFormulario from '../components/templates/FormularioNovedad/NovedadFormulario'

const NovedadFormulario = () => {
  return (
    <BasePaginasSecundarias>
      <PublicidadFormulario />
    </BasePaginasSecundarias>
  )
}

export default NovedadFormulario

=== Perfil.tsx ===
import { RouteProp } from '@react-navigation/native'
import React from 'react'
import BasePaginas from '../components/templates/BasePaginas'
import PerfilRoot from '../components/templates/Perfil/PerfilRoot'
import { RootStackParamList } from '../models/Screens.types'

interface PerfilProps {
  route: RouteProp<RootStackParamList, 'Perfil'>
}

const Perfil = ({ route }: PerfilProps) => {
  return (
    <BasePaginas>
      <PerfilRoot userToken={route.params?.userToken as string} />
    </BasePaginas>
  )
}

export default Perfil

=== PerfilFormulario.tsx ===
import { RouteProp } from '@react-navigation/native'
import * as React from 'react'
import BasePaginasSecundarias from '../components/templates/BasePaginasSecundarias'
import PerfilForm from '../components/templates/FormularioPerfil/PerfilForm'
import { RootStackParamList } from '../models/Screens.types'

interface Props {
  route: RouteProp<RootStackParamList, 'PerfilFormulario'>
}

const PerfilFormulario = ({ route }: Props) => {
  return (
    <BasePaginasSecundarias>
      <PerfilForm datosPerfil={route?.params?.data} />
    </BasePaginasSecundarias>
  )
}

export default PerfilFormulario

=== Publicaciones.tsx ===
import React from 'react'
import { useDispatch, useSelector } from 'react-redux'
import BasePaginas from '../components/templates/BasePaginas'
import PublicacionesFeed from '../components/templates/Publicaciones/PublicacionesFeed'
import { setPublicacionHasModified } from '../redux/publicacion'
import { RootState } from '../redux/store'

const Publicaciones = () => {
  const dispatch = useDispatch()
  const { publicacionHasModified } = useSelector(
    (state: RootState) => state.publicacion
  )

  const onRefresh = async () => {
    dispatch(
      setPublicacionHasModified({
        publicacionHasModified: !publicacionHasModified,
      })
    )
  }

  return (
    <BasePaginas handleRefresh={onRefresh}>
      <PublicacionesFeed />
    </BasePaginas>
  )
}

export default Publicaciones

=== PublicacionFormulario.tsx ===
import { RouteProp } from '@react-navigation/native'
import * as React from 'react'
import BasePaginasSecundarias from '../components/templates/BasePaginasSecundarias'
import PublicacionFormularioTemplate from '../components/templates/FormularioPublicacion/PublicacionFormularioTemplate'
import { RootStackParamList } from '../models/Screens.types'

interface Props {
  route: RouteProp<RootStackParamList, 'PublicacionFormulario'>
}

const PublicacionFormulario = ({ route }: Props) => {
  return (
    <BasePaginasSecundarias>
      <PublicacionFormularioTemplate Prop={route.params?.data} />
    </BasePaginasSecundarias>
  )
}

export default PublicacionFormulario

=== RastreoLocation.tsx ===
import { RouteProp } from '@react-navigation/native'
import * as React from 'react'
import BasePaginasSecundarias from '../components/templates/BasePaginasSecundarias'
import RastreoUbicacion from '../components/templates/RastreoRutas/RastreoUbicacion'
import { Ruta } from '../models/Rutas'
import { RootStackParamList } from '../models/Screens.types'

interface RastreoLocationProps {
  route: RouteProp<RootStackParamList, 'RastreoUbicacion'>
}

const RastreoLocation = ({ route }: RastreoLocationProps) => {
  return (
    <BasePaginasSecundarias>
      <RastreoUbicacion ruta={route.params?.ruta as Ruta} />
    </BasePaginasSecundarias>
  )
}

export default RastreoLocation

=== Registro.tsx ===
import React from 'react'
import RegistroFormulario from '../components/templates/Registro/RegistroFormulario'
import BaseAutenticacion from '../components/templates/BaseAutenticacion'

const Registro = () => {
  return (
    <BaseAutenticacion>
      <RegistroFormulario />
    </BaseAutenticacion>
  )
}

export default Registro

=== RutaIncompleta.tsx ===
import { RouteProp } from '@react-navigation/native'
import * as React from 'react'
import BasePaginas from '../components/templates/BasePaginas'
import ReporteRutaIncompleta from '../components/templates/RastreoRutas/ReporteRutaIncompleta'
import { RootStackParamList } from '../models/Screens.types'

interface RutaIncompletaProps {
  route: RouteProp<RootStackParamList, 'RutaIncompleta'>
}

const RutaIncompleta = ({ route }: RutaIncompletaProps) => {
  const { tokenRuta = '', tokenUsuario = '' } = route.params || {}
  return (
    <BasePaginas>
      <ReporteRutaIncompleta
        tokenRuta={tokenRuta}
        tokenUsuario={tokenUsuario}
      />
    </BasePaginas>
  )
}

export default RutaIncompleta

=== Rutas.tsx ===
import React from 'react'
import { useDispatch, useSelector } from 'react-redux'
import BasePaginas from '../components/templates/BasePaginas'
import RutasFeed from '../components/templates/Rutas/RutasFeed'
import { setRutaHasModified } from '../redux/ruta'
import { RootState } from '../redux/store'

const Rutas = () => {
  const dispatch = useDispatch()
  const { rutaHasModified } = useSelector((state: RootState) => state.ruta)

  const onRefresh = async () => {
    dispatch(setRutaHasModified({ rutaHasModified: !rutaHasModified }))
  }

  return (
    <BasePaginas backgroundColor="bg-white" handleRefresh={onRefresh}>
      <RutasFeed />
    </BasePaginas>
  )
}

export default Rutas

=== RutasFormulario.tsx ===
import { RouteProp } from '@react-navigation/native'
import * as React from 'react'
import BasePaginasSecundarias from '../components/templates/BasePaginasSecundarias'
import FormularioRutas from '../components/templates/FormularioRutas/FormularioRutas'
import { Ruta } from '../models/Rutas'
import { RootStackParamList } from '../models/Screens.types'

interface Props {
  route: RouteProp<RootStackParamList, 'RutasFormulario'>
}

const RutasFormulario = ({ route }: Props) => {
  return (
    <BasePaginasSecundarias>
      <FormularioRutas rutaProp={route.params?.ruta as Ruta} />
    </BasePaginasSecundarias>
  )
}

export default RutasFormulario

=== Seguridad.tsx ===
import * as React from 'react'
import BaseDrawerPaginas from '../components/templates/BasePaginasDrawer'
import SeguridadDatos from '../components/templates/Seguridad/Seguridad'


const Seguridad = () => {
    return (
      <BaseDrawerPaginas backgroundColor="bg-white">
        <SeguridadDatos />
      </BaseDrawerPaginas>
    )
  }
  
  export default Seguridad
=== capitalizeText.ts ===
export const capitalize = (text: string | undefined) => {
  if (text) {
    return text.charAt(0).toUpperCase() + text.slice(1)
  }
  return ''
}

=== ckeckTypes.ts ===
import { Audio } from 'expo-av'
import { DocumentResult } from 'expo-document-picker'
import { ImageSourcePropType } from 'react-native'
import { MultimediaResult } from '../models/Publicaciones.model'

export const isDocumentResultType = (
  file: string | ImageSourcePropType | DocumentResult | MultimediaResult
): file is DocumentResult => {
  const fi = file as DocumentResult
  return typeof fi.type === 'string'
}

export const isAudioRecording = (
  file: MultimediaResult | Audio.Recording
): file is Audio.Recording => {
  const fi = file as Audio.Recording
  return !!fi._uri
}

=== constants.ts ===
import { Dimensions } from 'react-native'

export const TEXT_COLORS = {
  ORANGE: 'text-[#F16F31]',
  GRAY: 'text-[#DFDFDF]',
  DARK_GRAY: 'text-[#767676]',
  GRAY_PLACEHOLDER: 'text-[#B0B4B7]',
  PRIMARY_BLUE: 'text-[#01579B]',
  SKY_BLUE: 'text-[#2D84C4]',
  DARK_BLUE: 'text-[#0C3248]',
  GREEN_PRIMARY: 'text-[#5DB075]',
  RED: 'text-[#B00020]',
}

export const BACKGROUND_COLORS = {
  ORANGE: 'bg-[#F16F31]',
  SKY_BLUE: 'bg-[#2D84C4]',
  PRIMARY_BLUE: 'bg-[#01579B]',
  DARK_BLUE: 'bg-[#0C3248]',
  BLUE_LIGHTER: 'bg-[#F2FAFF]',
  GRAY: 'bg-[#DFDFDF]',
  GRAY_PLACEHOLDER: 'bg-[#e6e6e6]',
  GREEN: 'bg-[#D0FCE3]',
  GREEN_PRIMARY: 'bg-[#5DB075]',
  RED: 'bg-[#B00020]',
}

export const BORDER_COLORS = {
  GRAY: 'border-[#DFDFDF]',
  PRIMARY_BLUE: 'border-[#2D84C4]',
  DARK_BLUE: 'border-[#0C3248]',
  GREEN: 'border-[#5DB075]',
  ORANGE: 'border-[#F16F31]',
}

export const WIDTH_DIMENSIONS = Dimensions.get('window').width
export const HEIGHT_DIMENSIONS = Dimensions.get('window').height

export const DOCUMENT_RESULT_TYPES = {
  CANCEL: 'cancel',
  SUCCESS: 'success',
}

export const ESTADOS_RUTA = {
  DISPONIBLE: 'Disponible',
  FINALIZADA: 'Finalizada',
  CANCELADA: 'Cancelada',
  SIN_CUPOS: 'Sin Cupos',
  EN_CURSO: 'En Curso',
}

export const uri_rastreo_icon =
  'https://firebasestorage.googleapis.com/v0/b/omega-keep-354005.appspot.com/o/rutas%2Fbicicleta_marker.png?alt=media&token=ee9540cd-54cf-401a-822d-6b1920fc5102'
export const uri_meta_icon =
  'https://firebasestorage.googleapis.com/v0/b/omega-keep-354005.appspot.com/o/rutas%2Fmeta.png?alt=media&token=5da6553c-e489-4e89-9614-ce23276d04df'

export const CONSEJO_MAX_LENGTH = 100
export const PASSWORD = {
  MAX_SIZE: 16,
  MIN_SIZE: 8,
}

export const USERNAME = {
  MAX_LENGTH: 16,
  MIN_LENGTH: 3,
}

export const PUBLICIDAD = {
  DESCRIPCION_MAX_LENGTH: 500,
  DESCRIPCION_CORTA_MAX_LENGTH: 150,
}

export const PUBLICACION = {
  TITULO_MAX_LENGTH: 150,
}

export const RUTAS = {
  NOMBRE_MAX_LENGTH: 200,
  NOMBRE_MIN_LENGTH: 5,
  MAX_CUPOS: 9999999,
  MIN_CUPOS: 1,
}
export const FOLDERS_STORAGE = {
  CONSEJOS: 'consejos',
  RUTAS: 'rutas',
  PUBLICACIONES: 'publicaciones',
  NOVEDADES: 'novedades',
  USUARIOS: 'usuarios',
}

export const MIME_TYPES = {
  IMAGEN: 'imagen',
  IMAGE: 'image',
  VIDEO: 'video',
  PDF: 'application',
  AUDIO: 'audio',
}

export const etiquetasPublicaciones = [
  {
    value: 'recomendaciones',
    nombre: 'Recomendaciones',
    icon: require('../../assets/recomendacion_icon.png'),
  },
  {
    value: 'salud',
    nombre: 'Salud',
    icon: require('../../assets/salud_icon.png'),
  },
  {
    value: 'felicitaciones',
    nombre: 'Felicitaciones',
    icon: require('../../assets/celebracion_icon.png'),
  },
  {
    value: 'peligro',
    nombre: 'Peligro',
    icon: require('../../assets/peligro_icon.png'),
  },
  {
    value: 'noticias',
    nombre: 'Noticias',
    icon: require('../../assets/peligro_icon.png'),
  },
]

export const etiquetasRutas = [
  {
    value: 'inscritas',
    nombre: 'Inscritas',
  },
  {
    value: 'disponibles',
    nombre: 'Disponibles',
  },
  {
    value: 'finalizada',
    nombre: 'Finalizada',
  },
  {
    value: 'sin_cupo',
    nombre: 'Sin Cupo',
  },
]

export const generosCatalog = [
  { nombre: 'Femenino', value: 'Femenino' },
  { nombre: 'Masculino', value: 'Masculino' },
  { nombre: 'Otro', value: 'Otro' },
]

export const nivelesCatalog = [
  { nombre: 'Nivel Básico', value: 'Nivel Básico' },
  { nombre: 'Nivel Intermedio', value: 'Nivel Intermedio' },
  { nombre: 'Nivel Avanzado', value: 'Nivel Avanzado' },
]

=== etiquetas.ts ===
import { etiquetasPublicaciones } from './constants'

export const getEtiquetaPublicacionesByName = (name: string) => {
  return etiquetasPublicaciones.find((etiqueta) => etiqueta.value === name)
}

=== parseDates.ts ===
export const getFecha = (fecha: string) => {
  if (!fecha) return
  const date = new Date(fecha)
  const dia = `${date.getDate()}/${date.getMonth()}/${date.getFullYear()}`
  const minutos = date.getMinutes()
  const hora = `${date.getUTCHours()}:${minutos === 0 ? '00' : minutos}`
  return `${dia} ${hora}`
}

=== parseRouteState.ts ===
import { Estado, EstadoRuta } from '../models/Rutas'

export const getEstadoRuta = (estado: Estado | undefined): EstadoRuta => {
  if (!estado) return 'Finalizada'
  if (estado['estado_no_iniciada']) return 'Disponible'
  if (estado['estado_finalizado']) return 'Finalizada'
  if (estado['estado_sin_cupos']) return 'Sin Cupos'
  if (estado['estado_cancelado']) return 'Cancelada'
  return 'En Curso'
}

=== rastreoCalculations.ts ===
import { getDistance } from 'geolib'

const MET_CICLISMO = 7.2
const FACTOR = 0.0175

//Recibo la duración en horas, así que la convierto en minutos para este calculo
export const calcularKcalorias = (duracion: number, peso: number) => {
  return peso * MET_CICLISMO * FACTOR * (duracion * 60)
}

export const calcularDistancia = (coordinateX: any, coordinateY: any) => {
  return getDistance(
    {
      latitude: coordinateX?.latitude,
      lng: coordinateX?.longitude,
    },
    { latitude: coordinateY?.latitude, longitude: coordinateY?.longitude }
  )
}

export const calcularVelocidadPromedio = (velocidades: number[]) => {
  const filterParadas = velocidades.filter((velocidad) => velocidad !== 0)
  const total = filterParadas.reduce((sum, velocidad) => sum + velocidad, 0)
  return (total / (filterParadas.length || 1)) * 3.6
}

export const calcularTiempoRecorrido = (timestamp: number[]) => {
  const startTimestamp = timestamp[0] || 0
  const endTimestamp = timestamp[timestamp.length - 1] || 0
  const timestampRecorrido = endTimestamp - startTimestamp
  return timestampRecorrido * (1 / 1000) * (1 / 60) * (1 / 60)
}

export const getHorasEstimadas = (fecha_inicio?: any, fecha_fin?: any) => {
  const dateStart = new Date(fecha_inicio || '')
  const dateEnd = new Date(fecha_fin || '')
  return Math.ceil(
    ((dateEnd.getTime() - dateStart.getTime()) / 1000) * (1 / 60) * (1 / 60)
  )
}

